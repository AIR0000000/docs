{
    "openapi": "3.0.3",
    "info": {
      "title": "Product Layer API",
      "description": "Core API Server",
      "version": "1.0"
    },
    "servers": [
      {
        "url": "http://0.0.0.0:8084"
      }
    ],
    "paths": {
      "/api/v1/aggregators": {
        "post": {
          "tags": [
            "aggregator"
          ],
          "summary": "Create aggregator",
          "description": "Create aggregator",
          "operationId": "aggregator#create",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRequestBody"
                },
                "example": {
                  "aggAccountId": "89efe162-8bca-4a18-a9bf-3ff80738e726",
                  "captureKyc": true,
                  "merchantVpaHandles": [
                    "okaxis",
                    "okicici"
                  ],
                  "name": "Pinelabs",
                  "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "parentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentModes": [
                    "savings",
                    "lite",
                    "erupi"
                  ],
                  "products": [
                    "deeplinks",
                    "sqr",
                    "mqr"
                  ],
                  "whitelistVpa": true
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateAggConfigResponse"
                  },
                  "example": {
                    "aggAccountId": "89efe162-8bca-4a18-a9bf-3ff80738e726",
                    "captureKyc": true,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantVpaHandles": [
                      "okaxis",
                      "okicici"
                    ],
                    "name": "Pinelabs",
                    "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "parentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentModes": [
                      "savings",
                      "lite",
                      "erupi"
                    ],
                    "products": [
                      "deeplinks",
                      "sqr",
                      "mqr"
                    ],
                    "status": "inactive",
                    "whitelistVpa": false
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/aggregators/wrapper/merchants": {
        "post": {
          "tags": [
            "merchant"
          ],
          "summary": "Create merchant (to be used by an aggregator)",
          "description": "Create merchant (to be used by an aggregator)",
          "operationId": "merchant#createMerchantWrapper",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMerchantWrapperRequestBody"
                },
                "example": {
                  "acceptDeemedTxns": true,
                  "aggregatorAccountId": "328a928f-e277-4798-8e28-4b19a61a8a23",
                  "businessName": "deku",
                  "businessType": "PUBLIC",
                  "franchiseName": "deku",
                  "genre": "ONLINE",
                  "legalName": "deku",
                  "mcc": "5432",
                  "merchantName": "deku",
                  "merchantType": "small",
                  "onboardingType": "bank",
                  "paymentModes": [
                    "savings",
                    "lite",
                    "erupi",
                    "rupay_cc"
                  ],
                  "products": [
                    "deeplinks",
                    "sqr",
                    "mqr"
                  ],
                  "settlement": {
                    "cycles": [
                      {
                        "endTime": "1999-05-22T01:44:35Z",
                        "settlementTime": "1991-12-13T21:44:41Z",
                        "startTime": "1982-01-16T06:49:16Z"
                      },
                      {
                        "endTime": "1999-05-22T01:44:35Z",
                        "settlementTime": "1991-12-13T21:44:41Z",
                        "startTime": "1982-01-16T06:49:16Z"
                      }
                    ],
                    "frequency": "TPlusOne",
                    "splitsEnabled": false,
                    "type": "Net"
                  },
                  "settlementsEnabled": false,
                  "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MerchantResponse"
                  },
                  "example": {
                    "acceptDeemedTxns": true,
                    "addressProviderId": "1237800298651584417",
                    "businessName": "deku",
                    "businessType": "PROPRIETARY",
                    "callbackURLsEnabled": true,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "documentStatus": "APPROVED",
                    "franchiseName": "deku",
                    "genre": "ONLINE",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "legalName": "deku",
                    "mcc": "5432",
                    "merchantName": "deku",
                    "merchantType": "small",
                    "onboardingType": "bank",
                    "paId": "1237799847336085408",
                    "paymentModes": [
                      "savings",
                      "lite",
                      "erupi",
                      "rupay_cc"
                    ],
                    "products": [
                      "deeplinks",
                      "sqr",
                      "mqr"
                    ],
                    "settlement": {
                      "cycles": [
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        },
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        },
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        }
                      ],
                      "frequency": "TPlusOne",
                      "splitsEnabled": true,
                      "type": "Net"
                    },
                    "settlementsEnabled": false,
                    "standardAccountId": "Deleniti ipsam.",
                    "transactionStatus": "active"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/collect": {
        "post": {
          "tags": [
            "collect"
          ],
          "summary": "Create collect request",
          "description": "Create collect request",
          "operationId": "collect#create",
          "parameters": [
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRequestBody2"
                },
                "example": {
                  "amount": 10000,
                  "currency": "INR",
                  "customerVpa": "dekup@okhdfc",
                  "expireAfter": 2,
                  "merchantReferenceId": "1240689979139556557",
                  "merchantVpa": "deku@okokaxis",
                  "metadata": {
                    "InvoiceNumber": "INV-21-12-009"
                  },
                  "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "transactionNote": "testcollect"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateCollectResponse"
                  },
                  "example": {
                    "amount": 10000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "customerVpa": "dekup@okhdfc",
                    "expireAfter": 2,
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "merchantVpa": "deku@okokaxis",
                    "metadata": {
                      "InvoiceNumber": "INV-21-12-009"
                    },
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "refId": "1240689979139556558",
                    "status": "active",
                    "transactionNote": "testcollect"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Forbidden response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/collect/{id}": {
        "get": {
          "tags": [
            "collect"
          ],
          "summary": "Check collect request status",
          "description": "Check collect request status",
          "operationId": "collect#fetchById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the resource",
              "required": true,
              "schema": {
                "type": "string",
                "description": "id of the resource",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FetchCollectResponse"
                  },
                  "example": {
                    "amount": 10000,
                    "closedAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "customerVpa": "dekup@okhdfc",
                    "expireAfter": 2,
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "merchantVpa": "deku@okokaxis",
                    "metadata": {
                      "InvoiceNumber": "INV-21-12-009"
                    },
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "reason": {
                      "code": "unable-to-fulfill-request",
                      "desc": "unable-to-fulfill-request",
                      "npciErrCode": "YG",
                      "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                      "npciRespCode": "YG",
                      "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                    },
                    "refId": "1240689979139556558",
                    "status": "active",
                    "transactionNote": "testcollect"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Forbidden response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/customer-vpas/verify": {
        "post": {
          "tags": [
            "customer-vpa"
          ],
          "summary": "Verify customer vpa",
          "description": "Verify customer vpa",
          "operationId": "customer-vpa#verify",
          "parameters": [
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyRequestBody"
                },
                "example": {
                  "customerVpa": "dekup@okokaxis",
                  "merchantReferenceId": "1240689979139556557"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VerifyCustomerVpaResponse"
                  },
                  "example": {
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "customerName": "deku",
                    "customerVpa": "ram@okhdfc",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "status": "pending"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Forbidden response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/customer-vpas/{id}": {
        "get": {
          "tags": [
            "customer-vpa"
          ],
          "summary": "Check customer vpa verification status",
          "description": "Check customer vpa verification status",
          "operationId": "customer-vpa#fetchById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the request",
              "required": true,
              "schema": {
                "type": "string",
                "description": "ID of the request",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FetchCustomerVpaByIDResponse"
                  },
                  "example": {
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "customerAccountType": "savings",
                    "customerName": "deku",
                    "customerVpa": "ram@okhdfc",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "reason": {
                      "code": "unable-to-fulfill-request",
                      "desc": "unable-to-fulfill-request",
                      "npciErrCode": "YG",
                      "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                      "npciRespCode": "YG",
                      "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                    },
                    "status": "pending"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Forbidden response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/disputes/{disputeId}": {
        "get": {
          "tags": [
            "disputes"
          ],
          "summary": "Fetch dispute",
          "description": "Fetch dispute",
          "operationId": "disputes#fetchDisputeById",
          "parameters": [
            {
              "name": "disputeId",
              "in": "path",
              "description": "Dispute id of the dispute",
              "required": true,
              "schema": {
                "type": "string",
                "description": "Dispute id of the dispute",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "Merchant id of the dispute",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "Merchant id of the dispute",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateDisputeStatusResponse"
                  },
                  "example": {
                    "amount": 100,
                    "currency": "INR",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "reason": "Dispute accepted by merchant",
                    "rrn": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "status": "accepted",
                    "txnId": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/disputes/{disputeId}/status": {
        "put": {
          "tags": [
            "disputes"
          ],
          "summary": "Update dispute status",
          "description": "Update dispute status",
          "operationId": "disputes#updateDisputeStatus",
          "parameters": [
            {
              "name": "disputeId",
              "in": "path",
              "description": "Dispute id of the dispute",
              "required": true,
              "schema": {
                "type": "string",
                "description": "Dispute id of the dispute",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "Merchant id of the dispute",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "Merchant id of the dispute",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDisputeStatusRequestBody"
                },
                "example": {
                  "reason": "Dispute accepted by merchant",
                  "status": "rejected"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateDisputeStatusResponse"
                  },
                  "example": {
                    "amount": 100,
                    "currency": "INR",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "reason": "Dispute accepted by merchant",
                    "rrn": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "status": "rejected",
                    "txnId": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/info": {
        "post": {
          "tags": [
            "merchant"
          ],
          "summary": "Create merchant",
          "description": "Create merchant",
          "operationId": "merchant#createWithInfo",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWithInfoRequestBody"
                },
                "example": {
                  "acceptDeemedTxns": true,
                  "aggregatorAccountId": "328a928f-e277-4798-8e28-4b19a61a8a23",
                  "businessName": "deku",
                  "businessType": "PUBLIC",
                  "franchiseName": "deku",
                  "genre": "ONLINE",
                  "legalName": "deku",
                  "mcc": "5432",
                  "merchantName": "deku",
                  "merchantType": "small",
                  "onboardingType": "bank",
                  "settlement": {
                    "cycles": [
                      {
                        "endTime": "1999-05-22T01:44:35Z",
                        "settlementTime": "1991-12-13T21:44:41Z",
                        "startTime": "1982-01-16T06:49:16Z"
                      },
                      {
                        "endTime": "1999-05-22T01:44:35Z",
                        "settlementTime": "1991-12-13T21:44:41Z",
                        "startTime": "1982-01-16T06:49:16Z"
                      }
                    ],
                    "frequency": "TPlusOne",
                    "splitsEnabled": false,
                    "type": "Net"
                  },
                  "settlementsEnabled": true,
                  "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MerchantResponse"
                  },
                  "example": {
                    "acceptDeemedTxns": true,
                    "addressProviderId": "1237800298651584417",
                    "businessName": "deku",
                    "businessType": "PROPRIETARY",
                    "callbackURLsEnabled": true,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "documentStatus": "APPROVED",
                    "franchiseName": "deku",
                    "genre": "ONLINE",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "legalName": "deku",
                    "mcc": "5432",
                    "merchantName": "deku",
                    "merchantType": "small",
                    "onboardingType": "bank",
                    "paId": "1237799847336085408",
                    "paymentModes": [
                      "savings",
                      "lite",
                      "erupi",
                      "rupay_cc"
                    ],
                    "products": [
                      "deeplinks",
                      "sqr",
                      "mqr"
                    ],
                    "settlement": {
                      "cycles": [
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        },
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        },
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        }
                      ],
                      "frequency": "TPlusOne",
                      "splitsEnabled": true,
                      "type": "Net"
                    },
                    "settlementsEnabled": true,
                    "standardAccountId": "Accusamus voluptates voluptatibus quia dolore.",
                    "transactionStatus": "active"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/mandate-operations/{id}": {
        "get": {
          "tags": [
            "mandates"
          ],
          "summary": "Check mandate operation status",
          "description": "Check mandate operation status",
          "operationId": "mandates#fetchMandateOperationById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the mandate operation that needs to be queried",
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the mandate operation that needs to be queried",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "Id of the merchant who created the mandate",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the merchant who created the mandate",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FetchMandateOperationResponse"
                  },
                  "example": {
                    "amountLimit": 1000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "endDate": "02012006",
                    "expireAfter": 120,
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "intentLink": "upi://mandate?pa=deku040920232@okokaxis&validitystart=31121995&validityend=30122025&am=901.00&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=01&purpose=14&rev=N&block=N&txnType=update&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                    "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "ABC1234789",
                    "mode": "qr",
                    "reason": {
                      "code": "unable-to-fulfill-request",
                      "desc": "unable-to-fulfill-request",
                      "npciErrCode": "YG",
                      "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                      "npciRespCode": "YG",
                      "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                    },
                    "status": "pending",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                    "type": "Sint aspernatur.",
                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/mandates": {
        "post": {
          "tags": [
            "mandates"
          ],
          "summary": "Create mandate",
          "description": "Create mandate",
          "operationId": "mandates#create",
          "parameters": [
            {
              "name": "merchantId",
              "in": "header",
              "description": "Id of the merchant who is trying create the mandate",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the merchant who is trying create the mandate",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRequestBody5"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "blockFunds": true,
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": false,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 120,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "initiationMode": "00",
                  "maxAmountLimit": 1000,
                  "merchantReferenceId": "ABC1234789",
                  "merchantVpa": "acme.corp@axis",
                  "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "purpose": "14",
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "shareToPayee": false,
                  "startDate": "02012006",
                  "transactionNote": "Transaction note"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateMandateResponse"
                  },
                  "example": {
                    "allowMultipleDebit": true,
                    "amount": 1000,
                    "amountRule": "max",
                    "autoExecute": true,
                    "autoPreNotify": true,
                    "blockFunds": true,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "creationMode": "qr",
                    "currency": "INR",
                    "customerRevocable": true,
                    "customerVpa": "ram@axis",
                    "endDate": "02012008",
                    "expireAfter": 120,
                    "firstExecutionAmount": 1000,
                    "frequency": "monthly",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "initiationMode": "00",
                    "intentLink": "upi://mandate?pa=deku040920232@okokaxis&pn=merchant-1&validitystart=31121995&validityend=31121996&am=100.00&amrule=MAX&recur=one%20time&recurvalue=0&recurtype=on&tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI&cu=INR&mc=1234&mode=04&purpose=14&rev=N&share=Y&qrexpire=04092023&block=N&orgid=000000&version=2.0&txnType=create&tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                    "maxAmountLimit": 1000,
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "ABC1234789",
                    "merchantVpa": "acme.corp@axis",
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "purpose": "14",
                    "recurrenceRule": "on",
                    "recurrenceValue": 1,
                    "shareToPayee": false,
                    "startDate": "02012006",
                    "status": "pending",
                    "transactionNote": "Transaction note",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/mandates/{mandateId}": {
        "get": {
          "tags": [
            "mandates"
          ],
          "summary": "Check mandate status",
          "description": "Check mandate status",
          "operationId": "mandates#fetchById",
          "parameters": [
            {
              "name": "mandateId",
              "in": "path",
              "description": "Id of the mandate that needs to be fetched",
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the mandate that needs to be fetched",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "Id of the merchant who is trying create the mandate",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the merchant who is trying create the mandate",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FetchMandateResponse"
                  },
                  "example": {
                    "allowMultipleDebit": true,
                    "amount": 1000,
                    "amountRule": "max",
                    "autoExecute": true,
                    "autoPreNotify": true,
                    "blockFunds": true,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "creationMode": "qr",
                    "currency": "INR",
                    "customerRevocable": true,
                    "customerVpa": "ram@axis",
                    "endDate": "02012008",
                    "expireAfter": 120,
                    "firstExecutionAmount": 1000,
                    "frequency": "monthly",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "initiationMode": "00",
                    "intentLink": "upi://mandate?pa=deku040920232@okokaxis&pn=merchant-1&validitystart=31121995&validityend=31121996&am=100.00&amrule=MAX&recur=one%20time&recurvalue=0&recurtype=on&tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI&cu=INR&mc=1234&mode=04&purpose=14&rev=N&share=Y&qrexpire=04092023&block=N&orgid=000000&version=2.0&txnType=create&tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                    "maxAmountLimit": 1000,
                    "merchantId": "Ea voluptatibus quia dignissimos.",
                    "merchantReferenceId": "ABC1234789",
                    "merchantVpa": "acme.corp@axis",
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "purpose": "14",
                    "reason": {
                      "code": "unable-to-fulfill-request",
                      "desc": "unable-to-fulfill-request",
                      "npciErrCode": "YG",
                      "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                      "npciRespCode": "YG",
                      "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                    },
                    "recurrenceRule": "on",
                    "recurrenceValue": 1,
                    "shareToPayee": false,
                    "startDate": "02012006",
                    "status": "pending",
                    "transactionNote": "Transaction note",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/mandates/{mandateId}/execute": {
        "post": {
          "tags": [
            "mandates"
          ],
          "summary": "Execute mandate",
          "description": "Execute mandate",
          "operationId": "mandates#execute",
          "parameters": [
            {
              "name": "mandateId",
              "in": "path",
              "description": "Id of the mandate that needs to be executed",
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the mandate that needs to be executed",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "Id of the merchant who is trying create the mandate",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the merchant who is trying create the mandate",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteRequestBody"
                },
                "example": {
                  "amount": 1000,
                  "merchantReferenceId": "ABC1234789",
                  "remark": "Transaction for car loan emi",
                  "sequenceNumber": 1,
                  "umn": "123456789"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MandateExecutionResponse"
                  },
                  "example": {
                    "amount": 1000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "ABC1234789",
                    "reason": {
                      "code": "unable-to-fulfill-request",
                      "desc": "unable-to-fulfill-request",
                      "npciErrCode": "YG",
                      "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                      "npciRespCode": "YG",
                      "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                    },
                    "remark": "Transaction for car loan emi",
                    "sequenceNumber": 1,
                    "status": "live",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/mandates/{mandateId}/modify": {
        "put": {
          "tags": [
            "mandates"
          ],
          "summary": "Modify mandate",
          "description": "Modify mandate",
          "operationId": "mandates#modify",
          "parameters": [
            {
              "name": "mandateId",
              "in": "path",
              "description": "Id of the mandate that needs to be modified",
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the mandate that needs to be modified",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "Id of the merchant who created the mandate",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the merchant who created the mandate",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifyRequestBody"
                },
                "example": {
                  "amountLimit": 1000,
                  "endDate": "02012006",
                  "expireAfter": 120,
                  "merchantReferenceId": "ABC1234789"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateMandateResponse"
                  },
                  "example": {
                    "amountLimit": 1000,
                    "endDate": "02012006",
                    "expireAfter": 120,
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "intentLink": "upi://mandate?pa=deku040920232@okokaxis&validitystart=31121995&validityend=30122025&am=901.00&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=01&purpose=14&rev=N&block=N&txnType=update&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                    "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "ABC1234789",
                    "mode": "qr",
                    "status": "pending",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/mandates/{mandateId}/notify": {
        "post": {
          "tags": [
            "mandates"
          ],
          "summary": "Send pre debit notification for a mandate",
          "description": "Send pre debit notification for a mandate",
          "operationId": "mandates#notify",
          "parameters": [
            {
              "name": "mandateId",
              "in": "path",
              "description": "Id of the mandate that needs to be notified",
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the mandate that needs to be notified",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "Merchant id of the mandate",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "Merchant id of the mandate",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "examples": {
                "default": {
                  "summary": "default",
                  "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                }
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotifyRequestBody"
                },
                "example": {
                  "amount": 1000,
                  "executionDate": "02012006",
                  "merchantReferenceId": "ABC1234789",
                  "sequenceNumber": 1,
                  "umn": "setumandate1234789@ybl"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MandatePreDebitNotificationResponse"
                  },
                  "example": {
                    "amount": 1000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "executionDate": "02012006",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "ABC1234789",
                    "reason": {
                      "code": "unable-to-fulfill-request",
                      "desc": "unable-to-fulfill-request",
                      "npciErrCode": "YG",
                      "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                      "npciRespCode": "YG",
                      "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                    },
                    "sequenceNumber": 1,
                    "status": "success",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/mandates/{mandateId}/revoke": {
        "put": {
          "tags": [
            "mandates"
          ],
          "summary": "Revoke mandate",
          "description": "Revoke mandate",
          "operationId": "mandates#revoke",
          "parameters": [
            {
              "name": "mandateId",
              "in": "path",
              "description": "Id of the mandate that needs to be revoked",
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the mandate that needs to be revoked",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "Id of the merchant who created the mandate",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the merchant who created the mandate",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeRequestBody"
                },
                "example": {
                  "expireAfter": 120,
                  "merchantReferenceId": "ABC1234789"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RevokeMandateResponse"
                  },
                  "example": {
                    "expireAfter": 120,
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "intentLink": "upi://mandate?pa=deku040920232@okokaxis&validitystart=1995-12-31&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=04&purpose=14&rev=N&block=N&txnType=revoke&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETE9q1rQXW3wXHzDdaqJTDGHHTBkJ0Segc",
                    "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "ABC1234789",
                    "mode": "intent",
                    "status": "pending",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/payment-links": {
        "post": {
          "tags": [
            "payment-link"
          ],
          "summary": "Create payment link",
          "description": "Create payment link",
          "operationId": "payment-link#create",
          "parameters": [
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRequestBody3"
                },
                "example": {
                  "amount": 10000,
                  "currency": "INR",
                  "expiryDate": "2023-09-04 12:08:20.202644 +0530 IST",
                  "merchantReferenceId": "1240689979139556557",
                  "merchantVpa": "deku@okokaxis",
                  "metadata": {
                    "InvoiceNumber": "INV-21-12-009"
                  },
                  "minAmount": 10000,
                  "paymentType": "pay_single",
                  "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "transactionNote": "testpay"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateDeeplinkResponse"
                  },
                  "example": {
                    "amount": 10000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "expiryDate": "2023-09-04 12:08:20.202644 +0530 IST",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "merchantVpa": "deku@okokaxis",
                    "metadata": {
                      "InvoiceNumber": "INV-21-12-009"
                    },
                    "minAmount": 10000,
                    "paymentType": "pay_single",
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "refId": "1240689979139556558",
                    "shortCode": "Np3KnBCM8Om0",
                    "shortLink": "bills.pe/Np3KnBCM8Om0",
                    "status": "active",
                    "transactionNote": "testpay"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Forbidden response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/payment-links/{id}": {
        "get": {
          "tags": [
            "payment-link"
          ],
          "summary": "Check payment link status",
          "description": "Check payment link status",
          "operationId": "payment-link#fetchById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the resource",
              "required": true,
              "schema": {
                "type": "string",
                "description": "id of the resource",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeeplinkResponse"
                  },
                  "example": {
                    "amount": 10000,
                    "closedAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "expiryDate": "2023-09-04 12:08:20.202644 +0530 IST",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "merchantVpa": "deku@okokaxis",
                    "metadata": {
                      "InvoiceNumber": "INV-21-12-009"
                    },
                    "minAmount": 10000,
                    "paymentType": "pay_single",
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "reason": {
                      "code": "unable-to-fulfill-request",
                      "desc": "unable-to-fulfill-request",
                      "npciErrCode": "YG",
                      "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                      "npciRespCode": "YG",
                      "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                    },
                    "refId": "1240689979139556558",
                    "shortCode": "Np3KnBCM8Om0",
                    "shortLink": "bills.pe/Np3KnBCM8Om0",
                    "status": "active",
                    "transactionNote": "testpay"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Forbidden response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/payments/product-instances/{id}/history": {
        "get": {
          "tags": [
            "payments"
          ],
          "summary": "Check payment status for last 5 payments for a product instance",
          "description": "Check payment status for last 5 payments for a product instance",
          "operationId": "payments#fetchHistoryByProductInstanceId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "this is the deeplink / collect request / mandate id associated with the payment",
              "required": true,
              "schema": {
                "type": "string",
                "description": "this is the deeplink / collect request / mandate id associated with the payment",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FetchPaymentListResponse"
                  },
                  "example": {
                    "payments": [
                      {
                        "amount": 10000,
                        "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                        "currency": "INR",
                        "customerAccountType": "savings",
                        "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                        "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                        "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "reason": {
                          "code": "unable-to-fulfill-request",
                          "desc": "unable-to-fulfill-request",
                          "npciErrCode": "YG",
                          "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                          "npciRespCode": "YG",
                          "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                        },
                        "refId": "1240689979139556558",
                        "requestId": "cjqml1f2e5ocq2mesej0",
                        "rrn": "124068997913",
                        "status": "initiated",
                        "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                        "txnNote": "testpay"
                      },
                      {
                        "amount": 10000,
                        "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                        "currency": "INR",
                        "customerAccountType": "savings",
                        "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                        "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                        "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "reason": {
                          "code": "unable-to-fulfill-request",
                          "desc": "unable-to-fulfill-request",
                          "npciErrCode": "YG",
                          "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                          "npciRespCode": "YG",
                          "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                        },
                        "refId": "1240689979139556558",
                        "requestId": "cjqml1f2e5ocq2mesej0",
                        "rrn": "124068997913",
                        "status": "initiated",
                        "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                        "txnNote": "testpay"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/payments/product-instances/{id}/last": {
        "get": {
          "tags": [
            "payments"
          ],
          "summary": "Check status",
          "description": "Check status",
          "operationId": "payments#fetchLastByProductInstanceId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "this is the deeplink / collect request / mandate id associated with the payment",
              "required": true,
              "schema": {
                "type": "string",
                "description": "this is the deeplink / collect request / mandate id associated with the payment",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FetchPaymentResponse"
                  },
                  "example": {
                    "amount": 10000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "customerAccountType": "savings",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                    "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "reason": {
                      "code": "unable-to-fulfill-request",
                      "desc": "unable-to-fulfill-request",
                      "npciErrCode": "YG",
                      "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                      "npciRespCode": "YG",
                      "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                    },
                    "refId": "1240689979139556558",
                    "rrn": "124068997913",
                    "status": "initiated",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                    "txnNote": "testpay"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/payments/{id}": {
        "get": {
          "tags": [
            "payments"
          ],
          "summary": "Fetch payment",
          "description": "Fetch payment",
          "operationId": "payments#fetchById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the resource",
              "required": true,
              "schema": {
                "type": "string",
                "description": "id of the resource",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FetchPaymentResponse"
                  },
                  "example": {
                    "amount": 10000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "customerAccountType": "savings",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                    "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "reason": {
                      "code": "unable-to-fulfill-request",
                      "desc": "unable-to-fulfill-request",
                      "npciErrCode": "YG",
                      "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                      "npciRespCode": "YG",
                      "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                    },
                    "refId": "1240689979139556558",
                    "rrn": "124068997913",
                    "status": "initiated",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                    "txnNote": "testpay"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/refunds": {
        "post": {
          "tags": [
            "refund"
          ],
          "summary": "Create refund",
          "description": "Create a refund",
          "operationId": "refund#create",
          "parameters": [
            {
              "name": "merchantId",
              "in": "header",
              "description": "Id of the merchant who is creating the refund",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the merchant who is creating the refund",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRequestBody6"
                },
                "example": {
                  "amount": 10000,
                  "currency": "INR",
                  "merchantReferenceId": "BILL12345",
                  "remarks": "Services not rendered",
                  "txnDate": "2023-09-04 12:08:20.202644 +0530 IST",
                  "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                  "type": "online"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateRefundResponse"
                  },
                  "example": {
                    "amount": 10000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "BILL12345",
                    "reason": {
                      "errCode": "refund-disabled",
                      "npciErrCode": "R21",
                      "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                    },
                    "remarks": "Services not rendered",
                    "status": "success",
                    "txnDate": "2023-09-04 12:08:20.202644 +0530 IST",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                    "type": "online"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Forbidden response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/refunds/{id}": {
        "get": {
          "tags": [
            "refund"
          ],
          "summary": "Check refund status",
          "description": "Check refund status",
          "operationId": "refund#fetchById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Refund id returned during the refund initiation request",
              "required": true,
              "schema": {
                "type": "string",
                "description": "Refund id returned during the refund initiation request",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "Id of the merchant who created the refund",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "Id of the merchant who created the refund",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateRefundResponse"
                  },
                  "example": {
                    "amount": 10000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "BILL12345",
                    "reason": {
                      "errCode": "refund-disabled",
                      "npciErrCode": "R21",
                      "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                    },
                    "remarks": "Services not rendered",
                    "status": "success",
                    "txnDate": "2023-09-04 12:08:20.202644 +0530 IST",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                    "type": "online"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Forbidden response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/tpv": {
        "post": {
          "tags": [
            "tpv"
          ],
          "summary": "Create TPV",
          "description": "Create TPV",
          "operationId": "tpv#createTPV",
          "parameters": [
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "1240689979139556556"
              },
              "example": "1240689979139556556"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTPVRequestBody"
                },
                "example": {
                  "amount": 100,
                  "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                  "expireAfter": 10,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantReferenceId": "1240689979139556556",
                  "merchantVpa": "deku@okokaxis",
                  "metadata": "test",
                  "minAmount": 100,
                  "primaryAccount": {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  },
                  "productConfigId": "1240689979139556556",
                  "secondaryAccounts": [
                    {
                      "IFSC": "SBIN0000001",
                      "accountName": "deku",
                      "accountNumber": "1234567890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "accountName": "deku",
                      "accountNumber": "1234567890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "accountName": "deku",
                      "accountNumber": "1234567890"
                    }
                  ],
                  "transactionNote": "test transaction"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TPVResponse"
                  },
                  "example": {
                    "amount": 100,
                    "expireAfter": 10,
                    "id": "1240689979139556556",
                    "intentLink": "upi://pay?pa=abc@setu&pn=abc&tn=abc&am=100",
                    "merchantId": "1240689979139556556",
                    "merchantReferenceId": "1240689979139556556",
                    "metadata": "test",
                    "minAmount": 100,
                    "primaryAccount": {
                      "IFSC": "SBIN0000001",
                      "accountName": "deku",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    "productConfigId": "1240689979139556556",
                    "secondaryAccounts": [
                      {
                        "IFSC": "SBIN0000001",
                        "accountName": "deku",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountNumber": "**** **** **** 7890"
                      },
                      {
                        "IFSC": "SBIN0000001",
                        "accountName": "deku",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountNumber": "**** **** **** 7890"
                      },
                      {
                        "IFSC": "SBIN0000001",
                        "accountName": "deku",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountNumber": "**** **** **** 7890"
                      },
                      {
                        "IFSC": "SBIN0000001",
                        "accountName": "deku",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountNumber": "**** **** **** 7890"
                      }
                    ],
                    "shortCode": "abc",
                    "shortLink": "https://pay.setu.co/abc",
                    "transactionNote": "test transaction"
                  }
                }
              }
            },
            "400": {
              "description": "BadRequest: Bad Request response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                  }
                }
              }
            },
            "500": {
              "description": "InternalServerError: Internal Server Error response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/tpv/{id}": {
        "get": {
          "tags": [
            "tpv"
          ],
          "summary": "Check TPV status",
          "description": "Check TPV status",
          "operationId": "tpv#fetchTPV",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id associated with the tpv",
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the tpv",
                "example": "1240689979139556556"
              },
              "example": "1240689979139556556"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "1240689979139556556"
              },
              "example": "1240689979139556556"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TPVResponse"
                  },
                  "example": {
                    "amount": 100,
                    "expireAfter": 10,
                    "id": "1240689979139556556",
                    "intentLink": "upi://pay?pa=abc@setu&pn=abc&tn=abc&am=100",
                    "merchantId": "1240689979139556556",
                    "merchantReferenceId": "1240689979139556556",
                    "metadata": "test",
                    "minAmount": 100,
                    "primaryAccount": {
                      "IFSC": "SBIN0000001",
                      "accountName": "deku",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    "productConfigId": "1240689979139556556",
                    "secondaryAccounts": [
                      {
                        "IFSC": "SBIN0000001",
                        "accountName": "deku",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountNumber": "**** **** **** 7890"
                      },
                      {
                        "IFSC": "SBIN0000001",
                        "accountName": "deku",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountNumber": "**** **** **** 7890"
                      },
                      {
                        "IFSC": "SBIN0000001",
                        "accountName": "deku",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountNumber": "**** **** **** 7890"
                      }
                    ],
                    "shortCode": "abc",
                    "shortLink": "https://pay.setu.co/abc",
                    "transactionNote": "test transaction"
                  }
                }
              }
            },
            "400": {
              "description": "BadRequest: Bad Request response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                  }
                }
              }
            },
            "500": {
              "description": "InternalServerError: Internal Server Error response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/tpv/{id}/expire": {
        "put": {
          "tags": [
            "tpv"
          ],
          "summary": "Expire TPV",
          "description": "Expire TPV",
          "operationId": "tpv#expireTPV",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id associated with the tpv",
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the tpv",
                "example": "1240689979139556556"
              },
              "example": "1240689979139556556"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "1240689979139556556"
              },
              "example": "1240689979139556556"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TPVResponse"
                  },
                  "example": {
                    "amount": 100,
                    "expireAfter": 10,
                    "id": "1240689979139556556",
                    "intentLink": "upi://pay?pa=abc@setu&pn=abc&tn=abc&am=100",
                    "merchantId": "1240689979139556556",
                    "merchantReferenceId": "1240689979139556556",
                    "metadata": "test",
                    "minAmount": 100,
                    "primaryAccount": {
                      "IFSC": "SBIN0000001",
                      "accountName": "deku",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    "productConfigId": "1240689979139556556",
                    "secondaryAccounts": [
                      {
                        "IFSC": "SBIN0000001",
                        "accountName": "deku",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountNumber": "**** **** **** 7890"
                      },
                      {
                        "IFSC": "SBIN0000001",
                        "accountName": "deku",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountNumber": "**** **** **** 7890"
                      },
                      {
                        "IFSC": "SBIN0000001",
                        "accountName": "deku",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountNumber": "**** **** **** 7890"
                      }
                    ],
                    "shortCode": "abc",
                    "shortLink": "https://pay.setu.co/abc",
                    "transactionNote": "test transaction"
                  }
                }
              }
            },
            "400": {
              "description": "BadRequest: Bad Request response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Unauthorized response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                  }
                }
              }
            },
            "500": {
              "description": "InternalServerError: Internal Server Error response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/vpas": {
        "post": {
          "tags": [
            "vpa"
          ],
          "summary": "Create VPA",
          "description": "Create VPA",
          "operationId": "vpa#create",
          "parameters": [
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRequestBody4"
                },
                "example": {
                  "merchantReferenceId": "1240689979139556557",
                  "vpa": "deku@okokaxis"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VpaResponse"
                  },
                  "example": {
                    "addressProvider": "Axis",
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "status": "active",
                    "vpa": "deku@okokaxis"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Forbidden response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/vpas/availability": {
        "post": {
          "tags": [
            "vpa"
          ],
          "summary": "Check VPA availability",
          "description": "Check VPA availability",
          "operationId": "vpa#checkAvailability",
          "parameters": [
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAvailabilityRequestBody"
                },
                "example": {
                  "vpa": "deku@okokaxis"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CheckVpaAvailabilityResponse"
                  },
                  "example": {
                    "available": true,
                    "status": "available"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Forbidden response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/vpas/{id}": {
        "get": {
          "tags": [
            "vpa"
          ],
          "summary": "Fetch VPA",
          "description": "Fetch VPA by ID",
          "operationId": "vpa#fetchById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the resource",
              "required": true,
              "schema": {
                "type": "string",
                "description": "id of the resource",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VpaResponse"
                  },
                  "example": {
                    "addressProvider": "Axis",
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "status": "active",
                    "vpa": "deku@okokaxis"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Forbidden response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/vpas/{id}/status": {
        "put": {
          "tags": [
            "vpa"
          ],
          "summary": "Update VPA status",
          "description": "Update VPA status",
          "operationId": "vpa#updateStatus",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the resource",
              "required": true,
              "schema": {
                "type": "string",
                "description": "id of the resource",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            {
              "name": "merchantId",
              "in": "header",
              "description": "id associated with the merchant",
              "allowEmptyValue": true,
              "required": true,
              "schema": {
                "type": "string",
                "description": "id associated with the merchant",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateStatusRequestBody"
                },
                "example": {
                  "status": "active"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VpaResponse"
                  },
                  "example": {
                    "addressProvider": "Axis",
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "status": "active",
                    "vpa": "deku@okokaxis"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Forbidden response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/{id}": {
        "get": {
          "tags": [
            "merchant"
          ],
          "summary": "Fetch merchant",
          "description": "Fetch merchant",
          "operationId": "merchant#fetchById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the resource",
              "required": true,
              "schema": {
                "type": "string",
                "description": "id of the resource",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MerchantResponse"
                  },
                  "example": {
                    "acceptDeemedTxns": true,
                    "addressProviderId": "1237800298651584417",
                    "businessName": "deku",
                    "businessType": "PROPRIETARY",
                    "callbackURLsEnabled": true,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "documentStatus": "APPROVED",
                    "franchiseName": "deku",
                    "genre": "ONLINE",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "legalName": "deku",
                    "mcc": "5432",
                    "merchantName": "deku",
                    "merchantType": "small",
                    "onboardingType": "bank",
                    "paId": "1237799847336085408",
                    "paymentModes": [
                      "savings",
                      "lite",
                      "erupi",
                      "rupay_cc"
                    ],
                    "products": [
                      "deeplinks",
                      "sqr",
                      "mqr"
                    ],
                    "settlement": {
                      "cycles": [
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        },
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        },
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        }
                      ],
                      "frequency": "TPlusOne",
                      "splitsEnabled": true,
                      "type": "Net"
                    },
                    "settlementsEnabled": true,
                    "standardAccountId": "Et autem animi alias.",
                    "transactionStatus": "active"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/{id}/config": {
        "put": {
          "tags": [
            "merchant"
          ],
          "summary": "Update merchant configs",
          "description": "Update merchant configs",
          "operationId": "merchant#updateConfig",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the resource",
              "required": true,
              "schema": {
                "type": "string",
                "description": "id of the resource",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "examples": {
                "default": {
                  "summary": "default",
                  "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                }
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateConfigRequestBody"
                },
                "example": {
                  "acceptDeemedTxns": true,
                  "callbackURLsEnabled": true,
                  "paymentModes": [
                    "savings",
                    "lite",
                    "erupi",
                    "rupay_cc"
                  ],
                  "products": [
                    "deeplinks",
                    "sqr",
                    "mqr"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MerchantResponse"
                  },
                  "example": {
                    "acceptDeemedTxns": true,
                    "addressProviderId": "1237800298651584417",
                    "businessName": "deku",
                    "businessType": "PROPRIETARY",
                    "callbackURLsEnabled": true,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "documentStatus": "APPROVED",
                    "franchiseName": "deku",
                    "genre": "ONLINE",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "legalName": "deku",
                    "mcc": "5432",
                    "merchantName": "deku",
                    "merchantType": "small",
                    "onboardingType": "bank",
                    "paId": "1237799847336085408",
                    "paymentModes": [
                      "savings",
                      "lite",
                      "erupi",
                      "rupay_cc"
                    ],
                    "products": [
                      "deeplinks",
                      "sqr",
                      "mqr"
                    ],
                    "settlement": {
                      "cycles": [
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        },
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        },
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        }
                      ],
                      "frequency": "TPlusOne",
                      "splitsEnabled": true,
                      "type": "Net"
                    },
                    "settlementsEnabled": false,
                    "standardAccountId": "Qui laudantium harum.",
                    "transactionStatus": "active"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      },
      "/api/v1/merchants/{id}/txn-status": {
        "put": {
          "tags": [
            "merchant"
          ],
          "summary": "Update merchant transaction status",
          "description": "Update merchant transaction status",
          "operationId": "merchant#updateTxnStatus",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the resource",
              "required": true,
              "schema": {
                "type": "string",
                "description": "id of the resource",
                "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTxnStatusRequestBody"
                },
                "example": {
                  "deactivateAllProductInstances": false,
                  "transactionStatus": "active"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK response.",
              "headers": {
                "requestId": {
                  "schema": {
                    "type": "string",
                    "example": "cjqml1f2e5ocq2mesej0"
                  },
                  "example": "cjqml1f2e5ocq2mesej0"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MerchantResponse"
                  },
                  "example": {
                    "acceptDeemedTxns": true,
                    "addressProviderId": "1237800298651584417",
                    "businessName": "deku",
                    "businessType": "PROPRIETARY",
                    "callbackURLsEnabled": true,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "documentStatus": "APPROVED",
                    "franchiseName": "deku",
                    "genre": "ONLINE",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "legalName": "deku",
                    "mcc": "5432",
                    "merchantName": "deku",
                    "merchantType": "small",
                    "onboardingType": "bank",
                    "paId": "1237799847336085408",
                    "paymentModes": [
                      "savings",
                      "lite",
                      "erupi",
                      "rupay_cc"
                    ],
                    "products": [
                      "deeplinks",
                      "sqr",
                      "mqr"
                    ],
                    "settlement": {
                      "cycles": [
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        },
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        },
                        {
                          "endTime": "1971-04-18T07:52:17Z",
                          "settlementTime": "1971-07-04T22:43:33Z",
                          "startTime": "1972-08-31T18:25:52Z"
                        }
                      ],
                      "frequency": "TPlusOne",
                      "splitsEnabled": true,
                      "type": "Net"
                    },
                    "settlementsEnabled": false,
                    "standardAccountId": "Magnam sequi alias repellendus excepturi aperiam quibusdam.",
                    "transactionStatus": "active"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request: Bad Request response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Forbidden response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "404": {
              "description": "Not found: Not Found response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error: Internal Server Error response.",
              "headers": {
                "requestId": {
                  "description": "a unique id associated with a particular request",
                  "schema": {
                    "type": "string",
                    "description": "a unique id associated with a particular request",
                    "example": "cjqnn4cupm66hpf0a920"
                  },
                  "example": "cjqnn4cupm66hpf0a920"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                  }
                }
              }
            }
          },
          "security": [
            {
              "jwt_header_Authorization": []
            }
          ]
        }
      }
    },
    "components": {
      "schemas": {
        "BaseSetuAPIErrorModel": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "error code",
              "example": "bad-request"
            },
            "detail": {
              "type": "string",
              "description": "a detailed description of the error",
              "example": "bad-request"
            },
            "docUrl": {
              "type": "string",
              "description": "link to a doc with more information about the error",
              "example": ""
            },
            "requestId": {
              "type": "string",
              "description": "a unique id associated with a particular request",
              "example": "cjqnn4cupm66hpf0a920"
            }
          },
          "example": {
            "code": "bad-request",
            "detail": "bad-request",
            "docUrl": "",
            "requestId": "cjqnn4cupm66hpf0a920"
          }
        },
        "BaseSetuAPIErrorModel2": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "error code",
              "example": "bad-request"
            },
            "detail": {
              "type": "string",
              "description": "a detailed description of the error",
              "example": "bad-request"
            },
            "docUrl": {
              "type": "string",
              "description": "link to a doc with more information about the error",
              "example": ""
            }
          },
          "example": {
            "code": "bad-request",
            "detail": "bad-request",
            "docUrl": ""
          }
        },
        "CheckAvailabilityRequestBody": {
          "type": "object",
          "properties": {
            "vpa": {
              "type": "string",
              "description": "VPA to be created",
              "example": "deku@okokaxis",
              "minLength": 1
            }
          },
          "example": {
            "vpa": "deku@okokaxis"
          },
          "required": [
            "vpa"
          ]
        },
        "CheckVpaAvailabilityResponse": {
          "type": "object",
          "properties": {
            "available": {
              "type": "boolean",
              "description": "indicates if given vpa is available for use or not",
              "example": true
            },
            "status": {
              "type": "string",
              "description": "indicates if given vpa is available for use or not",
              "example": "available",
              "enum": [
                "available",
                "not_available"
              ]
            }
          },
          "example": {
            "available": true,
            "status": "available"
          }
        },
        "CreateAggConfigResponse": {
          "type": "object",
          "properties": {
            "aggAccountId": {
              "type": "string",
              "description": "Account ID got from account service",
              "example": "89efe162-8bca-4a18-a9bf-3ff80738e726"
            },
            "captureKyc": {
              "type": "boolean",
              "description": "flag to denote whether merchant kyc should be collected by UMAP of not",
              "example": false
            },
            "createdAt": {
              "type": "string",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "id": {
              "type": "string",
              "description": "Id of the aggregator",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantVpaHandles": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Rerum a eos quia."
              },
              "description": "vpa handles allowed for merchants by an aggregator",
              "example": [
                "okaxis",
                "okicici"
              ],
              "minItems": 1
            },
            "name": {
              "type": "string",
              "description": "name of an aggregator",
              "example": "Pinelabs"
            },
            "paId": {
              "type": "string",
              "description": "Payment aggregator Id",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "parentId": {
              "type": "string",
              "description": "Id of the parent aggregator",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "paymentModes": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Voluptas et nihil reprehenderit velit aliquam explicabo."
              },
              "description": "payment modes allowed for merchants by an aggregator",
              "example": [
                "savings",
                "lite",
                "erupi"
              ],
              "minItems": 1
            },
            "products": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Nulla dolore deleniti quae."
              },
              "description": "payment modes allowed for merchants by an aggregator",
              "example": [
                "deeplinks",
                "sqr",
                "mqr"
              ],
              "minItems": 1
            },
            "status": {
              "type": "string",
              "description": "Current status of the aggregator",
              "example": "inactive",
              "enum": [
                "inactive",
                "active"
              ]
            },
            "whitelistVpa": {
              "type": "boolean",
              "description": "flat to denote whether merchant vpa has to be whitelisted on the NPCI side",
              "example": false
            }
          },
          "example": {
            "aggAccountId": "89efe162-8bca-4a18-a9bf-3ff80738e726",
            "captureKyc": false,
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantVpaHandles": [
              "okaxis",
              "okicici"
            ],
            "name": "Pinelabs",
            "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "parentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "paymentModes": [
              "savings",
              "lite",
              "erupi"
            ],
            "products": [
              "deeplinks",
              "sqr",
              "mqr"
            ],
            "status": "inactive",
            "whitelistVpa": false
          }
        },
        "CreateCollectResponse": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "paise denominated value that needs to be collected from the user",
              "example": 10000,
              "minimum": 0,
              "maximum": 100000000000000000
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "currency": {
              "type": "string",
              "description": "indicates the currency used during the transaction",
              "example": "INR",
              "enum": [
                "INR"
              ]
            },
            "customerVpa": {
              "type": "string",
              "description": "remitter's VPA",
              "example": "dekup@okhdfc"
            },
            "expireAfter": {
              "type": "integer",
              "description": "expiry duration for the collect request in minutes",
              "default": 30,
              "example": 2,
              "minimum": 1,
              "maximum": 64800
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantId": {
              "type": "string",
              "description": "id associated with the merchant",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "reference id in the merchant's system",
              "example": "1240689979139556557",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            },
            "merchantVpa": {
              "type": "string",
              "description": "VPA used to accept payments",
              "example": "deku@okokaxis"
            },
            "metadata": {
              "type": "string",
              "description": "field provided for the merchant to add additional key-value pairs",
              "example": {
                "InvoiceNumber": "INV-21-12-009"
              },
              "format": "binary"
            },
            "productConfigId": {
              "type": "string",
              "description": "id of the product config associated with the collect request",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "refId": {
              "type": "string",
              "description": "NPCI transaction refId",
              "example": "1240689979139556558",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 35
            },
            "status": {
              "type": "string",
              "description": "status defining the validity of the collect request",
              "example": "active",
              "enum": [
                "active",
                "paid",
                "closed"
              ]
            },
            "transactionNote": {
              "type": "string",
              "description": "note displayed to the customer at the payment page",
              "example": "testcollect",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            }
          },
          "example": {
            "amount": 10000,
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "currency": "INR",
            "customerVpa": "dekup@okhdfc",
            "expireAfter": 2,
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "1240689979139556557",
            "merchantVpa": "deku@okokaxis",
            "metadata": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "refId": "1240689979139556558",
            "status": "active",
            "transactionNote": "testcollect"
          }
        },
        "CreateDeeplinkResponse": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "paise denominated value that needs to be collected from the user",
              "example": 10000,
              "format": "int64"
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "currency": {
              "type": "string",
              "description": "indicates the currency used during the transaction",
              "example": "INR"
            },
            "expiryDate": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the expiry date & time",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "intentLink": {
              "type": "string",
              "description": "upi intent link",
              "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234"
            },
            "merchantId": {
              "type": "string",
              "description": "id associated with the merchant",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "reference id in the merchant's system",
              "example": "1240689979139556557",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            },
            "merchantVpa": {
              "type": "string",
              "description": "VPA used to accept payments",
              "example": "deku@okokaxis"
            },
            "metadata": {
              "type": "string",
              "description": "field provided for the merchant to add additional key-value pairs",
              "example": {
                "InvoiceNumber": "INV-21-12-009"
              },
              "format": "binary"
            },
            "minAmount": {
              "type": "integer",
              "description": "paise denominated minimum value that needs to be collected from the user",
              "example": 10000,
              "format": "int64"
            },
            "paymentType": {
              "type": "string",
              "description": "type of the payment link - single use or multi use",
              "example": "pay_single",
              "enum": [
                "pay_single",
                "pay_multi"
              ]
            },
            "productConfigId": {
              "type": "string",
              "description": "id of the product config associated with the qr / payment link",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "refId": {
              "type": "string",
              "description": "NPCI transaction refId",
              "example": "1240689979139556558",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 35
            },
            "shortCode": {
              "type": "string",
              "description": "short code used for payment short link",
              "example": "Np3KnBCM8Om0"
            },
            "shortLink": {
              "type": "string",
              "description": "short link for the intent link",
              "example": "bills.pe/Np3KnBCM8Om0"
            },
            "status": {
              "type": "string",
              "description": "status defining the validity of the payment link",
              "example": "active",
              "enum": [
                "inactive",
                "active",
                "paid",
                "closed"
              ]
            },
            "transactionNote": {
              "type": "string",
              "description": "note displayed to the customer at the payment page",
              "example": "testpay"
            }
          },
          "example": {
            "amount": 10000,
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "currency": "INR",
            "expiryDate": "2023-09-04 12:08:20.202644 +0530 IST",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "1240689979139556557",
            "merchantVpa": "deku@okokaxis",
            "metadata": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "minAmount": 10000,
            "paymentType": "pay_single",
            "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "refId": "1240689979139556558",
            "shortCode": "Np3KnBCM8Om0",
            "shortLink": "bills.pe/Np3KnBCM8Om0",
            "status": "active",
            "transactionNote": "testpay"
          }
        },
        "CreateMandateResponse": {
          "type": "object",
          "properties": {
            "allowMultipleDebit": {
              "type": "boolean",
              "description": "Allow multiple debits for the mandate",
              "default": false,
              "example": true
            },
            "amount": {
              "type": "integer",
              "description": "Amount(in paise) of the mandate",
              "example": 1000,
              "minimum": 100,
              "maximum": 20000000
            },
            "amountRule": {
              "type": "string",
              "description": "Rule for verifying the debit amount is within range of specified amount_limit",
              "example": "max",
              "enum": [
                "max",
                "exact"
              ]
            },
            "autoExecute": {
              "type": "boolean",
              "description": "Auto execute of the mandate",
              "example": true
            },
            "autoPreNotify": {
              "type": "boolean",
              "description": "Auto pre notify of the mandate",
              "example": true
            },
            "blockFunds": {
              "type": "boolean",
              "description": "Block funds for the mandate",
              "default": false,
              "example": true
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "creationMode": {
              "type": "string",
              "description": "Creation mode of the mandate",
              "example": "qr",
              "enum": [
                "collect",
                "qr",
                "intent"
              ]
            },
            "currency": {
              "type": "string",
              "description": "Currency in which the mandate payment will be executed",
              "default": "INR",
              "example": "INR"
            },
            "customerRevocable": {
              "type": "boolean",
              "example": true
            },
            "customerVpa": {
              "type": "string",
              "description": "Customer VPA of the mandate",
              "example": "ram@axis"
            },
            "endDate": {
              "type": "string",
              "description": "End date of the mandate (ddmmyyyy)",
              "example": "02012008"
            },
            "expireAfter": {
              "type": "integer",
              "description": "Number of seconds after which the mandate creation request will expire",
              "default": 120,
              "example": 120,
              "minimum": 120,
              "maximum": 3888000
            },
            "firstExecutionAmount": {
              "type": "integer",
              "description": "First execution amount(in paise) of the mandate",
              "default": 0,
              "example": 1000,
              "format": "int64"
            },
            "frequency": {
              "type": "string",
              "description": "Frequency of the mandate",
              "example": "monthly",
              "enum": [
                "one time",
                "weekly",
                "daily",
                "fortnightly",
                "monthly",
                "bi monthly",
                "quarterly",
                "half yearly",
                "yearly",
                "as presented"
              ]
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "initiationMode": {
              "type": "string",
              "description": "Initiation mode of the mandate",
              "example": "00",
              "enum": [
                "00",
                "01",
                "04"
              ]
            },
            "intentLink": {
              "type": "string",
              "description": "Intent link for the mandate request",
              "example": "upi://mandate?pa=deku040920232@okokaxis&pn=merchant-1&validitystart=31121995&validityend=31121996&am=100.00&amrule=MAX&recur=one%20time&recurvalue=0&recurtype=on&tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI&cu=INR&mc=1234&mode=04&purpose=14&rev=N&share=Y&qrexpire=04092023&block=N&orgid=000000&version=2.0&txnType=create&tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI"
            },
            "maxAmountLimit": {
              "type": "integer",
              "description": "Maximum amount(in paise) for which a mandate transaction can be executed",
              "example": 1000,
              "minimum": 100,
              "maximum": 20000000
            },
            "merchantId": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Merchant reference id of the mandate",
              "example": "ABC1234789",
              "minLength": 5,
              "maxLength": 50
            },
            "merchantVpa": {
              "type": "string",
              "description": "Merchant VPA of the mandate",
              "example": "acme.corp@axis"
            },
            "productConfigId": {
              "type": "string",
              "description": "Configuration Id of the product",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "purpose": {
              "type": "string",
              "description": "Purpose of the mandate",
              "default": "14",
              "example": "14",
              "enum": [
                "00",
                "14",
                "76",
                "01"
              ]
            },
            "recurrenceRule": {
              "type": "string",
              "description": "Recurrence rule of the mandate",
              "default": "on",
              "example": "on",
              "enum": [
                "on",
                "before",
                "after"
              ]
            },
            "recurrenceValue": {
              "type": "integer",
              "description": "Recurrence value of the mandate",
              "example": 1,
              "minimum": 0,
              "maximum": 31
            },
            "shareToPayee": {
              "type": "boolean",
              "example": false
            },
            "startDate": {
              "type": "string",
              "description": "Start date of the mandate (ddmmyyyy)",
              "example": "02012006"
            },
            "status": {
              "type": "string",
              "description": "Status of the mandate",
              "example": "pending",
              "enum": [
                "pending",
                "live",
                "paused",
                "revoked",
                "rejected",
                "completed"
              ]
            },
            "transactionNote": {
              "type": "string",
              "description": "Transaction note of the mandate",
              "example": "Transaction note"
            },
            "txnId": {
              "type": "string",
              "description": "NPCI transaction id",
              "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 35,
              "maxLength": 35
            }
          },
          "example": {
            "allowMultipleDebit": true,
            "amount": 1000,
            "amountRule": "max",
            "autoExecute": true,
            "autoPreNotify": true,
            "blockFunds": true,
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "creationMode": "qr",
            "currency": "INR",
            "customerRevocable": true,
            "customerVpa": "ram@axis",
            "endDate": "02012008",
            "expireAfter": 120,
            "firstExecutionAmount": 1000,
            "frequency": "monthly",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "initiationMode": "00",
            "intentLink": "upi://mandate?pa=deku040920232@okokaxis&pn=merchant-1&validitystart=31121995&validityend=31121996&am=100.00&amrule=MAX&recur=one%20time&recurvalue=0&recurtype=on&tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI&cu=INR&mc=1234&mode=04&purpose=14&rev=N&share=Y&qrexpire=04092023&block=N&orgid=000000&version=2.0&txnType=create&tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
            "maxAmountLimit": 1000,
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "ABC1234789",
            "merchantVpa": "acme.corp@axis",
            "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "purpose": "14",
            "recurrenceRule": "on",
            "recurrenceValue": 1,
            "shareToPayee": false,
            "startDate": "02012006",
            "status": "pending",
            "transactionNote": "Transaction note",
            "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
          }
        },
        "CreateMerchantWrapperRequestBody": {
          "type": "object",
          "properties": {
            "acceptDeemedTxns": {
              "type": "boolean",
              "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
              "default": false,
              "example": true
            },
            "aggregatorAccountId": {
              "type": "string",
              "example": "328a928f-e277-4798-8e28-4b19a61a8a23"
            },
            "businessName": {
              "type": "string",
              "description": "Brand name or Consumer facing name",
              "example": "deku",
              "pattern": "^[a-zA-Z0-9 ]+$"
            },
            "businessType": {
              "type": "string",
              "description": "Incorporation type",
              "example": "PUBLIC",
              "enum": [
                "PROPRIETARY",
                "PARTNERSHIP",
                "PRIVATE",
                "PUBLIC",
                "OTHERS"
              ]
            },
            "franchiseName": {
              "type": "string",
              "description": "Franchise name",
              "example": "deku",
              "pattern": "^[a-zA-Z0-9 ]+$"
            },
            "genre": {
              "type": "string",
              "description": "Online / Offline",
              "example": "ONLINE",
              "enum": [
                "ONLINE",
                "OFFLINE"
              ]
            },
            "legalName": {
              "type": "string",
              "description": "Legal name as per incorporation documents",
              "example": "deku",
              "pattern": "^[a-zA-Z0-9 ]+$"
            },
            "mcc": {
              "type": "string",
              "description": "Category of business operation",
              "example": "5432"
            },
            "merchantName": {
              "type": "string",
              "description": "Name used by Merchant user to identify a given Merchant from others",
              "example": "deku",
              "minLength": 1
            },
            "merchantType": {
              "type": "string",
              "description": "merchant type",
              "default": "small",
              "example": "small",
              "enum": [
                "small",
                "large"
              ]
            },
            "onboardingType": {
              "type": "string",
              "description": "onboarding type",
              "default": "bank",
              "example": "bank",
              "enum": [
                "bank",
                "aggregator"
              ]
            },
            "paymentModes": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Possimus voluptatem dignissimos labore hic impedit qui."
              },
              "description": "payment modes allowed for merchants",
              "example": [
                "savings",
                "lite",
                "erupi",
                "rupay_cc"
              ]
            },
            "products": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Quas fugit quas quisquam."
              },
              "description": "products allowed for merchants",
              "example": [
                "deeplinks",
                "sqr",
                "mqr"
              ]
            },
            "settlement": {
              "$ref": "#/components/schemas/SettlementConfiguration"
            },
            "settlementsEnabled": {
              "type": "boolean",
              "description": "indicates whether settlements are enabled for merchant or not",
              "example": false
            },
            "standardAccountId": {
              "type": "string",
              "example": "328a928f-e277-4798-8e28-4b19a61a8a22"
            }
          },
          "example": {
            "acceptDeemedTxns": true,
            "aggregatorAccountId": "328a928f-e277-4798-8e28-4b19a61a8a23",
            "businessName": "deku",
            "businessType": "PUBLIC",
            "franchiseName": "deku",
            "genre": "ONLINE",
            "legalName": "deku",
            "mcc": "5432",
            "merchantName": "deku",
            "merchantType": "small",
            "onboardingType": "bank",
            "paymentModes": [
              "savings",
              "lite",
              "erupi",
              "rupay_cc"
            ],
            "products": [
              "deeplinks",
              "sqr",
              "mqr"
            ],
            "settlement": {
              "cycles": [
                {
                  "endTime": "1999-05-22T01:44:35Z",
                  "settlementTime": "1991-12-13T21:44:41Z",
                  "startTime": "1982-01-16T06:49:16Z"
                },
                {
                  "endTime": "1999-05-22T01:44:35Z",
                  "settlementTime": "1991-12-13T21:44:41Z",
                  "startTime": "1982-01-16T06:49:16Z"
                }
              ],
              "frequency": "TPlusOne",
              "splitsEnabled": false,
              "type": "Net"
            },
            "settlementsEnabled": true,
            "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22"
          },
          "required": [
            "aggregatorAccountId",
            "merchantName",
            "legalName",
            "businessName",
            "businessType",
            "mcc",
            "genre"
          ]
        },
        "CreateRefundResponse": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "Amount to be refunded back to the customer",
              "example": 10000,
              "format": "int64"
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "currency": {
              "type": "string",
              "description": "Currency code to be used for the refund - defaults to INR",
              "default": "INR",
              "example": "INR",
              "enum": [
                "INR"
              ]
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Unique identifier merchant wants to pass to reconcile refunds at their end",
              "example": "BILL12345"
            },
            "reason": {
              "$ref": "#/components/schemas/RefundReason"
            },
            "remarks": {
              "type": "string",
              "description": "Remarks on why the refund is being initiated",
              "example": "Services not rendered"
            },
            "status": {
              "type": "string",
              "description": "Status of the refund request",
              "example": "success",
              "enum": [
                "pending",
                "initiated",
                "success",
                "failed"
              ]
            },
            "txnDate": {
              "type": "string",
              "description": "Payment transaction date",
              "example": "2023-09-04 12:08:20.202644 +0530 IST"
            },
            "txnId": {
              "type": "string",
              "description": "NPCI payment transaction id on which merchant wants to raise a refund",
              "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
            },
            "type": {
              "type": "string",
              "description": "Type of the refund - online or offline",
              "default": "offline",
              "example": "online",
              "enum": [
                "offline",
                "online"
              ]
            }
          },
          "example": {
            "amount": 10000,
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "currency": "INR",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "BILL12345",
            "reason": {
              "errCode": "refund-disabled",
              "npciErrCode": "R21",
              "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
            },
            "remarks": "Services not rendered",
            "status": "success",
            "txnDate": "2023-09-04 12:08:20.202644 +0530 IST",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
            "type": "online"
          }
        },
        "CreateRequestBody": {
          "type": "object",
          "properties": {
            "aggAccountId": {
              "type": "string",
              "description": "Account ID got from account service",
              "example": "89efe162-8bca-4a18-a9bf-3ff80738e726"
            },
            "captureKyc": {
              "type": "boolean",
              "description": "flag to denote whether merchant kyc should be collected by UMAP of not",
              "example": true
            },
            "merchantVpaHandles": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Adipisci at consequatur voluptatem delectus illum illo."
              },
              "description": "vpa handles allowed for merchants by an aggregator",
              "example": [
                "okaxis",
                "okicici"
              ],
              "minItems": 1
            },
            "name": {
              "type": "string",
              "description": "name of an aggregator",
              "example": "Pinelabs"
            },
            "paId": {
              "type": "string",
              "description": "Payment aggregator Id",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "parentId": {
              "type": "string",
              "description": "Id of the parent aggregator",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "paymentModes": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Repellendus magni odio consequatur id porro."
              },
              "description": "payment modes allowed for merchants by an aggregator",
              "example": [
                "savings",
                "lite",
                "erupi"
              ],
              "minItems": 1
            },
            "products": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Sunt molestias dolorem."
              },
              "description": "payment modes allowed for merchants by an aggregator",
              "example": [
                "deeplinks",
                "sqr",
                "mqr"
              ],
              "minItems": 1
            },
            "whitelistVpa": {
              "type": "boolean",
              "description": "flat to denote whether merchant vpa has to be whitelisted on the NPCI side",
              "example": false
            }
          },
          "example": {
            "aggAccountId": "89efe162-8bca-4a18-a9bf-3ff80738e726",
            "captureKyc": true,
            "merchantVpaHandles": [
              "okaxis",
              "okicici"
            ],
            "name": "Pinelabs",
            "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "parentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "paymentModes": [
              "savings",
              "lite",
              "erupi"
            ],
            "products": [
              "deeplinks",
              "sqr",
              "mqr"
            ],
            "whitelistVpa": true
          },
          "required": [
            "name",
            "aggAccountId",
            "paId"
          ]
        },
        "CreateRequestBody2": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "paise denominated value that needs to be collected from the user",
              "example": 10000,
              "minimum": 0,
              "maximum": 100000000000000000
            },
            "currency": {
              "type": "string",
              "description": "indicates the currency used during the transaction",
              "example": "INR",
              "enum": [
                "INR"
              ]
            },
            "customerVpa": {
              "type": "string",
              "description": "remitter's VPA",
              "example": "dekup@okhdfc"
            },
            "expireAfter": {
              "type": "integer",
              "description": "expiry duration for the collect request in minutes",
              "default": 30,
              "example": 2,
              "minimum": 1,
              "maximum": 64800
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "reference id in the merchant's system",
              "example": "1240689979139556557",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            },
            "merchantVpa": {
              "type": "string",
              "description": "VPA used to accept payments",
              "example": "deku@okokaxis"
            },
            "metadata": {
              "type": "string",
              "description": "field provided for the merchant to add additional key-value pairs",
              "example": {
                "InvoiceNumber": "INV-21-12-009"
              },
              "format": "binary"
            },
            "productConfigId": {
              "type": "string",
              "description": "id of the product config associated with the collect request",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "transactionNote": {
              "type": "string",
              "description": "note displayed to the customer at the payment page",
              "example": "testcollect",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            }
          },
          "example": {
            "amount": 10000,
            "currency": "INR",
            "customerVpa": "dekup@okhdfc",
            "expireAfter": 2,
            "merchantReferenceId": "1240689979139556557",
            "merchantVpa": "deku@okokaxis",
            "metadata": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "transactionNote": "testcollect"
          },
          "required": [
            "customerVpa",
            "amount",
            "currency"
          ]
        },
        "CreateRequestBody3": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "paise denominated value that needs to be collected from the user",
              "example": 10000,
              "format": "int64"
            },
            "currency": {
              "type": "string",
              "description": "indicates the currency used during the transaction",
              "example": "INR"
            },
            "expiryDate": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the expiry date & time",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "reference id in the merchant's system",
              "example": "1240689979139556557",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            },
            "merchantVpa": {
              "type": "string",
              "description": "VPA used to accept payments",
              "example": "deku@okokaxis"
            },
            "metadata": {
              "type": "string",
              "description": "field provided for the merchant to add additional key-value pairs",
              "example": {
                "InvoiceNumber": "INV-21-12-009"
              },
              "format": "binary"
            },
            "minAmount": {
              "type": "integer",
              "description": "paise denominated minimum value that needs to be collected from the user",
              "example": 10000,
              "format": "int64"
            },
            "paymentType": {
              "type": "string",
              "description": "type of the payment link - single use or multi use",
              "example": "pay_single",
              "enum": [
                "pay_single",
                "pay_multi"
              ]
            },
            "productConfigId": {
              "type": "string",
              "description": "id of the product config associated with the qr / payment link",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "transactionNote": {
              "type": "string",
              "description": "note displayed to the customer at the payment page",
              "example": "testpay"
            }
          },
          "example": {
            "amount": 10000,
            "currency": "INR",
            "expiryDate": "2023-09-04 12:08:20.202644 +0530 IST",
            "merchantReferenceId": "1240689979139556557",
            "merchantVpa": "deku@okokaxis",
            "metadata": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "minAmount": 10000,
            "paymentType": "pay_single",
            "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "transactionNote": "testpay"
          }
        },
        "CreateRequestBody4": {
          "type": "object",
          "properties": {
            "merchantReferenceId": {
              "type": "string",
              "description": "reference id in the merchant's system",
              "example": "1240689979139556557",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            },
            "vpa": {
              "type": "string",
              "description": "VPA to be created",
              "example": "deku@okokaxis",
              "minLength": 1
            }
          },
          "example": {
            "merchantReferenceId": "1240689979139556557",
            "vpa": "deku@okokaxis"
          },
          "required": [
            "vpa"
          ]
        },
        "CreateRequestBody5": {
          "type": "object",
          "properties": {
            "allowMultipleDebit": {
              "type": "boolean",
              "description": "Allow multiple debits for the mandate",
              "default": false,
              "example": true
            },
            "amount": {
              "type": "integer",
              "description": "Amount(in paise) of the mandate",
              "example": 1000,
              "minimum": 100,
              "maximum": 20000000
            },
            "amountRule": {
              "type": "string",
              "description": "Rule for verifying the debit amount is within range of specified amount_limit",
              "example": "max",
              "enum": [
                "max",
                "exact"
              ]
            },
            "autoExecute": {
              "type": "boolean",
              "description": "Auto execute of the mandate",
              "default": true,
              "example": true
            },
            "autoPreNotify": {
              "type": "boolean",
              "description": "Auto pre notify of the mandate",
              "default": true,
              "example": true
            },
            "blockFunds": {
              "type": "boolean",
              "description": "Block funds for the mandate",
              "default": false,
              "example": true
            },
            "creationMode": {
              "type": "string",
              "description": "Creation mode of the mandate",
              "example": "qr",
              "enum": [
                "collect",
                "qr",
                "intent"
              ]
            },
            "currency": {
              "type": "string",
              "description": "Currency in which the mandate payment will be executed",
              "default": "INR",
              "example": "INR"
            },
            "customerRevocable": {
              "type": "boolean",
              "default": true,
              "example": false
            },
            "customerVpa": {
              "type": "string",
              "description": "Customer VPA of the mandate",
              "example": "ram@axis"
            },
            "endDate": {
              "type": "string",
              "description": "End date of the mandate (ddmmyyyy)",
              "example": "02012008"
            },
            "expireAfter": {
              "type": "integer",
              "description": "Number of seconds after which the mandate creation request will expire",
              "default": 120,
              "example": 120,
              "minimum": 120,
              "maximum": 3888000
            },
            "firstExecutionAmount": {
              "type": "integer",
              "description": "First execution amount(in paise) of the mandate",
              "default": 0,
              "example": 1000,
              "format": "int64"
            },
            "frequency": {
              "type": "string",
              "description": "Frequency of the mandate",
              "example": "monthly",
              "enum": [
                "one time",
                "weekly",
                "daily",
                "fortnightly",
                "monthly",
                "bi monthly",
                "quarterly",
                "half yearly",
                "yearly",
                "as presented"
              ]
            },
            "initiationMode": {
              "type": "string",
              "description": "Initiation mode of the mandate",
              "example": "00",
              "enum": [
                "00",
                "01",
                "04"
              ]
            },
            "maxAmountLimit": {
              "type": "integer",
              "description": "Maximum amount(in paise) for which a mandate transaction can be executed",
              "example": 1000,
              "minimum": 100,
              "maximum": 20000000
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Merchant reference id of the mandate",
              "example": "ABC1234789",
              "minLength": 5,
              "maxLength": 50
            },
            "merchantVpa": {
              "type": "string",
              "description": "Merchant VPA of the mandate",
              "example": "acme.corp@axis"
            },
            "productConfigId": {
              "type": "string",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "purpose": {
              "type": "string",
              "description": "Purpose of the mandate",
              "default": "14",
              "example": "14",
              "enum": [
                "00",
                "14",
                "76",
                "01"
              ]
            },
            "recurrenceRule": {
              "type": "string",
              "description": "Recurrence rule of the mandate",
              "default": "on",
              "example": "on",
              "enum": [
                "on",
                "before",
                "after"
              ]
            },
            "recurrenceValue": {
              "type": "integer",
              "description": "Recurrence value of the mandate",
              "example": 1,
              "minimum": 0,
              "maximum": 31
            },
            "shareToPayee": {
              "type": "boolean",
              "default": true,
              "example": false
            },
            "startDate": {
              "type": "string",
              "description": "Start date of the mandate (ddmmyyyy)",
              "example": "02012006"
            },
            "transactionNote": {
              "type": "string",
              "description": "Transaction note of the mandate",
              "example": "Transaction note"
            }
          },
          "example": {
            "allowMultipleDebit": true,
            "amount": 1000,
            "amountRule": "max",
            "autoExecute": true,
            "autoPreNotify": true,
            "blockFunds": true,
            "creationMode": "qr",
            "currency": "INR",
            "customerRevocable": false,
            "customerVpa": "ram@axis",
            "endDate": "02012008",
            "expireAfter": 120,
            "firstExecutionAmount": 1000,
            "frequency": "monthly",
            "initiationMode": "00",
            "maxAmountLimit": 1000,
            "merchantReferenceId": "ABC1234789",
            "merchantVpa": "acme.corp@axis",
            "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "purpose": "14",
            "recurrenceRule": "on",
            "recurrenceValue": 1,
            "shareToPayee": false,
            "startDate": "02012006",
            "transactionNote": "Transaction note"
          },
          "required": [
            "startDate",
            "endDate",
            "maxAmountLimit",
            "amount",
            "currency",
            "amountRule",
            "frequency",
            "recurrenceValue",
            "transactionNote",
            "purpose",
            "initiationMode",
            "creationMode",
            "customerVpa"
          ]
        },
        "CreateRequestBody6": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "Amount to be refunded back to the customer",
              "example": 10000,
              "format": "int64"
            },
            "currency": {
              "type": "string",
              "description": "Currency code to be used for the refund - defaults to INR",
              "default": "INR",
              "example": "INR",
              "enum": [
                "INR"
              ]
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Unique identifier merchant wants to pass to reconcile refunds at their end",
              "example": "BILL12345"
            },
            "remarks": {
              "type": "string",
              "description": "Remarks on why the refund is being initiated",
              "example": "Services not rendered"
            },
            "txnDate": {
              "type": "string",
              "description": "Payment transaction date",
              "example": "2023-09-04 12:08:20.202644 +0530 IST"
            },
            "txnId": {
              "type": "string",
              "description": "NPCI payment transaction id on which merchant wants to raise a refund",
              "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
            },
            "type": {
              "type": "string",
              "description": "Type of the refund - online or offline",
              "default": "offline",
              "example": "online",
              "enum": [
                "offline",
                "online"
              ]
            }
          },
          "example": {
            "amount": 10000,
            "currency": "INR",
            "merchantReferenceId": "BILL12345",
            "remarks": "Services not rendered",
            "txnDate": "2023-09-04 12:08:20.202644 +0530 IST",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
            "type": "online"
          },
          "required": [
            "txnId",
            "txnDate",
            "amount",
            "type"
          ]
        },
        "CreateTPVRequestBody": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "amount for the transaction",
              "example": 100,
              "format": "int64"
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "expireAfter": {
              "type": "integer",
              "description": "expire after in minutes for the transaction",
              "example": 10,
              "format": "int64"
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Reference id provided by the merchant",
              "example": "1240689979139556556"
            },
            "merchantVpa": {
              "type": "string",
              "description": "VPA used to accept payments",
              "example": "deku@okokaxis"
            },
            "metadata": {
              "type": "string",
              "description": "metadata for the tpv transaction",
              "example": "test",
              "format": "binary"
            },
            "minAmount": {
              "type": "integer",
              "description": "min amount for the transaction",
              "example": 100,
              "format": "int64"
            },
            "primaryAccount": {
              "$ref": "#/components/schemas/TPVAccountDetail"
            },
            "productConfigId": {
              "type": "string",
              "description": "id associated with the product config",
              "example": "1240689979139556556"
            },
            "secondaryAccounts": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TPVAccountDetail"
              },
              "description": "secondary accounts for the tpv transaction",
              "example": [
                {
                  "IFSC": "SBIN0000001",
                  "accountName": "deku",
                  "accountNumber": "1234567890"
                },
                {
                  "IFSC": "SBIN0000001",
                  "accountName": "deku",
                  "accountNumber": "1234567890"
                },
                {
                  "IFSC": "SBIN0000001",
                  "accountName": "deku",
                  "accountNumber": "1234567890"
                }
              ]
            },
            "transactionNote": {
              "type": "string",
              "description": "transaction note for the transaction",
              "example": "test transaction"
            }
          },
          "example": {
            "amount": 100,
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "expireAfter": 10,
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "1240689979139556556",
            "merchantVpa": "deku@okokaxis",
            "metadata": "test",
            "minAmount": 100,
            "primaryAccount": {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            },
            "productConfigId": "1240689979139556556",
            "secondaryAccounts": [
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "accountNumber": "1234567890"
              },
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "accountNumber": "1234567890"
              }
            ],
            "transactionNote": "test transaction"
          },
          "required": [
            "primaryAccount"
          ]
        },
        "CreateWithInfoRequestBody": {
          "type": "object",
          "properties": {
            "acceptDeemedTxns": {
              "type": "boolean",
              "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
              "default": false,
              "example": true
            },
            "aggregatorAccountId": {
              "type": "string",
              "description": "id of aggregator account associated with merchant",
              "example": "328a928f-e277-4798-8e28-4b19a61a8a23"
            },
            "businessName": {
              "type": "string",
              "description": "Brand name or Consumer facing name",
              "example": "deku",
              "pattern": "^[a-zA-Z0-9 ]+$"
            },
            "businessType": {
              "type": "string",
              "description": "Incorporation type",
              "example": "PUBLIC",
              "enum": [
                "PROPRIETARY",
                "PARTNERSHIP",
                "PRIVATE",
                "PUBLIC",
                "OTHERS"
              ]
            },
            "franchiseName": {
              "type": "string",
              "description": "Franchise name",
              "example": "deku",
              "pattern": "^[a-zA-Z0-9 ]+$"
            },
            "genre": {
              "type": "string",
              "description": "Online / Offline",
              "example": "ONLINE",
              "enum": [
                "ONLINE",
                "OFFLINE"
              ]
            },
            "legalName": {
              "type": "string",
              "description": "Legal name as per incorporation documents",
              "example": "deku",
              "pattern": "^[a-zA-Z0-9 ]+$"
            },
            "mcc": {
              "type": "string",
              "description": "Category of business operation",
              "example": "5432"
            },
            "merchantName": {
              "type": "string",
              "description": "Name used by Merchant user to identify a given Merchant from others",
              "example": "deku",
              "minLength": 1
            },
            "merchantType": {
              "type": "string",
              "description": "merchant type",
              "default": "small",
              "example": "small",
              "enum": [
                "small",
                "large"
              ]
            },
            "onboardingType": {
              "type": "string",
              "description": "onboarding type",
              "default": "bank",
              "example": "bank",
              "enum": [
                "bank",
                "aggregator"
              ]
            },
            "settlement": {
              "$ref": "#/components/schemas/SettlementConfiguration"
            },
            "settlementsEnabled": {
              "type": "boolean",
              "description": "indicates whether settlements are enabled for merchant or not",
              "example": false
            },
            "standardAccountId": {
              "type": "string",
              "description": "id of standard account associated with merchant",
              "example": "328a928f-e277-4798-8e28-4b19a61a8a22",
              "minLength": 1
            }
          },
          "example": {
            "acceptDeemedTxns": true,
            "aggregatorAccountId": "328a928f-e277-4798-8e28-4b19a61a8a23",
            "businessName": "deku",
            "businessType": "PUBLIC",
            "franchiseName": "deku",
            "genre": "ONLINE",
            "legalName": "deku",
            "mcc": "5432",
            "merchantName": "deku",
            "merchantType": "small",
            "onboardingType": "bank",
            "settlement": {
              "cycles": [
                {
                  "endTime": "1999-05-22T01:44:35Z",
                  "settlementTime": "1991-12-13T21:44:41Z",
                  "startTime": "1982-01-16T06:49:16Z"
                },
                {
                  "endTime": "1999-05-22T01:44:35Z",
                  "settlementTime": "1991-12-13T21:44:41Z",
                  "startTime": "1982-01-16T06:49:16Z"
                }
              ],
              "frequency": "TPlusOne",
              "splitsEnabled": false,
              "type": "Net"
            },
            "settlementsEnabled": false,
            "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22"
          },
          "required": [
            "standardAccountId",
            "merchantName",
            "legalName",
            "businessName",
            "businessType",
            "mcc",
            "genre"
          ]
        },
        "DeeplinkResponse": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "paise denominated value that needs to be collected from the user",
              "example": 10000,
              "format": "int64"
            },
            "closedAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the closure date & time",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "currency": {
              "type": "string",
              "description": "indicates the currency used during the transaction",
              "example": "INR"
            },
            "expiryDate": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the expiry date & time",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "intentLink": {
              "type": "string",
              "description": "upi intent link",
              "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234"
            },
            "merchantId": {
              "type": "string",
              "description": "id associated with the merchant",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "reference id in the merchant's system",
              "example": "1240689979139556557",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            },
            "merchantVpa": {
              "type": "string",
              "description": "VPA used to accept payments",
              "example": "deku@okokaxis"
            },
            "metadata": {
              "type": "string",
              "description": "field provided for the merchant to add additional key-value pairs",
              "example": {
                "InvoiceNumber": "INV-21-12-009"
              },
              "format": "binary"
            },
            "minAmount": {
              "type": "integer",
              "description": "paise denominated minimum value that needs to be collected from the user",
              "example": 10000,
              "format": "int64"
            },
            "paymentType": {
              "type": "string",
              "description": "type of the payment link - single use or multi use",
              "example": "pay_single",
              "enum": [
                "pay_single",
                "pay_multi"
              ]
            },
            "productConfigId": {
              "type": "string",
              "description": "id of the product config associated with the qr / payment link",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "reason": {
              "$ref": "#/components/schemas/Reason"
            },
            "refId": {
              "type": "string",
              "description": "NPCI transaction refId",
              "example": "1240689979139556558",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 35
            },
            "shortCode": {
              "type": "string",
              "description": "short code used for payment short link",
              "example": "Np3KnBCM8Om0"
            },
            "shortLink": {
              "type": "string",
              "description": "short link for the intent link",
              "example": "bills.pe/Np3KnBCM8Om0"
            },
            "status": {
              "type": "string",
              "description": "status defining the validity of the payment link",
              "example": "active",
              "enum": [
                "inactive",
                "active",
                "paid",
                "closed"
              ]
            },
            "transactionNote": {
              "type": "string",
              "description": "note displayed to the customer at the payment page",
              "example": "testpay"
            }
          },
          "example": {
            "amount": 10000,
            "closedAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "currency": "INR",
            "expiryDate": "2023-09-04 12:08:20.202644 +0530 IST",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "1240689979139556557",
            "merchantVpa": "deku@okokaxis",
            "metadata": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "minAmount": 10000,
            "paymentType": "pay_single",
            "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "reason": {
              "code": "unable-to-fulfill-request",
              "desc": "unable-to-fulfill-request",
              "npciErrCode": "YG",
              "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
              "npciRespCode": "YG",
              "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
            },
            "refId": "1240689979139556558",
            "shortCode": "Np3KnBCM8Om0",
            "shortLink": "bills.pe/Np3KnBCM8Om0",
            "status": "active",
            "transactionNote": "testpay"
          }
        },
        "ExecuteRequestBody": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "Amount of the mandate",
              "example": 1000,
              "minimum": 100,
              "maximum": 20000000
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Merchant reference id of the mandate",
              "example": "ABC1234789",
              "minLength": 5,
              "maxLength": 50
            },
            "remark": {
              "type": "string",
              "description": "Remark for the mandate transaction",
              "example": "Transaction for car loan emi"
            },
            "sequenceNumber": {
              "type": "integer",
              "description": "Sequence number of the mandate",
              "example": 1,
              "format": "int64"
            },
            "umn": {
              "type": "string",
              "description": "Unique mandate number",
              "example": "123456789"
            }
          },
          "example": {
            "amount": 1000,
            "merchantReferenceId": "ABC1234789",
            "remark": "Transaction for car loan emi",
            "sequenceNumber": 1,
            "umn": "123456789"
          },
          "required": [
            "umn",
            "amount",
            "sequenceNumber"
          ]
        },
        "FetchCollectResponse": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "paise denominated value that needs to be collected from the user",
              "example": 10000,
              "minimum": 0,
              "maximum": 100000000000000000
            },
            "closedAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the closure date & time",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "currency": {
              "type": "string",
              "description": "indicates the currency used during the transaction",
              "example": "INR",
              "enum": [
                "INR"
              ]
            },
            "customerVpa": {
              "type": "string",
              "description": "remitter's VPA",
              "example": "dekup@okhdfc"
            },
            "expireAfter": {
              "type": "integer",
              "description": "expiry duration for the collect request in minutes",
              "default": 30,
              "example": 2,
              "minimum": 1,
              "maximum": 64800
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantId": {
              "type": "string",
              "description": "id associated with the merchant",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "reference id in the merchant's system",
              "example": "1240689979139556557",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            },
            "merchantVpa": {
              "type": "string",
              "description": "VPA used to accept payments",
              "example": "deku@okokaxis"
            },
            "metadata": {
              "type": "string",
              "description": "field provided for the merchant to add additional key-value pairs",
              "example": {
                "InvoiceNumber": "INV-21-12-009"
              },
              "format": "binary"
            },
            "productConfigId": {
              "type": "string",
              "description": "id of the product config associated with the collect request",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "reason": {
              "$ref": "#/components/schemas/Reason"
            },
            "refId": {
              "type": "string",
              "description": "NPCI transaction refId",
              "example": "1240689979139556558",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 35
            },
            "status": {
              "type": "string",
              "description": "status defining the validity of the collect request",
              "example": "active",
              "enum": [
                "active",
                "paid",
                "closed"
              ]
            },
            "transactionNote": {
              "type": "string",
              "description": "note displayed to the customer at the payment page",
              "example": "testcollect",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            }
          },
          "example": {
            "amount": 10000,
            "closedAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "currency": "INR",
            "customerVpa": "dekup@okhdfc",
            "expireAfter": 2,
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "1240689979139556557",
            "merchantVpa": "deku@okokaxis",
            "metadata": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "reason": {
              "code": "unable-to-fulfill-request",
              "desc": "unable-to-fulfill-request",
              "npciErrCode": "YG",
              "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
              "npciRespCode": "YG",
              "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
            },
            "refId": "1240689979139556558",
            "status": "active",
            "transactionNote": "testcollect"
          }
        },
        "FetchCustomerVpaByIDResponse": {
          "type": "object",
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the verification request",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "customerAccountType": {
              "type": "string",
              "description": "account type of the customer",
              "example": "savings"
            },
            "customerName": {
              "type": "string",
              "description": "remitter's name as per NPCI",
              "example": "deku"
            },
            "customerVpa": {
              "type": "string",
              "description": "remitter's VPA to be verified",
              "example": "ram@okhdfc"
            },
            "id": {
              "type": "string",
              "description": "ID of the request",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantId": {
              "type": "string",
              "description": "id associated with the merchant",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "reference id in the merchant's system",
              "example": "1240689979139556557",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            },
            "reason": {
              "$ref": "#/components/schemas/Reason"
            },
            "status": {
              "type": "string",
              "description": "status defining the validity of the customer vpa",
              "example": "pending",
              "enum": [
                "pending",
                "valid",
                "invalid",
                "failed"
              ]
            }
          },
          "example": {
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "customerAccountType": "savings",
            "customerName": "deku",
            "customerVpa": "ram@okhdfc",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "1240689979139556557",
            "reason": {
              "code": "unable-to-fulfill-request",
              "desc": "unable-to-fulfill-request",
              "npciErrCode": "YG",
              "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
              "npciRespCode": "YG",
              "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
            },
            "status": "pending"
          }
        },
        "FetchMandateOperationResponse": {
          "type": "object",
          "properties": {
            "amountLimit": {
              "type": "integer",
              "description": "Maximum amount for which a mandate transaction can be executed",
              "example": 1000,
              "minimum": 10000,
              "maximum": 2000000000
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the mandate operation request",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "endDate": {
              "type": "string",
              "description": "End date of the mandate",
              "example": "02012006"
            },
            "expireAfter": {
              "type": "integer",
              "description": "Number of seconds after which the mandate operation request will expire",
              "default": 120,
              "example": 120,
              "minimum": 120,
              "maximum": 7776000
            },
            "id": {
              "type": "string",
              "description": "Id of the mandate request resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "intentLink": {
              "type": "string",
              "example": "upi://mandate?pa=deku040920232@okokaxis&validitystart=31121995&validityend=30122025&am=901.00&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=01&purpose=14&rev=N&block=N&txnType=update&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou"
            },
            "mandateId": {
              "type": "string",
              "description": "Id of the mandate resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantId": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Merchant reference id of the mandate",
              "example": "ABC1234789",
              "minLength": 5,
              "maxLength": 50
            },
            "mode": {
              "type": "string",
              "description": "Mandate operation mode",
              "example": "qr",
              "enum": [
                "collect",
                "qr",
                "intent"
              ]
            },
            "reason": {
              "$ref": "#/components/schemas/Reason"
            },
            "status": {
              "type": "string",
              "example": "pending",
              "enum": [
                "pending",
                "initiated",
                "success",
                "failed"
              ]
            },
            "txnId": {
              "type": "string",
              "description": "NPCI transaction id",
              "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 35,
              "maxLength": 35
            },
            "type": {
              "type": "string",
              "description": "Mandate operation type",
              "example": "Dolores voluptatum rerum eaque."
            },
            "umn": {
              "type": "string",
              "description": "Unique mandate number",
              "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
            }
          },
          "example": {
            "amountLimit": 1000,
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "endDate": "02012006",
            "expireAfter": 120,
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "intentLink": "upi://mandate?pa=deku040920232@okokaxis&validitystart=31121995&validityend=30122025&am=901.00&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=01&purpose=14&rev=N&block=N&txnType=update&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
            "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "ABC1234789",
            "mode": "qr",
            "reason": {
              "code": "unable-to-fulfill-request",
              "desc": "unable-to-fulfill-request",
              "npciErrCode": "YG",
              "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
              "npciRespCode": "YG",
              "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
            },
            "status": "pending",
            "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "type": "Quae cum sit explicabo enim necessitatibus dicta.",
            "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "FetchMandateResponse": {
          "type": "object",
          "properties": {
            "allowMultipleDebit": {
              "type": "boolean",
              "description": "Allow multiple debits for the mandate",
              "default": false,
              "example": true
            },
            "amount": {
              "type": "integer",
              "description": "Amount(in paise) of the mandate",
              "example": 1000,
              "minimum": 100,
              "maximum": 20000000
            },
            "amountRule": {
              "type": "string",
              "description": "Rule for verifying the debit amount is within range of specified amount_limit",
              "example": "max",
              "enum": [
                "max",
                "exact"
              ]
            },
            "autoExecute": {
              "type": "boolean",
              "description": "Auto execute of the mandate",
              "example": true
            },
            "autoPreNotify": {
              "type": "boolean",
              "description": "Auto pre notify of the mandate",
              "example": true
            },
            "blockFunds": {
              "type": "boolean",
              "description": "Block funds for the mandate",
              "default": false,
              "example": true
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "creationMode": {
              "type": "string",
              "description": "Creation mode of the mandate",
              "example": "qr",
              "enum": [
                "collect",
                "qr",
                "intent"
              ]
            },
            "currency": {
              "type": "string",
              "description": "Currency in which the mandate payment will be executed",
              "default": "INR",
              "example": "INR"
            },
            "customerRevocable": {
              "type": "boolean",
              "example": true
            },
            "customerVpa": {
              "type": "string",
              "description": "Customer VPA of the mandate",
              "example": "ram@axis"
            },
            "endDate": {
              "type": "string",
              "description": "End date of the mandate (ddmmyyyy)",
              "example": "02012008"
            },
            "expireAfter": {
              "type": "integer",
              "description": "Number of seconds after which the mandate creation request will expire",
              "default": 120,
              "example": 120,
              "minimum": 120,
              "maximum": 3888000
            },
            "firstExecutionAmount": {
              "type": "integer",
              "description": "First execution amount(in paise) of the mandate",
              "default": 0,
              "example": 1000,
              "format": "int64"
            },
            "frequency": {
              "type": "string",
              "description": "Frequency of the mandate",
              "example": "monthly",
              "enum": [
                "one time",
                "weekly",
                "daily",
                "fortnightly",
                "monthly",
                "bi monthly",
                "quarterly",
                "half yearly",
                "yearly",
                "as presented"
              ]
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "initiationMode": {
              "type": "string",
              "description": "Initiation mode of the mandate",
              "example": "00",
              "enum": [
                "00",
                "01",
                "04"
              ]
            },
            "intentLink": {
              "type": "string",
              "description": "Intent link for the mandate request",
              "example": "upi://mandate?pa=deku040920232@okokaxis&pn=merchant-1&validitystart=31121995&validityend=31121996&am=100.00&amrule=MAX&recur=one%20time&recurvalue=0&recurtype=on&tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI&cu=INR&mc=1234&mode=04&purpose=14&rev=N&share=Y&qrexpire=04092023&block=N&orgid=000000&version=2.0&txnType=create&tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI"
            },
            "maxAmountLimit": {
              "type": "integer",
              "description": "Maximum amount(in paise) for which a mandate transaction can be executed",
              "example": 1000,
              "minimum": 100,
              "maximum": 20000000
            },
            "merchantId": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "At enim quia fugiat vitae ullam odit."
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Merchant reference id of the mandate",
              "example": "ABC1234789",
              "minLength": 5,
              "maxLength": 50
            },
            "merchantVpa": {
              "type": "string",
              "description": "Merchant VPA of the mandate",
              "example": "acme.corp@axis"
            },
            "productConfigId": {
              "type": "string",
              "description": "Configuration Id of the product",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "purpose": {
              "type": "string",
              "description": "Purpose of the mandate",
              "default": "14",
              "example": "14",
              "enum": [
                "00",
                "14",
                "76",
                "01"
              ]
            },
            "reason": {
              "$ref": "#/components/schemas/Reason"
            },
            "recurrenceRule": {
              "type": "string",
              "description": "Recurrence rule of the mandate",
              "default": "on",
              "example": "on",
              "enum": [
                "on",
                "before",
                "after"
              ]
            },
            "recurrenceValue": {
              "type": "integer",
              "description": "Recurrence value of the mandate",
              "example": 1,
              "minimum": 0,
              "maximum": 31
            },
            "shareToPayee": {
              "type": "boolean",
              "example": false
            },
            "startDate": {
              "type": "string",
              "description": "Start date of the mandate (ddmmyyyy)",
              "example": "02012006"
            },
            "status": {
              "type": "string",
              "description": "Status of the mandate",
              "example": "pending",
              "enum": [
                "pending",
                "live",
                "paused",
                "revoked",
                "rejected",
                "completed"
              ]
            },
            "transactionNote": {
              "type": "string",
              "description": "Transaction note of the mandate",
              "example": "Transaction note"
            },
            "txnId": {
              "type": "string",
              "description": "NPCI transaction id",
              "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 35,
              "maxLength": 35
            },
            "umn": {
              "type": "string",
              "description": "Unique mandate number",
              "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
            }
          },
          "example": {
            "allowMultipleDebit": true,
            "amount": 1000,
            "amountRule": "max",
            "autoExecute": true,
            "autoPreNotify": true,
            "blockFunds": true,
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "creationMode": "qr",
            "currency": "INR",
            "customerRevocable": true,
            "customerVpa": "ram@axis",
            "endDate": "02012008",
            "expireAfter": 120,
            "firstExecutionAmount": 1000,
            "frequency": "monthly",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "initiationMode": "01",
            "intentLink": "upi://mandate?pa=deku040920232@okokaxis&pn=merchant-1&validitystart=31121995&validityend=31121996&am=100.00&amrule=MAX&recur=one%20time&recurvalue=0&recurtype=on&tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI&cu=INR&mc=1234&mode=04&purpose=14&rev=N&share=Y&qrexpire=04092023&block=N&orgid=000000&version=2.0&txnType=create&tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
            "maxAmountLimit": 1000,
            "merchantId": "Omnis et beatae sint qui.",
            "merchantReferenceId": "ABC1234789",
            "merchantVpa": "acme.corp@axis",
            "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "purpose": "14",
            "reason": {
              "code": "unable-to-fulfill-request",
              "desc": "unable-to-fulfill-request",
              "npciErrCode": "YG",
              "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
              "npciRespCode": "YG",
              "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
            },
            "recurrenceRule": "on",
            "recurrenceValue": 1,
            "shareToPayee": false,
            "startDate": "02012006",
            "status": "pending",
            "transactionNote": "Transaction note",
            "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "FetchPaymentListResponse": {
          "type": "object",
          "properties": {
            "payments": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FetchPaymentResponse2"
              },
              "example": [
                {
                  "amount": 10000,
                  "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                  "currency": "INR",
                  "customerAccountType": "savings",
                  "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                  "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                  },
                  "refId": "1240689979139556558",
                  "requestId": "cjqml1f2e5ocq2mesej0",
                  "rrn": "124068997913",
                  "status": "initiated",
                  "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                  "txnNote": "testpay"
                },
                {
                  "amount": 10000,
                  "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                  "currency": "INR",
                  "customerAccountType": "savings",
                  "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                  "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                  },
                  "refId": "1240689979139556558",
                  "requestId": "cjqml1f2e5ocq2mesej0",
                  "rrn": "124068997913",
                  "status": "initiated",
                  "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                  "txnNote": "testpay"
                },
                {
                  "amount": 10000,
                  "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                  "currency": "INR",
                  "customerAccountType": "savings",
                  "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                  "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                  },
                  "refId": "1240689979139556558",
                  "requestId": "cjqml1f2e5ocq2mesej0",
                  "rrn": "124068997913",
                  "status": "initiated",
                  "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                  "txnNote": "testpay"
                }
              ]
            }
          },
          "example": {
            "payments": [
              {
                "amount": 10000,
                "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                "currency": "INR",
                "customerAccountType": "savings",
                "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                },
                "refId": "1240689979139556558",
                "requestId": "cjqml1f2e5ocq2mesej0",
                "rrn": "124068997913",
                "status": "initiated",
                "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                "txnNote": "testpay"
              },
              {
                "amount": 10000,
                "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                "currency": "INR",
                "customerAccountType": "savings",
                "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                },
                "refId": "1240689979139556558",
                "requestId": "cjqml1f2e5ocq2mesej0",
                "rrn": "124068997913",
                "status": "initiated",
                "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                "txnNote": "testpay"
              },
              {
                "amount": 10000,
                "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                "currency": "INR",
                "customerAccountType": "savings",
                "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
                },
                "refId": "1240689979139556558",
                "requestId": "cjqml1f2e5ocq2mesej0",
                "rrn": "124068997913",
                "status": "initiated",
                "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                "txnNote": "testpay"
              }
            ]
          }
        },
        "FetchPaymentResponse": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "paise denominated value collected from the user",
              "example": 10000,
              "format": "int64"
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "currency": {
              "type": "string",
              "description": "indicates the currency used during the transaction",
              "example": "INR"
            },
            "customerAccountType": {
              "type": "string",
              "description": "account type of the customer",
              "example": "savings"
            },
            "customerVpa": {
              "type": "string",
              "description": "remitter's VPA",
              "example": "test-auto-tyvmm59i9b@okokaxis"
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantId": {
              "type": "string",
              "description": "id associated with the merchant",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "reference id in the merchant's system",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantVpa": {
              "type": "string",
              "description": "VPA used to accept payment",
              "example": "test-auto-beibfev2oq@okokaxis"
            },
            "productInstanceId": {
              "type": "string",
              "description": "this is the deeplink / collect request / mandate id associated with the payment",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "reason": {
              "$ref": "#/components/schemas/Reason"
            },
            "refId": {
              "type": "string",
              "description": "NPCI transaction refId",
              "example": "1240689979139556558"
            },
            "rrn": {
              "type": "string",
              "description": "NPCI transaction custRef",
              "example": "124068997913"
            },
            "status": {
              "type": "string",
              "description": "status defining the validity of the payment",
              "example": "initiated",
              "enum": [
                "initiated",
                "pending",
                "success",
                "failed"
              ]
            },
            "txnId": {
              "type": "string",
              "description": "NPCI transaction id",
              "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
            },
            "txnNote": {
              "type": "string",
              "description": "note displayed to the customer at the payment page",
              "example": "testpay"
            }
          },
          "example": {
            "amount": 10000,
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "currency": "INR",
            "customerAccountType": "savings",
            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantVpa": "test-auto-beibfev2oq@okokaxis",
            "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "reason": {
              "code": "unable-to-fulfill-request",
              "desc": "unable-to-fulfill-request",
              "npciErrCode": "YG",
              "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
              "npciRespCode": "YG",
              "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
            },
            "refId": "1240689979139556558",
            "rrn": "124068997913",
            "status": "initiated",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
            "txnNote": "testpay"
          },
          "required": [
            "merchantVpa",
            "customerVpa",
            "amount",
            "productInstanceId"
          ]
        },
        "FetchPaymentResponse2": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "paise denominated value collected from the user",
              "example": 10000,
              "format": "int64"
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "currency": {
              "type": "string",
              "description": "indicates the currency used during the transaction",
              "example": "INR"
            },
            "customerAccountType": {
              "type": "string",
              "description": "account type of the customer",
              "example": "savings"
            },
            "customerVpa": {
              "type": "string",
              "description": "remitter's VPA",
              "example": "test-auto-tyvmm59i9b@okokaxis"
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantId": {
              "type": "string",
              "description": "id associated with the merchant",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "reference id in the merchant's system",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantVpa": {
              "type": "string",
              "description": "VPA used to accept payment",
              "example": "test-auto-beibfev2oq@okokaxis"
            },
            "productInstanceId": {
              "type": "string",
              "description": "this is the deeplink / collect request / mandate id associated with the payment",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "reason": {
              "$ref": "#/components/schemas/Reason"
            },
            "refId": {
              "type": "string",
              "description": "NPCI transaction refId",
              "example": "1240689979139556558"
            },
            "requestId": {
              "type": "string",
              "example": "cjqml1f2e5ocq2mesej0"
            },
            "rrn": {
              "type": "string",
              "description": "NPCI transaction custRef",
              "example": "124068997913"
            },
            "status": {
              "type": "string",
              "description": "status defining the validity of the payment",
              "example": "initiated",
              "enum": [
                "initiated",
                "pending",
                "success",
                "failed"
              ]
            },
            "txnId": {
              "type": "string",
              "description": "NPCI transaction id",
              "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
            },
            "txnNote": {
              "type": "string",
              "description": "note displayed to the customer at the payment page",
              "example": "testpay"
            }
          },
          "description": "FetchPaymentResponse is the response type returned by the payment service",
          "example": {
            "amount": 10000,
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "currency": "INR",
            "customerAccountType": "savings",
            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantVpa": "test-auto-beibfev2oq@okokaxis",
            "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "reason": {
              "code": "unable-to-fulfill-request",
              "desc": "unable-to-fulfill-request",
              "npciErrCode": "YG",
              "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
              "npciRespCode": "YG",
              "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
            },
            "refId": "1240689979139556558",
            "requestId": "cjqml1f2e5ocq2mesej0",
            "rrn": "124068997913",
            "status": "initiated",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
            "txnNote": "testpay"
          },
          "required": [
            "merchantVpa",
            "customerVpa",
            "amount",
            "productInstanceId"
          ]
        },
        "MandateExecutionResponse": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "Amount of the mandate",
              "example": 1000,
              "minimum": 100,
              "maximum": 20000000
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "mandateId": {
              "type": "string",
              "description": "Id of the mandate that needs to be executed",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantId": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Merchant reference id of the mandate",
              "example": "ABC1234789",
              "minLength": 5,
              "maxLength": 50
            },
            "reason": {
              "$ref": "#/components/schemas/Reason"
            },
            "remark": {
              "type": "string",
              "description": "Remark for the mandate transaction",
              "example": "Transaction for car loan emi"
            },
            "sequenceNumber": {
              "type": "integer",
              "description": "Sequence number of the mandate",
              "example": 1,
              "format": "int64"
            },
            "status": {
              "type": "string",
              "description": "Status of the mandate execution request",
              "example": "live",
              "enum": [
                "pending",
                "initiated",
                "success",
                "failed"
              ]
            },
            "txnId": {
              "type": "string",
              "description": "NPCI transaction id",
              "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 35,
              "maxLength": 35
            },
            "umn": {
              "type": "string",
              "description": "Unique mandate number",
              "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
            }
          },
          "example": {
            "amount": 1000,
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "ABC1234789",
            "reason": {
              "code": "unable-to-fulfill-request",
              "desc": "unable-to-fulfill-request",
              "npciErrCode": "YG",
              "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
              "npciRespCode": "YG",
              "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
            },
            "remark": "Transaction for car loan emi",
            "sequenceNumber": 1,
            "status": "live",
            "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "MandatePreDebitNotificationResponse": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "Amount of the mandate",
              "example": 1000,
              "minimum": 100,
              "maximum": 20000000
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "executionDate": {
              "type": "string",
              "description": "Execution date of the mandate",
              "example": "02012006"
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "mandateId": {
              "type": "string",
              "description": "Id of the mandate that needs to be notified",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantId": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Merchant reference id of the mandate",
              "example": "ABC1234789",
              "minLength": 5,
              "maxLength": 50
            },
            "reason": {
              "$ref": "#/components/schemas/Reason"
            },
            "sequenceNumber": {
              "type": "integer",
              "description": "Sequence number of the mandate",
              "example": 1,
              "format": "int64"
            },
            "status": {
              "type": "string",
              "description": "Status of the pre debit notification request",
              "example": "success",
              "enum": [
                "pending",
                "initiated",
                "success",
                "failed"
              ]
            },
            "txnId": {
              "type": "string",
              "description": "NPCI transaction id",
              "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 35,
              "maxLength": 35
            },
            "umn": {
              "type": "string",
              "description": "Unique mandate number",
              "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
            }
          },
          "example": {
            "amount": 1000,
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "executionDate": "02012006",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "ABC1234789",
            "reason": {
              "code": "unable-to-fulfill-request",
              "desc": "unable-to-fulfill-request",
              "npciErrCode": "YG",
              "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
              "npciRespCode": "YG",
              "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
            },
            "sequenceNumber": 1,
            "status": "success",
            "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "MerchantResponse": {
          "type": "object",
          "properties": {
            "acceptDeemedTxns": {
              "type": "boolean",
              "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
              "example": true
            },
            "addressProviderId": {
              "type": "string",
              "description": "Id of the Address Provider associated with the Merchant",
              "example": "1237800298651584417"
            },
            "businessName": {
              "type": "string",
              "description": "Brand name or Consumer facing name",
              "example": "deku",
              "pattern": "^[a-zA-Z0-9 ]+$"
            },
            "businessType": {
              "type": "string",
              "description": "Incorporation type",
              "example": "PROPRIETARY",
              "enum": [
                "PROPRIETARY",
                "PARTNERSHIP",
                "PRIVATE",
                "PUBLIC",
                "OTHERS"
              ]
            },
            "callbackURLsEnabled": {
              "type": "boolean",
              "description": "Indicates whether CallbackURLs are enabled for Merchant",
              "example": true
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "documentStatus": {
              "type": "string",
              "description": "Current Status of the Merchant Controlled by Admin / Onboarding Team",
              "example": "APPROVED",
              "enum": [
                "PENDING",
                "SUBMITTED",
                "APPROVED",
                "REJECTED"
              ]
            },
            "franchiseName": {
              "type": "string",
              "description": "Franchise name",
              "example": "deku",
              "pattern": "^[a-zA-Z0-9 ]+$"
            },
            "genre": {
              "type": "string",
              "description": "Online / Offline",
              "example": "ONLINE",
              "enum": [
                "ONLINE",
                "OFFLINE"
              ]
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "legalName": {
              "type": "string",
              "description": "Legal name as per incorporation documents",
              "example": "deku",
              "pattern": "^[a-zA-Z0-9 ]+$"
            },
            "mcc": {
              "type": "string",
              "description": "Category of business operation",
              "example": "5432"
            },
            "merchantName": {
              "type": "string",
              "description": "Name used by Merchant user to identify a given Merchant from others",
              "example": "deku",
              "minLength": 1
            },
            "merchantType": {
              "type": "string",
              "description": "merchant type",
              "default": "small",
              "example": "small",
              "enum": [
                "small",
                "large"
              ]
            },
            "onboardingType": {
              "type": "string",
              "description": "onboarding type",
              "default": "bank",
              "example": "bank",
              "enum": [
                "bank",
                "aggregator"
              ]
            },
            "paId": {
              "type": "string",
              "description": "Id of the Payment Aggregator associated with the Merchant",
              "example": "1237799847336085408"
            },
            "paymentModes": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Atque quis."
              },
              "description": "payment modes allowed for merchants",
              "example": [
                "savings",
                "lite",
                "erupi",
                "rupay_cc"
              ]
            },
            "products": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Harum eum sit et nihil."
              },
              "description": "products allowed for merchants",
              "example": [
                "deeplinks",
                "sqr",
                "mqr"
              ]
            },
            "settlement": {
              "$ref": "#/components/schemas/SettlementConfiguration"
            },
            "settlementsEnabled": {
              "type": "boolean",
              "description": "indicates whether settlements are enabled for merchant or not",
              "example": true
            },
            "standardAccountId": {
              "type": "string",
              "example": "Expedita libero velit consequatur voluptatem."
            },
            "transactionStatus": {
              "type": "string",
              "description": "Current Transaction Status of the Merchant",
              "example": "active",
              "enum": [
                "active",
                "inactive"
              ]
            }
          },
          "example": {
            "acceptDeemedTxns": true,
            "addressProviderId": "1237800298651584417",
            "businessName": "deku",
            "businessType": "PROPRIETARY",
            "callbackURLsEnabled": true,
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "documentStatus": "APPROVED",
            "franchiseName": "deku",
            "genre": "ONLINE",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "legalName": "deku",
            "mcc": "5432",
            "merchantName": "deku",
            "merchantType": "small",
            "onboardingType": "bank",
            "paId": "1237799847336085408",
            "paymentModes": [
              "savings",
              "lite",
              "erupi",
              "rupay_cc"
            ],
            "products": [
              "deeplinks",
              "sqr",
              "mqr"
            ],
            "settlement": {
              "cycles": [
                {
                  "endTime": "1971-04-18T07:52:17Z",
                  "settlementTime": "1971-07-04T22:43:33Z",
                  "startTime": "1972-08-31T18:25:52Z"
                },
                {
                  "endTime": "1971-04-18T07:52:17Z",
                  "settlementTime": "1971-07-04T22:43:33Z",
                  "startTime": "1972-08-31T18:25:52Z"
                },
                {
                  "endTime": "1971-04-18T07:52:17Z",
                  "settlementTime": "1971-07-04T22:43:33Z",
                  "startTime": "1972-08-31T18:25:52Z"
                }
              ],
              "frequency": "TPlusOne",
              "splitsEnabled": true,
              "type": "Net"
            },
            "settlementsEnabled": true,
            "standardAccountId": "Veniam ut qui in quas nobis.",
            "transactionStatus": "active"
          }
        },
        "ModifyRequestBody": {
          "type": "object",
          "properties": {
            "amountLimit": {
              "type": "integer",
              "description": "Maximum amount for which a mandate transaction can be executed",
              "example": 1000,
              "minimum": 10000,
              "maximum": 2000000000
            },
            "endDate": {
              "type": "string",
              "description": "End date of the mandate",
              "example": "02012006"
            },
            "expireAfter": {
              "type": "integer",
              "description": "Number of seconds after which the mandate creation request will expire",
              "default": 120,
              "example": 120,
              "minimum": 120,
              "maximum": 7776000
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Merchant reference id of the mandate",
              "example": "ABC1234789",
              "minLength": 5,
              "maxLength": 50
            }
          },
          "example": {
            "amountLimit": 1000,
            "endDate": "02012006",
            "expireAfter": 120,
            "merchantReferenceId": "ABC1234789"
          }
        },
        "NotifyRequestBody": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "Amount of the mandate",
              "example": 1000,
              "minimum": 100,
              "maximum": 20000000
            },
            "executionDate": {
              "type": "string",
              "description": "Execution date of the mandate",
              "example": "02012006"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Merchant reference id of the mandate",
              "example": "ABC1234789",
              "minLength": 5,
              "maxLength": 50
            },
            "sequenceNumber": {
              "type": "integer",
              "description": "Sequence number of the mandate",
              "example": 1,
              "format": "int64"
            },
            "umn": {
              "type": "string",
              "description": "Unique mandate number",
              "example": "setumandate1234789@ybl"
            }
          },
          "example": {
            "amount": 1000,
            "executionDate": "02012006",
            "merchantReferenceId": "ABC1234789",
            "sequenceNumber": 1,
            "umn": "setumandate1234789@ybl"
          },
          "required": [
            "umn",
            "amount",
            "sequenceNumber",
            "executionDate"
          ]
        },
        "Reason": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "error code returned by Setu for product instance / mandate request / payment / customer vpa verification failure / closure",
              "example": "unable-to-fulfill-request"
            },
            "desc": {
              "type": "string",
              "description": "describes product instance / mandate request / payment / customer vpa verification failure / closure reason",
              "example": "unable-to-fulfill-request"
            },
            "npciErrCode": {
              "type": "string",
              "description": "err code received from NPCI for product instance / mandate request / payment / customer vpa verification failure / closure",
              "example": "YG"
            },
            "npciErrDesc": {
              "type": "string",
              "description": "npciErrCode description for product instance / mandate request / payment / customer vpa verification failure / closure",
              "example": "MERCHANT ERROR (PAYEE PSP)"
            },
            "npciRespCode": {
              "type": "string",
              "description": "resp code received from NPCI for product instance / mandate request / payment / customer vpa verification failure / closure",
              "example": "YG"
            },
            "npciRespDesc": {
              "type": "string",
              "description": "npciRespCode description for product instance / mandate request / payment / customer vpa verification failure / closure",
              "example": "MERCHANT ERROR (PAYEE PSP)"
            }
          },
          "example": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)"
          }
        },
        "RefundReason": {
          "type": "object",
          "properties": {
            "errCode": {
              "type": "string",
              "description": "Error code returned by Setu for refund failures",
              "example": "refund-disabled"
            },
            "npciErrCode": {
              "type": "string",
              "description": "Error code received from NPCI in case refund request fails",
              "example": "R21"
            },
            "npciErrDesc": {
              "type": "string",
              "description": "indicates refund error reason",
              "example": "ONLINE REFUND IS DISABLED IN UPI"
            }
          },
          "example": {
            "errCode": "refund-disabled",
            "npciErrCode": "R21",
            "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
          }
        },
        "RevokeMandateResponse": {
          "type": "object",
          "properties": {
            "expireAfter": {
              "type": "integer",
              "description": "Number of seconds after which the mandate revoke request will expire",
              "default": 120,
              "example": 120,
              "minimum": 120,
              "maximum": 7776000
            },
            "id": {
              "type": "string",
              "description": "Id of the mandate request resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "intentLink": {
              "type": "string",
              "example": "upi://mandate?pa=deku040920232@okokaxis&validitystart=1995-12-31&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=04&purpose=14&rev=N&block=N&txnType=revoke&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETE9q1rQXW3wXHzDdaqJTDGHHTBkJ0Segc"
            },
            "mandateId": {
              "type": "string",
              "description": "Id of the mandate resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantId": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Merchant reference id of the mandate",
              "example": "ABC1234789",
              "minLength": 5,
              "maxLength": 50
            },
            "mode": {
              "type": "string",
              "example": "intent",
              "enum": [
                "collect",
                "intent"
              ]
            },
            "status": {
              "type": "string",
              "example": "pending",
              "enum": [
                "pending",
                "initiated",
                "success",
                "failed"
              ]
            },
            "txnId": {
              "type": "string",
              "description": "NPCI transaction id",
              "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 35,
              "maxLength": 35
            },
            "umn": {
              "type": "string",
              "description": "Unique mandate number",
              "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
            }
          },
          "example": {
            "expireAfter": 120,
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "intentLink": "upi://mandate?pa=deku040920232@okokaxis&validitystart=1995-12-31&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=04&purpose=14&rev=N&block=N&txnType=revoke&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETE9q1rQXW3wXHzDdaqJTDGHHTBkJ0Segc",
            "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "ABC1234789",
            "mode": "intent",
            "status": "pending",
            "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "RevokeRequestBody": {
          "type": "object",
          "properties": {
            "expireAfter": {
              "type": "integer",
              "description": "Number of seconds after which the mandate revoke request will expire",
              "default": 120,
              "example": 120,
              "minimum": 120,
              "maximum": 7776000
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Merchant reference id of the mandate",
              "example": "ABC1234789",
              "minLength": 5,
              "maxLength": 50
            }
          },
          "example": {
            "expireAfter": 120,
            "merchantReferenceId": "ABC1234789"
          }
        },
        "SettlementConfiguration": {
          "type": "object",
          "properties": {
            "cycles": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SettlementCycle"
              },
              "description": "settlement_cycles",
              "example": [
                {
                  "endTime": "1999-05-22T01:44:35Z",
                  "settlementTime": "1991-12-13T21:44:41Z",
                  "startTime": "1982-01-16T06:49:16Z"
                },
                {
                  "endTime": "1999-05-22T01:44:35Z",
                  "settlementTime": "1991-12-13T21:44:41Z",
                  "startTime": "1982-01-16T06:49:16Z"
                },
                {
                  "endTime": "1999-05-22T01:44:35Z",
                  "settlementTime": "1991-12-13T21:44:41Z",
                  "startTime": "1982-01-16T06:49:16Z"
                },
                {
                  "endTime": "1999-05-22T01:44:35Z",
                  "settlementTime": "1991-12-13T21:44:41Z",
                  "startTime": "1982-01-16T06:49:16Z"
                }
              ]
            },
            "frequency": {
              "type": "string",
              "example": "TPlusOne",
              "enum": [
                "Instant",
                "TZero",
                "TPlusOne",
                "TPlusTwo",
                "TPlusFour"
              ]
            },
            "splitsEnabled": {
              "type": "boolean",
              "example": false
            },
            "type": {
              "type": "string",
              "example": "Net",
              "enum": [
                "Net",
                "Gross"
              ]
            }
          },
          "example": {
            "cycles": [
              {
                "endTime": "1999-05-22T01:44:35Z",
                "settlementTime": "1991-12-13T21:44:41Z",
                "startTime": "1982-01-16T06:49:16Z"
              },
              {
                "endTime": "1999-05-22T01:44:35Z",
                "settlementTime": "1991-12-13T21:44:41Z",
                "startTime": "1982-01-16T06:49:16Z"
              },
              {
                "endTime": "1999-05-22T01:44:35Z",
                "settlementTime": "1991-12-13T21:44:41Z",
                "startTime": "1982-01-16T06:49:16Z"
              }
            ],
            "frequency": "TPlusOne",
            "splitsEnabled": false,
            "type": "Net"
          },
          "required": [
            "frequency",
            "type",
            "cycles"
          ]
        },
        "SettlementCycle": {
          "type": "object",
          "properties": {
            "endTime": {
              "type": "string",
              "example": "1999-09-17T12:50:56Z",
              "format": "date-time"
            },
            "settlementTime": {
              "type": "string",
              "example": "2015-04-23T05:06:03Z",
              "format": "date-time"
            },
            "startTime": {
              "type": "string",
              "example": "1981-08-02T17:07:41Z",
              "format": "date-time"
            }
          },
          "example": {
            "endTime": "2010-06-19T00:45:20Z",
            "settlementTime": "1985-10-21T15:45:07Z",
            "startTime": "1986-06-21T05:16:14Z"
          }
        },
        "TPVAccountDetail": {
          "type": "object",
          "properties": {
            "IFSC": {
              "type": "string",
              "description": "IFSC code for the account",
              "example": "SBIN0000001"
            },
            "accountName": {
              "type": "string",
              "description": "account holder name for the account",
              "example": "deku"
            },
            "accountNumber": {
              "type": "string",
              "description": "account number for the account",
              "example": "1234567890"
            }
          },
          "example": {
            "IFSC": "SBIN0000001",
            "accountName": "deku",
            "accountNumber": "1234567890"
          }
        },
        "TPVAccountDetailResponse": {
          "type": "object",
          "properties": {
            "IFSC": {
              "type": "string",
              "description": "IFSC code for the account",
              "example": "SBIN0000001"
            },
            "accountName": {
              "type": "string",
              "description": "account holder name for the account",
              "example": "deku"
            },
            "encryptedAccountNumber": {
              "type": "string",
              "description": "Base64-encoded encrypted account number",
              "example": "5e884898da28047151d0e56f8dc629277"
            },
            "hashedAccountNumber": {
              "type": "string",
              "description": "Base64-encoded hashed account number",
              "example": "5e884898da28047151d0e56f8dc629277"
            },
            "maskedAccountNumber": {
              "type": "string",
              "description": "Masked account number",
              "example": "**** **** **** 7890"
            }
          },
          "description": "API response for TPV creation",
          "example": {
            "IFSC": "SBIN0000001",
            "accountName": "deku",
            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "maskedAccountNumber": "**** **** **** 7890"
          }
        },
        "TPVResponse": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "amount for the transaction",
              "example": 100,
              "format": "int64"
            },
            "expireAfter": {
              "type": "integer",
              "description": "expire after in minutes for the transaction",
              "example": 10,
              "format": "int64"
            },
            "id": {
              "type": "string",
              "description": "id associated with the tpv",
              "example": "1240689979139556556"
            },
            "intentLink": {
              "type": "string",
              "description": "upi link for the payment link",
              "example": "upi://pay?pa=abc@setu&pn=abc&tn=abc&am=100"
            },
            "merchantId": {
              "type": "string",
              "description": "id associated with the merchant",
              "example": "1240689979139556556"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "id provided by the merchant",
              "example": "1240689979139556556"
            },
            "metadata": {
              "type": "string",
              "description": "metadata for the tpv transaction",
              "example": "test",
              "format": "binary"
            },
            "minAmount": {
              "type": "integer",
              "description": "min amount for the transaction",
              "example": 100,
              "format": "int64"
            },
            "primaryAccount": {
              "$ref": "#/components/schemas/TPVAccountDetailResponse"
            },
            "productConfigId": {
              "type": "string",
              "description": "id associated with the product config",
              "example": "1240689979139556556"
            },
            "secondaryAccounts": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TPVAccountDetailResponse"
              },
              "description": "secondary accounts for the tpv transaction",
              "example": [
                {
                  "IFSC": "SBIN0000001",
                  "accountName": "deku",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountNumber": "**** **** **** 7890"
                },
                {
                  "IFSC": "SBIN0000001",
                  "accountName": "deku",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountNumber": "**** **** **** 7890"
                },
                {
                  "IFSC": "SBIN0000001",
                  "accountName": "deku",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountNumber": "**** **** **** 7890"
                }
              ]
            },
            "shortCode": {
              "type": "string",
              "description": "short code for the payment link",
              "example": "abc"
            },
            "shortLink": {
              "type": "string",
              "description": "short link for the payment link",
              "example": "https://pay.setu.co/abc"
            },
            "transactionNote": {
              "type": "string",
              "description": "transaction note for the transaction",
              "example": "test transaction"
            }
          },
          "example": {
            "amount": 100,
            "expireAfter": 10,
            "id": "1240689979139556556",
            "intentLink": "upi://pay?pa=abc@setu&pn=abc&tn=abc&am=100",
            "merchantId": "1240689979139556556",
            "merchantReferenceId": "1240689979139556556",
            "metadata": "test",
            "minAmount": 100,
            "primaryAccount": {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            "productConfigId": "1240689979139556556",
            "secondaryAccounts": [
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountNumber": "**** **** **** 7890"
              }
            ],
            "shortCode": "abc",
            "shortLink": "https://pay.setu.co/abc",
            "transactionNote": "test transaction"
          }
        },
        "UpdateConfigRequestBody": {
          "type": "object",
          "properties": {
            "acceptDeemedTxns": {
              "type": "boolean",
              "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
              "example": true
            },
            "callbackURLsEnabled": {
              "type": "boolean",
              "description": "Indicates whether CallbackURLs are enabled for Merchant",
              "example": true
            },
            "paymentModes": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Omnis voluptates maiores nihil quo."
              },
              "description": "payment modes allowed for merchants",
              "example": [
                "savings",
                "lite",
                "erupi",
                "rupay_cc"
              ]
            },
            "products": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Dignissimos nulla reiciendis ut et nam sunt."
              },
              "description": "products allowed for merchants",
              "example": [
                "deeplinks",
                "sqr",
                "mqr"
              ]
            }
          },
          "example": {
            "acceptDeemedTxns": true,
            "callbackURLsEnabled": true,
            "paymentModes": [
              "savings",
              "lite",
              "erupi",
              "rupay_cc"
            ],
            "products": [
              "deeplinks",
              "sqr",
              "mqr"
            ]
          }
        },
        "UpdateDisputeStatusRequestBody": {
          "type": "object",
          "properties": {
            "reason": {
              "type": "string",
              "description": "Reason for accepting or rejecting the dispute",
              "example": "Dispute accepted by merchant"
            },
            "status": {
              "type": "string",
              "description": "Status of the dispute updated by the merchant",
              "example": "rejected",
              "enum": [
                "accepted",
                "rejected"
              ]
            }
          },
          "example": {
            "reason": "Dispute accepted by merchant",
            "status": "rejected"
          },
          "required": [
            "status"
          ]
        },
        "UpdateDisputeStatusResponse": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "Amount of the original payment for the dispute",
              "example": 100,
              "format": "int64"
            },
            "currency": {
              "type": "string",
              "description": "Currency of the original payment for the dispute",
              "example": "INR"
            },
            "id": {
              "type": "string",
              "description": "Dispute id of the dispute",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantId": {
              "type": "string",
              "description": "id associated with the merchant",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Merchant reference id of the dispute",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "reason": {
              "type": "string",
              "description": "Reason for accepting or rejecting the dispute",
              "example": "Dispute accepted by merchant"
            },
            "rrn": {
              "type": "string",
              "description": "RRN of the dispute",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "status": {
              "type": "string",
              "description": "Status of the dispute updated by the merchant",
              "example": "accepted",
              "enum": [
                "accepted",
                "rejected"
              ]
            },
            "txnId": {
              "type": "string",
              "description": "Transaction id of the original payment for the dispute",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            }
          },
          "example": {
            "amount": 100,
            "currency": "INR",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "reason": "Dispute accepted by merchant",
            "rrn": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "status": "rejected",
            "txnId": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        },
        "UpdateMandateResponse": {
          "type": "object",
          "properties": {
            "amountLimit": {
              "type": "integer",
              "description": "Maximum amount for which a mandate transaction can be executed",
              "example": 1000,
              "minimum": 10000,
              "maximum": 2000000000
            },
            "endDate": {
              "type": "string",
              "description": "End date of the mandate",
              "example": "02012006"
            },
            "expireAfter": {
              "type": "integer",
              "description": "Number of seconds after which the mandate creation request will expire",
              "default": 120,
              "example": 120,
              "minimum": 120,
              "maximum": 7776000
            },
            "id": {
              "type": "string",
              "description": "Id of the mandate request resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "intentLink": {
              "type": "string",
              "example": "upi://mandate?pa=deku040920232@okokaxis&validitystart=31121995&validityend=30122025&am=901.00&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=01&purpose=14&rev=N&block=N&txnType=update&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou"
            },
            "mandateId": {
              "type": "string",
              "description": "Id of the mandate resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantId": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "Merchant reference id of the mandate",
              "example": "ABC1234789",
              "minLength": 5,
              "maxLength": 50
            },
            "mode": {
              "type": "string",
              "example": "qr",
              "enum": [
                "collect",
                "qr",
                "intent"
              ]
            },
            "status": {
              "type": "string",
              "example": "pending",
              "enum": [
                "pending",
                "initiated",
                "success",
                "failed"
              ]
            },
            "txnId": {
              "type": "string",
              "description": "NPCI transaction id",
              "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 35,
              "maxLength": 35
            },
            "umn": {
              "type": "string",
              "description": "Unique mandate number",
              "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
            }
          },
          "example": {
            "amountLimit": 1000,
            "endDate": "02012006",
            "expireAfter": 120,
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "intentLink": "upi://mandate?pa=deku040920232@okokaxis&validitystart=31121995&validityend=30122025&am=901.00&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=01&purpose=14&rev=N&block=N&txnType=update&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
            "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "ABC1234789",
            "mode": "qr",
            "status": "pending",
            "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "UpdateStatusRequestBody": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "updated status of the VPA",
              "example": "active",
              "enum": [
                "active",
                "inactive"
              ]
            }
          },
          "example": {
            "status": "active"
          },
          "required": [
            "status"
          ]
        },
        "UpdateTxnStatusRequestBody": {
          "type": "object",
          "properties": {
            "deactivateAllProductInstances": {
              "type": "boolean",
              "description": "indicates whether all product instances associated to merchant are to be disabled if transaction status is updated to inactive",
              "example": true
            },
            "transactionStatus": {
              "type": "string",
              "description": "Current Transaction Status of the Merchant",
              "example": "active",
              "enum": [
                "active",
                "inactive"
              ]
            }
          },
          "example": {
            "deactivateAllProductInstances": false,
            "transactionStatus": "active"
          },
          "required": [
            "transactionStatus"
          ]
        },
        "VerifyCustomerVpaResponse": {
          "type": "object",
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the verification request",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "customerName": {
              "type": "string",
              "description": "remitter's name as per NPCI",
              "example": "deku"
            },
            "customerVpa": {
              "type": "string",
              "description": "remitter's VPA to be verified",
              "example": "ram@okhdfc"
            },
            "id": {
              "type": "string",
              "description": "ID of the request",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantId": {
              "type": "string",
              "description": "id associated with the merchant",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "reference id in the merchant's system",
              "example": "1240689979139556557",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            },
            "status": {
              "type": "string",
              "description": "status defining the validity of the customer vpa",
              "example": "pending",
              "enum": [
                "pending",
                "valid",
                "invalid",
                "failed"
              ]
            }
          },
          "example": {
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "customerName": "deku",
            "customerVpa": "ram@okhdfc",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "1240689979139556557",
            "status": "pending"
          }
        },
        "VerifyRequestBody": {
          "type": "object",
          "properties": {
            "customerVpa": {
              "type": "string",
              "description": "remitter's VPA to be verified",
              "example": "dekup@okokaxis"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "reference id in the merchant's system",
              "example": "1240689979139556557",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            }
          },
          "example": {
            "customerVpa": "dekup@okokaxis",
            "merchantReferenceId": "1240689979139556557"
          },
          "required": [
            "customerVpa"
          ]
        },
        "VpaResponse": {
          "type": "object",
          "properties": {
            "addressProvider": {
              "type": "string",
              "description": "address provider providing the vpa",
              "example": "Axis"
            },
            "createdAt": {
              "type": "string",
              "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
              "example": "2023-09-04 12:08:20.202644 +0530 IST",
              "format": "date-time"
            },
            "id": {
              "type": "string",
              "description": "id of the resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantId": {
              "type": "string",
              "description": "id associated with the merchant",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "merchantReferenceId": {
              "type": "string",
              "description": "reference id in the merchant's system",
              "example": "1240689979139556557",
              "pattern": "^[a-zA-Z0-9]*$",
              "minLength": 1,
              "maxLength": 50
            },
            "status": {
              "type": "string",
              "description": "indicates the validity of vpa",
              "example": "active",
              "enum": [
                "active",
                "inactive"
              ]
            },
            "vpa": {
              "type": "string",
              "description": "VPA that is created / updated",
              "example": "deku@okokaxis"
            }
          },
          "example": {
            "addressProvider": "Axis",
            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantReferenceId": "1240689979139556557",
            "status": "active",
            "vpa": "deku@okokaxis"
          }
        }
      },
      "securitySchemes": {
        "jwt_header_Authorization": {
          "type": "http",
          "description": "Secures endpoint by requiring a valid JWT token.",
          "scheme": "bearer"
        }
      }
    },
    "tags": [
      {
        "name": "aggregator",
        "description": "Aggregator services handle aggregator config creation, updation"
      },
      {
        "name": "collect",
        "description": "The collect service handles collect request related operations"
      },
      {
        "name": "customer-vpa",
        "description": "The customer-vpa service handles customer / payer vpa verification related operations"
      },
      {
        "name": "payment-link",
        "description": "The payment-link service handles qr / payment-link related operations"
      },
      {
        "name": "tpv"
      },
      {
        "name": "vpa",
        "description": "The vpa service handles vpa related operations"
      },
      {
        "name": "disputes",
        "description": "The dispute service handles disputes related operations"
      },
      {
        "name": "mandates",
        "description": "The mandates service exposes methods to maintain the life cycle of a mandate"
      },
      {
        "name": "merchant",
        "description": "The merchant service handles merchant related operations"
      },
      {
        "name": "payments",
        "description": "The payments service handles payment related operations"
      },
      {
        "name": "refund",
        "description": "The refund service handles refund related operations"
      }
    ]
  }
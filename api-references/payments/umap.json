{
    "openapi": "3.0.3",
    "info": {
        "title": "Product Layer API",
        "description": "Core API Server",
        "version": "1.0"
    },
    "servers": [
        {
            "url": "http://0.0.0.0:8084"
        }
    ],
    "paths": {
        "/api/v1/aggregators": {
            "post": {
                "tags": ["aggregator"],
                "summary": "create aggregator",
                "description": "Create aggregator config",
                "operationId": "aggregator#create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRequestBody"
                            },
                            "example": {
                                "aggAccountId": "89efe162-8bca-4a18-a9bf-3ff80738e726",
                                "captureKyc": false,
                                "merchantVpaHandles": ["okaxis", "okicici"],
                                "name": "Pinelabs",
                                "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "parentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "paymentModes": ["savings", "lite", "erupi"],
                                "products": ["deeplinks", "sqr", "mqr"],
                                "whitelistVpa": false
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateAggConfigResponse"
                                },
                                "example": {
                                    "aggAccountId": "89efe162-8bca-4a18-a9bf-3ff80738e726",
                                    "captureKyc": false,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantVpaHandles": ["okaxis", "okicici"],
                                    "name": "Pinelabs",
                                    "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "parentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "paymentModes": [
                                        "savings",
                                        "lite",
                                        "erupi"
                                    ],
                                    "products": ["deeplinks", "sqr", "mqr"],
                                    "status": "inactive",
                                    "whitelistVpa": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt_header_Authorization": []
                    }
                ]
            }
        },
        "/api/v1/aggregators/wrapper/merchants": {
            "post": {
                "tags": ["merchant"],
                "summary": "createMerchantWrapper merchant",
                "description": "Wrapper API to create merchant entity in single go",
                "operationId": "merchant#createMerchantWrapper",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMerchantWrapperRequestBody"
                            },
                            "example": {
                                "acceptDeemedTxns": true,
                                "aggregatorAccountId": "328a928f-e277-4798-8e28-4b19a61a8a23",
                                "businessName": "deku",
                                "businessType": "PUBLIC",
                                "franchiseName": "deku",
                                "genre": "ONLINE",
                                "legalName": "deku",
                                "mcc": "5432",
                                "merchantName": "deku",
                                "merchantType": "small",
                                "onboardingType": "bank",
                                "settlement": {
                                    "cycles": [
                                        {
                                            "endTime": "2002-05-29T00:41:13Z",
                                            "settlementTime": "1998-11-17T16:58:52Z",
                                            "startTime": "2015-10-28T14:14:02Z"
                                        },
                                        {
                                            "endTime": "2002-05-29T00:41:13Z",
                                            "settlementTime": "1998-11-17T16:58:52Z",
                                            "startTime": "2015-10-28T14:14:02Z"
                                        }
                                    ],
                                    "frequency": "TPlusOne",
                                    "splitsEnabled": true,
                                    "type": "Net"
                                },
                                "settlementsEnabled": true,
                                "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MerchantResponse"
                                },
                                "example": {
                                    "acceptDeemedTxns": true,
                                    "addressProviderId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "businessName": "deku",
                                    "businessType": "PROPRIETARY",
                                    "callbackURLsEnabled": true,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "documentStatus": "APPROVED",
                                    "franchiseName": "deku",
                                    "genre": "ONLINE",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "legalName": "deku",
                                    "mcc": "5432",
                                    "merchantName": "deku",
                                    "merchantType": "small",
                                    "onboardingType": "bank",
                                    "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "settlement": {
                                        "cycles": [
                                            {
                                                "endTime": "1988-08-11T09:04:11Z",
                                                "settlementTime": "2008-05-03T21:14:44Z",
                                                "startTime": "2008-10-03T03:41:32Z"
                                            },
                                            {
                                                "endTime": "1988-08-11T09:04:11Z",
                                                "settlementTime": "2008-05-03T21:14:44Z",
                                                "startTime": "2008-10-03T03:41:32Z"
                                            }
                                        ],
                                        "frequency": "TPlusOne",
                                        "splitsEnabled": true,
                                        "type": "Net"
                                    },
                                    "settlementsEnabled": false,
                                    "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
                                    "transactionStatus": "active"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt_header_Authorization": []
                    }
                ]
            }
        },
        "/api/v1/merchants/{id}": {
            "get": {
                "tags": ["merchant"],
                "summary": "fetchById merchant",
                "description": "Fetch Merchant By Id",
                "operationId": "merchant#fetchById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the resource",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id of the resource",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MerchantResponse"
                                },
                                "example": {
                                    "acceptDeemedTxns": true,
                                    "addressProviderId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "businessName": "deku",
                                    "businessType": "PROPRIETARY",
                                    "callbackURLsEnabled": true,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "documentStatus": "APPROVED",
                                    "franchiseName": "deku",
                                    "genre": "ONLINE",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "legalName": "deku",
                                    "mcc": "5432",
                                    "merchantName": "deku",
                                    "merchantType": "small",
                                    "onboardingType": "bank",
                                    "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "settlement": {
                                        "cycles": [
                                            {
                                                "endTime": "1988-08-11T09:04:11Z",
                                                "settlementTime": "2008-05-03T21:14:44Z",
                                                "startTime": "2008-10-03T03:41:32Z"
                                            },
                                            {
                                                "endTime": "1988-08-11T09:04:11Z",
                                                "settlementTime": "2008-05-03T21:14:44Z",
                                                "startTime": "2008-10-03T03:41:32Z"
                                            }
                                        ],
                                        "frequency": "TPlusOne",
                                        "splitsEnabled": true,
                                        "type": "Net"
                                    },
                                    "settlementsEnabled": false,
                                    "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
                                    "transactionStatus": "active"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt_header_Authorization": []
                    }
                ]
            }
        },
        "/api/v1/merchants/{id}/config": {
            "put": {
                "tags": ["merchant"],
                "summary": "updateConfig merchant",
                "description": "Update Merchant Configs / Settings",
                "operationId": "merchant#updateConfig",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the resource",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id of the resource",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "examples": {
                            "default": {
                                "summary": "default",
                                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateConfigRequestBody"
                            },
                            "example": {
                                "acceptDeemedTxns": true,
                                "callbackURLsEnabled": true
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MerchantResponse"
                                },
                                "example": {
                                    "acceptDeemedTxns": true,
                                    "addressProviderId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "businessName": "deku",
                                    "businessType": "PROPRIETARY",
                                    "callbackURLsEnabled": true,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "documentStatus": "APPROVED",
                                    "franchiseName": "deku",
                                    "genre": "ONLINE",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "legalName": "deku",
                                    "mcc": "5432",
                                    "merchantName": "deku",
                                    "merchantType": "small",
                                    "onboardingType": "bank",
                                    "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "settlement": {
                                        "cycles": [
                                            {
                                                "endTime": "1988-08-11T09:04:11Z",
                                                "settlementTime": "2008-05-03T21:14:44Z",
                                                "startTime": "2008-10-03T03:41:32Z"
                                            },
                                            {
                                                "endTime": "1988-08-11T09:04:11Z",
                                                "settlementTime": "2008-05-03T21:14:44Z",
                                                "startTime": "2008-10-03T03:41:32Z"
                                            }
                                        ],
                                        "frequency": "TPlusOne",
                                        "splitsEnabled": true,
                                        "type": "Net"
                                    },
                                    "settlementsEnabled": false,
                                    "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
                                    "transactionStatus": "active"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt_header_Authorization": []
                    }
                ]
            }
        },
        "/api/v1/merchants/{id}/txn-status": {
            "put": {
                "tags": ["merchant"],
                "summary": "updateTxnStatus merchant",
                "description": "Update Merchant Transaction Status",
                "operationId": "merchant#updateTxnStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the resource",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id of the resource",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTxnStatusRequestBody"
                            },
                            "example": {
                                "deactivateAllProductInstances": true,
                                "transactionStatus": "active"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MerchantResponse"
                                },
                                "example": {
                                    "acceptDeemedTxns": true,
                                    "addressProviderId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "businessName": "deku",
                                    "businessType": "PROPRIETARY",
                                    "callbackURLsEnabled": true,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "documentStatus": "APPROVED",
                                    "franchiseName": "deku",
                                    "genre": "ONLINE",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "legalName": "deku",
                                    "mcc": "5432",
                                    "merchantName": "deku",
                                    "merchantType": "small",
                                    "onboardingType": "bank",
                                    "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "settlement": {
                                        "cycles": [
                                            {
                                                "endTime": "1988-08-11T09:04:11Z",
                                                "settlementTime": "2008-05-03T21:14:44Z",
                                                "startTime": "2008-10-03T03:41:32Z"
                                            },
                                            {
                                                "endTime": "1988-08-11T09:04:11Z",
                                                "settlementTime": "2008-05-03T21:14:44Z",
                                                "startTime": "2008-10-03T03:41:32Z"
                                            }
                                        ],
                                        "frequency": "TPlusOne",
                                        "splitsEnabled": true,
                                        "type": "Net"
                                    },
                                    "settlementsEnabled": false,
                                    "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
                                    "transactionStatus": "active"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Forbidden response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt_header_Authorization": []
                    }
                ]
            }
        },
        "/api/v1/merchants/collect": {
            "post": {
                "tags": ["collect"],
                "summary": "create collect",
                "description": "Create collect request",
                "operationId": "collect#create",
                "parameters": [
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRequestBody2"
                            },
                            "example": {
                                "amount": 10000,
                                "currency": "INR",
                                "customerVpa": "dekup@okhdfc",
                                "expireAfter": 2,
                                "merchantReferenceId": "1240689979139556557",
                                "merchantVpa": "deku@okokaxis",
                                "metadata": {
                                    "invoicenumber": "INV-21-12-009"
                                },
                                "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "transactionNote": "testcollect"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateCollectResponse"
                                },
                                "example": {
                                    "amount": 10000,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "currency": "INR",
                                    "customerVpa": "dekup@okhdfc",
                                    "expireAfter": 2,
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "1240689979139556557",
                                    "merchantVpa": "deku@okokaxis",
                                    "metadata": {
                                        "invoicenumber": "INV-21-12-009"
                                    },
                                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "refId": "1240689979139556558",
                                    "status": "active",
                                    "transactionNote": "testcollect"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Forbidden response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/collect/{id}": {
            "get": {
                "tags": ["collect"],
                "summary": "fetchById collect",
                "description": "Fetch collect request by ID",
                "operationId": "collect#fetchById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the resource",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id of the resource",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FetchCollectResponse"
                                },
                                "example": {
                                    "amount": 10000,
                                    "closedAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "currency": "INR",
                                    "customerVpa": "dekup@okhdfc",
                                    "expireAfter": 2,
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "1240689979139556557",
                                    "merchantVpa": "deku@okokaxis",
                                    "metadata": {
                                        "invoicenumber": "INV-21-12-009"
                                    },
                                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "reason": {
                                        "collectRequestClosureReason": "unable-to-fulfill-request",
                                        "npciErrCode": "YG"
                                    },
                                    "refId": "1240689979139556558",
                                    "status": "active",
                                    "transactionNote": "testcollect"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Forbidden response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/customer-vpas/{id}": {
            "get": {
                "tags": ["customer-vpa"],
                "summary": "fetchById customer-vpa",
                "description": "Fetch customer vpa by ID",
                "operationId": "customer-vpa#fetchById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the request",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "ID of the request",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerVpaResponse"
                                },
                                "example": {
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "customerName": "ram",
                                    "customerVpa": "ram@okhdfc",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "1240689979139556557",
                                    "status": "pending"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Forbidden response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/customer-vpas/verify": {
            "post": {
                "tags": ["customer-vpa"],
                "summary": "verify customer-vpa",
                "description": "Verify customer vpa",
                "operationId": "customer-vpa#verify",
                "parameters": [
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VerifyRequestBody"
                            },
                            "example": {
                                "customerVpa": "dekup@okokaxis",
                                "merchantReferenceId": "1240689979139556557"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerVpaResponse"
                                },
                                "example": {
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "customerName": "ram",
                                    "customerVpa": "ram@okhdfc",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "1240689979139556557",
                                    "status": "pending"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Forbidden response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/disputes/{disputeId}": {
            "get": {
                "tags": ["disputes"],
                "summary": "fetchDisputeById disputes",
                "description": "fetch Dispute By Id",
                "operationId": "disputes#fetchDisputeById",
                "parameters": [
                    {
                        "name": "disputeId",
                        "in": "path",
                        "description": "Dispute id of the dispute",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Dispute id of the dispute",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "Merchant id of the dispute",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Merchant id of the dispute",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateDisputeStatusResponse"
                                },
                                "example": {
                                    "amount": 100,
                                    "currency": "INR",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "1240689979139556557",
                                    "reason": "Dispute accepted by merchant",
                                    "rrn": "123456781234",
                                    "status": "rejected",
                                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/disputes/{disputeId}/status": {
            "put": {
                "tags": ["disputes"],
                "summary": "updateDisputeStatus disputes",
                "description": "update Dispute Status",
                "operationId": "disputes#updateDisputeStatus",
                "parameters": [
                    {
                        "name": "disputeId",
                        "in": "path",
                        "description": "Dispute id of the dispute",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Dispute id of the dispute",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "Merchant id of the dispute",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Merchant id of the dispute",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateDisputeStatusRequestBody"
                            },
                            "example": {
                                "reason": "Dispute accepted by merchant",
                                "status": "rejected"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateDisputeStatusResponse"
                                },
                                "example": {
                                    "amount": 100,
                                    "currency": "INR",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAW",
                                    "merchantReferenceId": "1240689979139556557",
                                    "reason": "Dispute accepted by merchant",
                                    "rrn": "123456781234",
                                    "status": "rejected",
                                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/info": {
            "post": {
                "tags": ["merchant"],
                "summary": "createWithInfo merchant",
                "description": "Create Merchant With Info",
                "operationId": "merchant#createWithInfo",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateWithInfoRequestBody"
                            },
                            "example": {
                                "acceptDeemedTxns": true,
                                "aggregatorAccountId": "328a928f-e277-4798-8e28-4b19a61a8a23",
                                "businessName": "deku",
                                "businessType": "PUBLIC",
                                "franchiseName": "deku",
                                "genre": "ONLINE",
                                "legalName": "deku",
                                "mcc": "5432",
                                "merchantName": "deku",
                                "merchantType": "small",
                                "onboardingType": "bank",
                                "settlement": {
                                    "cycles": [
                                        {
                                            "endTime": "2002-05-29T00:41:13Z",
                                            "settlementTime": "1998-11-17T16:58:52Z",
                                            "startTime": "2015-10-28T14:14:02Z"
                                        },
                                        {
                                            "endTime": "2002-05-29T00:41:13Z",
                                            "settlementTime": "1998-11-17T16:58:52Z",
                                            "startTime": "2015-10-28T14:14:02Z"
                                        }
                                    ],
                                    "frequency": "TPlusOne",
                                    "splitsEnabled": true,
                                    "type": "Net"
                                },
                                "settlementsEnabled": false,
                                "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MerchantResponse"
                                },
                                "example": {
                                    "acceptDeemedTxns": true,
                                    "addressProviderId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "businessName": "deku",
                                    "businessType": "PROPRIETARY",
                                    "callbackURLsEnabled": true,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "documentStatus": "APPROVED",
                                    "franchiseName": "deku",
                                    "genre": "ONLINE",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "legalName": "deku",
                                    "mcc": "5432",
                                    "merchantName": "deku",
                                    "merchantType": "small",
                                    "onboardingType": "bank",
                                    "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "settlement": {
                                        "cycles": [
                                            {
                                                "endTime": "1988-08-11T09:04:11Z",
                                                "settlementTime": "2008-05-03T21:14:44Z",
                                                "startTime": "2008-10-03T03:41:32Z"
                                            },
                                            {
                                                "endTime": "1988-08-11T09:04:11Z",
                                                "settlementTime": "2008-05-03T21:14:44Z",
                                                "startTime": "2008-10-03T03:41:32Z"
                                            }
                                        ],
                                        "frequency": "TPlusOne",
                                        "splitsEnabled": true,
                                        "type": "Net"
                                    },
                                    "settlementsEnabled": false,
                                    "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
                                    "transactionStatus": "active"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt_header_Authorization": []
                    }
                ]
            }
        },
        "/api/v1/merchants/mandates": {
            "post": {
                "tags": ["mandates"],
                "summary": "create mandates",
                "description": "Create a mandate resource",
                "operationId": "mandates#create",
                "parameters": [
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "Id of the merchant who is trying create the mandate",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Id of the merchant who is trying create the mandate",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRequestBody6"
                            },
                            "example": {
                                "allowMultipleDebit": true,
                                "amount": 1000,
                                "amountRule": "max",
                                "autoExecute": true,
                                "autoPreNotify": true,
                                "blockFunds": true,
                                "creationMode": "qr",
                                "currency": "INR",
                                "customerRevocable": false,
                                "customerVpa": "ram@axis",
                                "endDate": "02012008",
                                "expireAfter": 120,
                                "firstExecutionAmount": 1000,
                                "frequency": "monthly",
                                "initiationMode": "04",
                                "maxAmountLimit": 1000,
                                "merchantReferenceId": "ABC1234789",
                                "merchantVpa": "acme.corp@axis",
                                "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "purpose": "14",
                                "recurrenceRule": "on",
                                "recurrenceValue": 1,
                                "shareToPayee": false,
                                "startDate": "02012006",
                                "transactionNote": "Transaction note"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateMandateResponse"
                                },
                                "example": {
                                    "allowMultipleDebit": true,
                                    "amount": 1000,
                                    "amountRule": "max",
                                    "autoExecute": true,
                                    "autoPreNotify": true,
                                    "blockFunds": true,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "creationMode": "qr",
                                    "currency": "INR",
                                    "customerRevocable": false,
                                    "customerVpa": "ram@axis",
                                    "endDate": "02012008",
                                    "expireAfter": 120,
                                    "firstExecutionAmount": 1000,
                                    "frequency": "monthly",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "initiationMode": "04",
                                    "intentLink": "upi://mandate?pa=deku040920232@okokaxis&pn=merchant-1&validitystart=31121995&validityend=31121996&am=100.00&amrule=MAX&recur=one%20time&recurvalue=0&recurtype=on&tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI&cu=INR&mc=1234&mode=04&purpose=14&rev=N&share=Y&qrexpire=04092023&block=N&orgid=000000&version=2.0&txnType=create&tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                                    "maxAmountLimit": 1000,
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "ABC1234789",
                                    "merchantVpa": "acme.corp@axis",
                                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "purpose": "14",
                                    "recurrenceRule": "on",
                                    "recurrenceValue": 1,
                                    "shareToPayee": false,
                                    "startDate": "02012006",
                                    "status": "pending",
                                    "transactionNote": "Transaction note",
                                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/mandates/{mandateId}": {
            "get": {
                "tags": ["mandates"],
                "summary": "fetchById mandates",
                "description": "Fetch a mandate resource by Id",
                "operationId": "mandates#fetchById",
                "parameters": [
                    {
                        "name": "mandateId",
                        "in": "path",
                        "description": "Id of the mandate that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Id of the mandate that needs to be fetched",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "Id of the merchant who is trying create the mandate",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Id of the merchant who is trying create the mandate",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FetchMandateResponse"
                                },
                                "example": {
                                    "allowMultipleDebit": true,
                                    "amount": 1000,
                                    "amountRule": "max",
                                    "autoExecute": true,
                                    "autoPreNotify": true,
                                    "blockFunds": true,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "creationMode": "qr",
                                    "currency": "INR",
                                    "customerRevocable": false,
                                    "customerVpa": "ram@axis",
                                    "endDate": "02012008",
                                    "expireAfter": 120,
                                    "firstExecutionAmount": 1000,
                                    "frequency": "monthly",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "initiationMode": "04",
                                    "maxAmountLimit": 1000,
                                    "merchantId": "Tempora rem nam sit eum.",
                                    "merchantReferenceId": "ABC1234789",
                                    "merchantVpa": "acme.corp@axis",
                                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "purpose": "14",
                                    "reason": {
                                        "errCode": "mandate-has-expired",
                                        "npciErrCode": "QD",
                                        "npciErrDesc": "MANDATE HAS EXPIRED"
                                    },
                                    "recurrenceRule": "on",
                                    "recurrenceValue": 1,
                                    "shareToPayee": false,
                                    "startDate": "02012006",
                                    "status": "pending",
                                    "transactionNote": "Transaction note",
                                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/mandates/{mandateId}/execute": {
            "post": {
                "tags": ["mandates"],
                "summary": "execute mandates",
                "description": "Execute a mandate resource",
                "operationId": "mandates#execute",
                "parameters": [
                    {
                        "name": "mandateId",
                        "in": "path",
                        "description": "Id of the mandate that needs to be executed",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Id of the mandate that needs to be executed",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "Id of the merchant who is trying create the mandate",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Id of the merchant who is trying create the mandate",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExecuteRequestBody"
                            },
                            "example": {
                                "amount": 1000,
                                "merchantReferenceId": "ABC1234789",
                                "remark": "Transaction for car loan emi",
                                "sequenceNumber": 1,
                                "umn": "123456789"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MandateExecutionResponse"
                                },
                                "example": {
                                    "amount": 1000,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "ABC1234789",
                                    "reason": {
                                        "errCode": "mandate-has-expired",
                                        "npciErrCode": "QD",
                                        "npciErrDesc": "MANDATE HAS EXPIRED"
                                    },
                                    "remark": "Transaction for car loan emi",
                                    "sequenceNumber": 1,
                                    "status": "live",
                                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/mandates/{mandateId}/modify": {
            "put": {
                "tags": ["mandates"],
                "summary": "modify mandates",
                "description": "Modify a mandate resource",
                "operationId": "mandates#modify",
                "parameters": [
                    {
                        "name": "mandateId",
                        "in": "path",
                        "description": "Id of the mandate that needs to be modified",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Id of the mandate that needs to be modified",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "Id of the merchant who created the mandate",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Id of the merchant who created the mandate",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModifyRequestBody"
                            },
                            "example": {
                                "amountLimit": 1000,
                                "endDate": "02012006",
                                "expireAfter": 120,
                                "merchantReferenceId": "ABC1234789"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateMandateResponse"
                                },
                                "example": {
                                    "amountLimit": 1000,
                                    "endDate": "02012006",
                                    "expireAfter": 120,
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "intentLink": "upi://mandate?pa=deku040920232@okokaxis&validitystart=31121995&validityend=30122025&am=901.00&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=01&purpose=14&rev=N&block=N&txnType=update&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                                    "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "ABC1234789",
                                    "mode": "qr",
                                    "status": "pending",
                                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/mandates/{mandateId}/notify": {
            "post": {
                "tags": ["mandates"],
                "summary": "notify mandates",
                "description": "Send pre-debit notification for a mandate resource",
                "operationId": "mandates#notify",
                "parameters": [
                    {
                        "name": "mandateId",
                        "in": "path",
                        "description": "Id of the mandate that needs to be notified",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Id of the mandate that needs to be notified",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "Merchant id of the mandate",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Merchant id of the mandate",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "examples": {
                            "default": {
                                "summary": "default",
                                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotifyRequestBody"
                            },
                            "example": {
                                "amount": 1000,
                                "executionDate": "02012006",
                                "merchantReferenceId": "ABC1234789",
                                "sequenceNumber": 1,
                                "umn": "setumandate1234789@ybl"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MandatePreDebitNotificationResponse"
                                },
                                "example": {
                                    "amount": 1000,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "executionDate": "02012006",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "ABC1234789",
                                    "reason": {
                                        "errCode": "mandate-has-expired",
                                        "npciErrCode": "QD",
                                        "npciErrDesc": "MANDATE HAS EXPIRED"
                                    },
                                    "sequenceNumber": 1,
                                    "status": "success",
                                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/mandates/{mandateId}/revoke": {
            "put": {
                "tags": ["mandates"],
                "summary": "revoke mandates",
                "description": "Revoke a mandate resource",
                "operationId": "mandates#revoke",
                "parameters": [
                    {
                        "name": "mandateId",
                        "in": "path",
                        "description": "Id of the mandate that needs to be revoked",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Id of the mandate that needs to be revoked",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "Id of the merchant who created the mandate",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Id of the merchant who created the mandate",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RevokeRequestBody"
                            },
                            "example": {
                                "expireAfter": 120,
                                "merchantReferenceId": "ABC1234789"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RevokeMandateResponse"
                                },
                                "example": {
                                    "expireAfter": 120,
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "intentLink": "upi://mandate?pa=deku040920232@okokaxis&validitystart=1995-12-31&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=04&purpose=14&rev=N&block=N&txnType=revoke&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETE9q1rQXW3wXHzDdaqJTDGHHTBkJ0Segc",
                                    "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "ABC1234789",
                                    "mode": "intent",
                                    "status": "pending",
                                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/payment-links": {
            "post": {
                "tags": ["payment-link"],
                "summary": "create payment-link",
                "description": "Create payment-link",
                "operationId": "payment-link#create",
                "parameters": [
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRequestBody3"
                            },
                            "example": {
                                "amount": 10000,
                                "currency": "INR",
                                "expiryDate": "2023-09-04 12:08:20.202644 +0530 IST",
                                "merchantReferenceId": "1240689979139556557",
                                "merchantVpa": "deku@okokaxis",
                                "metadata": {
                                    "invoicenumber": "INV-21-12-009"
                                },
                                "minAmount": 10000,
                                "paymentType": "pay_single",
                                "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "transactionNote": "testpay"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateDeeplinkResponse"
                                },
                                "example": {
                                    "amount": 10000,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "currency": "INR",
                                    "expiryDate": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "1240689979139556557",
                                    "merchantVpa": "deku@okokaxis",
                                    "metadata": {
                                        "invoicenumber": "INV-21-12-009"
                                    },
                                    "minAmount": 10000,
                                    "paymentType": "pay_single",
                                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "refId": "1240689979139556558",
                                    "shortCode": "Np3KnBCM8Om0",
                                    "shortLink": "bills.pe/Np3KnBCM8Om0",
                                    "status": "active",
                                    "transactionNote": "testpay"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Forbidden response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/payment-links/{id}": {
            "get": {
                "tags": ["payment-link"],
                "summary": "fetchById payment-link",
                "description": "Fetch payment-link by id",
                "operationId": "payment-link#fetchById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the resource",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id of the resource",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeeplinkResponse"
                                },
                                "example": {
                                    "amount": 10000,
                                    "closedAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "currency": "INR",
                                    "expiryDate": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "1240689979139556557",
                                    "merchantVpa": "deku@okokaxis",
                                    "metadata": {
                                        "invoicenumber": "INV-21-12-009"
                                    },
                                    "minAmount": 10000,
                                    "paymentType": "pay_single",
                                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "reason": {
                                        "npciErrCode": "YG",
                                        "paymentLinkClosureReason": "unable-to-fulfill-request"
                                    },
                                    "refId": "1240689979139556558",
                                    "shortCode": "Np3KnBCM8Om0",
                                    "shortLink": "bills.pe/Np3KnBCM8Om0",
                                    "status": "active",
                                    "transactionNote": "testpay"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Forbidden response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/payments/{id}": {
            "get": {
                "tags": ["payments"],
                "summary": "fetchById payments",
                "description": "Fetch payment by id",
                "operationId": "payments#fetchById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the resource",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id of the resource",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FetchPaymentResponse"
                                },
                                "example": {
                                    "amount": 10000,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "currency": "INR",
                                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                                    "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "reason": {
                                        "failureReason": "unable-to-fulfill-request",
                                        "npciErrCode": "YG"
                                    },
                                    "refId": "1240689979139556558",
                                    "rrn": "124068997913",
                                    "status": "initiated",
                                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                                    "txnNote": "testpay"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/payments/product-instances/{id}/history": {
            "get": {
                "tags": ["payments"],
                "summary": "fetchHistoryByProductInstanceId payments",
                "description": "Fetch latest 5 payments by product instance id",
                "operationId": "payments#fetchHistoryByProductInstanceId",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "this is the deeplink / collect request / mandate id associated with the payment",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "this is the deeplink / collect request / mandate id associated with the payment",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FetchPaymentListResponse"
                                },
                                "example": {
                                    "payments": [
                                        {
                                            "amount": 10000,
                                            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                            "currency": "INR",
                                            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                                            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                                            "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "reason": {
                                                "failureReason": "unable-to-fulfill-request",
                                                "npciErrCode": "YG"
                                            },
                                            "refId": "1240689979139556558",
                                            "rrn": "124068997913",
                                            "status": "initiated",
                                            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                                            "txnNote": "testpay"
                                        },
                                        {
                                            "amount": 10000,
                                            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                            "currency": "INR",
                                            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                                            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                                            "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "reason": {
                                                "failureReason": "unable-to-fulfill-request",
                                                "npciErrCode": "YG"
                                            },
                                            "refId": "1240689979139556558",
                                            "rrn": "124068997913",
                                            "status": "initiated",
                                            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                                            "txnNote": "testpay"
                                        },
                                        {
                                            "amount": 10000,
                                            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                            "currency": "INR",
                                            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                                            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                                            "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "reason": {
                                                "failureReason": "unable-to-fulfill-request",
                                                "npciErrCode": "YG"
                                            },
                                            "refId": "1240689979139556558",
                                            "rrn": "124068997913",
                                            "status": "initiated",
                                            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                                            "txnNote": "testpay"
                                        },
                                        {
                                            "amount": 10000,
                                            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                            "currency": "INR",
                                            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                                            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                                            "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                            "reason": {
                                                "failureReason": "unable-to-fulfill-request",
                                                "npciErrCode": "YG"
                                            },
                                            "refId": "1240689979139556558",
                                            "rrn": "124068997913",
                                            "status": "initiated",
                                            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                                            "txnNote": "testpay"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/payments/product-instances/{id}/last": {
            "get": {
                "tags": ["payments"],
                "summary": "fetchLastByProductInstanceId payments",
                "description": "Fetch last payment by product instance id",
                "operationId": "payments#fetchLastByProductInstanceId",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "this is the deeplink / collect request / mandate id associated with the payment",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "this is the deeplink / collect request / mandate id associated with the payment",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FetchPaymentResponse"
                                },
                                "example": {
                                    "amount": 10000,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "currency": "INR",
                                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                                    "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "reason": {
                                        "failureReason": "unable-to-fulfill-request",
                                        "npciErrCode": "YG"
                                    },
                                    "refId": "1240689979139556558",
                                    "rrn": "124068997913",
                                    "status": "initiated",
                                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                                    "txnNote": "testpay"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/product-configs": {
            "post": {
                "tags": ["product-config"],
                "summary": "create product-config",
                "description": "Create Product Config",
                "operationId": "product-config#create",
                "parameters": [
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRequestBody4"
                            },
                            "example": {
                                "merchantReferenceId": "customer-ref-id",
                                "merchantVpa": "deku@okokaxis",
                                "productInstanceType": "pay_single"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductConfigResponse"
                                },
                                "example": {
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "customer-ref-id",
                                    "merchantVpa": "deku@okokaxis",
                                    "productInstanceType": "pay_single",
                                    "status": "active"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/product-configs/{id}": {
            "get": {
                "tags": ["product-config"],
                "summary": "fetchById product-config",
                "description": "Fetch Product Config by ID",
                "operationId": "product-config#fetchById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the resource",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id of the resource",
                            "example": "1240689979139556557"
                        },
                        "example": "1240689979139556557"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductConfigResponse"
                                },
                                "example": {
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "customer-ref-id",
                                    "merchantVpa": "deku@okokaxis",
                                    "productInstanceType": "pay_single",
                                    "status": "active"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/refunds": {
            "post": {
                "tags": ["refund"],
                "summary": "create refund",
                "description": "Create a refund",
                "operationId": "refund#create",
                "parameters": [
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "Id of the merchant who is creating the refund",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Id of the merchant who is creating the refund",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRequestBody7"
                            },
                            "example": {
                                "amount": 10000,
                                "currency": "INR",
                                "merchantReferenceId": "BILL12345",
                                "remarks": "Services not rendered",
                                "txnDate": "2023-09-04 12:08:20.202644 +0530 IST",
                                "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRefundResponse"
                                },
                                "example": {
                                    "amount": 10000,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "currency": "INR",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "BILL12345",
                                    "reason": {
                                        "errCode": "refund-disabled",
                                        "npciErrCode": "R21",
                                        "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                                    },
                                    "remarks": "Services not rendered",
                                    "status": "success",
                                    "txnDate": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Forbidden response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/refunds/{id}": {
            "get": {
                "tags": ["refund"],
                "summary": "fetchById refund",
                "description": "Fetch refund by ID",
                "operationId": "refund#fetchById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Refund id returned during the refund initiation request",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Refund id returned during the refund initiation request",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "Id of the merchant who created the refund",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Id of the merchant who created the refund",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRefundResponse"
                                },
                                "example": {
                                    "amount": 10000,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "currency": "INR",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "BILL12345",
                                    "reason": {
                                        "errCode": "refund-disabled",
                                        "npciErrCode": "R21",
                                        "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                                    },
                                    "remarks": "Services not rendered",
                                    "status": "success",
                                    "txnDate": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Forbidden response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/tpv": {
            "post": {
                "tags": ["tpv"],
                "summary": "createTPV tpv",
                "description": "Create TPV",
                "operationId": "tpv#createTPV",
                "parameters": [
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTPVRequestBody"
                            },
                            "example": {
                                "amount": 100,
                                "currency": "INR",
                                "expireAfter": 10,
                                "merchantReferenceId": "1240689979139556556",
                                "metadata": {
                                    "invoicenumber": "INV-21-12-009"
                                },
                                "minAmount": 100,
                                "primaryAccount": {
                                    "IFSC": "SBIN0000001",
                                    "accountName": "deku",
                                    "accountNumber": "1234567890"
                                },
                                "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAP",
                                "secondaryAccounts": [
                                    {
                                        "IFSC": "SBIN0000001",
                                        "accountName": "deku",
                                        "accountNumber": "1234567890"
                                    },
                                    {
                                        "IFSC": "SBIN0000001",
                                        "accountName": "deku",
                                        "accountNumber": "1234567890"
                                    }
                                ],
                                "transactionNote": "test transaction"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TPVResponse"
                                },
                                "example": {
                                    "amount": 100,
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "currency": "INR",
                                    "expireAfter": 10,
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAW",
                                    "merchantReferenceId": "1240689979139556556",
                                    "merchantVpa": "deku@okokaxis",
                                    "metadata": {
                                        "invoicenumber": "INV-21-12-009"
                                    },
                                    "minAmount": 100,
                                    "primaryAccount": {
                                        "IFSC": "SBIN0000001",
                                        "accountName": "deku",
                                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                        "maskedAccountNumber": "**** **** **** 7890",
                                        "requestId": "cjqml1f2e5ocq2mesej0"
                                    },
                                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAP",
                                    "refId": "1240689979139556558",
                                    "secondaryAccounts": [
                                        {
                                            "IFSC": "SBIN0000001",
                                            "accountName": "deku",
                                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "maskedAccountNumber": "**** **** **** 7890",
                                            "requestId": "cjqml1f2e5ocq2mesej0"
                                        },
                                        {
                                            "IFSC": "SBIN0000001",
                                            "accountName": "deku",
                                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "maskedAccountNumber": "**** **** **** 7890",
                                            "requestId": "cjqml1f2e5ocq2mesej0"
                                        }
                                    ],
                                    "shortCode": "Np3KnBCM8Om0",
                                    "shortLink": "bills.pe/Np3KnBCM8Om0",
                                    "status": "active",
                                    "transactionNote": "test transaction"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/tpv/{id}": {
            "get": {
                "tags": ["tpv"],
                "summary": "fetchTPV tpv",
                "description": "Fetch TPV",
                "operationId": "tpv#fetchTPV",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the resource",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id of the resource",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FetchTPVResponse"
                                },
                                "example": {
                                    "amount": 100,
                                    "closedAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "currency": "INR",
                                    "expireAfter": 10,
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAW",
                                    "merchantReferenceId": "1240689979139556556",
                                    "merchantVpa": "deku@okokaxis",
                                    "metadata": {
                                        "invoicenumber": "INV-21-12-009"
                                    },
                                    "minAmount": 100,
                                    "primaryAccount": {
                                        "IFSC": "SBIN0000001",
                                        "accountName": "deku",
                                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                        "maskedAccountNumber": "**** **** **** 7890",
                                        "requestId": "cjqml1f2e5ocq2mesej0"
                                    },
                                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAP",
                                    "reason": {
                                        "npciErrCode": "YG",
                                        "tpvClosureReason": "unable-to-fulfill-request"
                                    },
                                    "refId": "1240689979139556558",
                                    "secondaryAccounts": [
                                        {
                                            "IFSC": "SBIN0000001",
                                            "accountName": "deku",
                                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "maskedAccountNumber": "**** **** **** 7890",
                                            "requestId": "cjqml1f2e5ocq2mesej0"
                                        },
                                        {
                                            "IFSC": "SBIN0000001",
                                            "accountName": "deku",
                                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "maskedAccountNumber": "**** **** **** 7890",
                                            "requestId": "cjqml1f2e5ocq2mesej0"
                                        },
                                        {
                                            "IFSC": "SBIN0000001",
                                            "accountName": "deku",
                                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "maskedAccountNumber": "**** **** **** 7890",
                                            "requestId": "cjqml1f2e5ocq2mesej0"
                                        },
                                        {
                                            "IFSC": "SBIN0000001",
                                            "accountName": "deku",
                                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "maskedAccountNumber": "**** **** **** 7890",
                                            "requestId": "cjqml1f2e5ocq2mesej0"
                                        }
                                    ],
                                    "shortCode": "Np3KnBCM8Om0",
                                    "shortLink": "bills.pe/Np3KnBCM8Om0",
                                    "status": "closed",
                                    "transactionNote": "test transaction"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/tpv/{id}/expire": {
            "put": {
                "tags": ["tpv"],
                "summary": "expireTPV tpv",
                "description": "Expire TPV",
                "operationId": "tpv#expireTPV",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the resource",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id of the resource",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FetchTPVResponse"
                                },
                                "example": {
                                    "amount": 100,
                                    "closedAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "currency": "INR",
                                    "expireAfter": 10,
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAW",
                                    "merchantReferenceId": "1240689979139556556",
                                    "merchantVpa": "deku@okokaxis",
                                    "metadata": {
                                        "invoicenumber": "INV-21-12-009"
                                    },
                                    "minAmount": 100,
                                    "primaryAccount": {
                                        "IFSC": "SBIN0000001",
                                        "accountName": "deku",
                                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                        "maskedAccountNumber": "**** **** **** 7890",
                                        "requestId": "cjqml1f2e5ocq2mesej0"
                                    },
                                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAP",
                                    "reason": {
                                        "npciErrCode": "YG",
                                        "tpvClosureReason": "unable-to-fulfill-request"
                                    },
                                    "refId": "1240689979139556558",
                                    "secondaryAccounts": [
                                        {
                                            "IFSC": "SBIN0000001",
                                            "accountName": "deku",
                                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "maskedAccountNumber": "**** **** **** 7890",
                                            "requestId": "cjqml1f2e5ocq2mesej0"
                                        },
                                        {
                                            "IFSC": "SBIN0000001",
                                            "accountName": "deku",
                                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "maskedAccountNumber": "**** **** **** 7890",
                                            "requestId": "cjqml1f2e5ocq2mesej0"
                                        },
                                        {
                                            "IFSC": "SBIN0000001",
                                            "accountName": "deku",
                                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "maskedAccountNumber": "**** **** **** 7890",
                                            "requestId": "cjqml1f2e5ocq2mesej0"
                                        },
                                        {
                                            "IFSC": "SBIN0000001",
                                            "accountName": "deku",
                                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                            "maskedAccountNumber": "**** **** **** 7890",
                                            "requestId": "cjqml1f2e5ocq2mesej0"
                                        }
                                    ],
                                    "shortCode": "Np3KnBCM8Om0",
                                    "shortLink": "bills.pe/Np3KnBCM8Om0",
                                    "status": "closed",
                                    "transactionNote": "test transaction"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Unauthorized response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/vpas": {
            "post": {
                "tags": ["vpa"],
                "summary": "create vpa",
                "description": "Create Vpa",
                "operationId": "vpa#create",
                "parameters": [
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRequestBody5"
                            },
                            "example": {
                                "merchantReferenceId": "1240689979139556557",
                                "vpa": "deku@okokaxis"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VpaResponse"
                                },
                                "example": {
                                    "addressProvider": "Axis",
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "1240689979139556557",
                                    "status": "active",
                                    "vpa": "deku@okokaxis"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Forbidden response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/vpas/{id}": {
            "get": {
                "tags": ["vpa"],
                "summary": "fetchById vpa",
                "description": "Fetch Vpa by ID",
                "operationId": "vpa#fetchById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the resource",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id of the resource",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VpaResponse"
                                },
                                "example": {
                                    "addressProvider": "Axis",
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "1240689979139556557",
                                    "status": "active",
                                    "vpa": "deku@okokaxis"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Forbidden response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/vpas/{id}/status": {
            "put": {
                "tags": ["vpa"],
                "summary": "updateStatus vpa",
                "description": "Update Vpa Status",
                "operationId": "vpa#updateStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the resource",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id of the resource",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateStatusRequestBody"
                            },
                            "example": {
                                "status": "active"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VpaResponse"
                                },
                                "example": {
                                    "addressProvider": "Axis",
                                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                    "merchantReferenceId": "1240689979139556557",
                                    "status": "active",
                                    "vpa": "deku@okokaxis"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Forbidden response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/merchants/vpas/availability": {
            "post": {
                "tags": ["vpa"],
                "summary": "checkAvailability vpa",
                "description": "Check Vpa Availability",
                "operationId": "vpa#checkAvailability",
                "parameters": [
                    {
                        "name": "merchantId",
                        "in": "header",
                        "description": "id associated with the merchant",
                        "allowEmptyValue": true,
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "id associated with the merchant",
                            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                        },
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckAvailabilityRequestBody"
                            },
                            "example": {
                                "vpa": "deku@okokaxis"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK response.",
                        "headers": {
                            "requestId": {
                                "schema": {
                                    "type": "string",
                                    "example": "cjqml1f2e5ocq2mesej0"
                                },
                                "example": "cjqml1f2e5ocq2mesej0"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckVpaAvailabilityResponse"
                                },
                                "example": {
                                    "available": true,
                                    "status": "available"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: Bad Request response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Forbidden response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found: Not Found response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error: Internal Server Error response.",
                        "headers": {
                            "requestId": {
                                "description": "a unique id associated with a particular request",
                                "schema": {
                                    "type": "string",
                                    "description": "a unique id associated with a particular request",
                                    "example": "cjqnn4cupm66hpf0a920"
                                },
                                "example": "cjqnn4cupm66hpf0a920"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "BaseSetuAPIErrorModel": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "error code",
                        "example": "bad-request"
                    },
                    "detail": {
                        "type": "string",
                        "description": "a detailed description of the error",
                        "example": "bad-request"
                    },
                    "docUrl": {
                        "type": "string",
                        "description": "link to a doc with more information about the error",
                        "example": ""
                    }
                },
                "example": {
                    "code": "bad-request",
                    "detail": "bad-request",
                    "docUrl": ""
                }
            },
            "CheckAvailabilityRequestBody": {
                "type": "object",
                "properties": {
                    "vpa": {
                        "type": "string",
                        "description": "VPA to be created",
                        "example": "deku@okokaxis",
                        "minLength": 1
                    }
                },
                "example": {
                    "vpa": "deku@okokaxis"
                },
                "required": ["vpa"]
            },
            "CheckVpaAvailabilityResponse": {
                "type": "object",
                "properties": {
                    "available": {
                        "type": "boolean",
                        "description": "indicates if given vpa is available for use or not",
                        "example": true
                    },
                    "status": {
                        "type": "string",
                        "description": "indicates if given vpa is available for use or not",
                        "example": "available",
                        "enum": ["available", "not_available"]
                    }
                },
                "example": {
                    "available": true,
                    "status": "available"
                }
            },
            "CollectRequestClosureReason": {
                "type": "object",
                "properties": {
                    "collectRequestClosureReason": {
                        "type": "string",
                        "description": "indicates collect request closure reason",
                        "example": "unable-to-fulfill-request"
                    },
                    "npciErrCode": {
                        "type": "string",
                        "description": "err code received from NPCI in case collect request is closed due to payment failure",
                        "example": "YG"
                    }
                },
                "example": {
                    "collectRequestClosureReason": "unable-to-fulfill-request",
                    "npciErrCode": "YG"
                }
            },
            "CreateAggConfigResponse": {
                "type": "object",
                "properties": {
                    "aggAccountId": {
                        "type": "string",
                        "description": "Account ID got from account service",
                        "example": "89efe162-8bca-4a18-a9bf-3ff80738e726"
                    },
                    "captureKyc": {
                        "type": "boolean",
                        "description": "flag to denote whether merchant kyc should be collected by UMAP of not",
                        "example": true
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the aggregator",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantVpaHandles": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Sunt dolorem in et dolores."
                        },
                        "description": "vpa handles allowed for merchants by an aggregator",
                        "example": ["okaxis", "okicici"],
                        "minItems": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "name of an aggregator",
                        "example": "Pinelabs"
                    },
                    "paId": {
                        "type": "string",
                        "description": "Payment aggregator Id",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "Id of the parent aggregator",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "paymentModes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Veritatis omnis temporibus ipsa quam fuga nihil."
                        },
                        "description": "payment modes allowed for merchants by an aggregator",
                        "example": ["savings", "lite", "erupi"],
                        "minItems": 1
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Aut repellat natus magnam."
                        },
                        "description": "payment modes allowed for merchants by an aggregator",
                        "example": ["deeplinks", "sqr", "mqr"],
                        "minItems": 1
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the aggregator",
                        "example": "inactive",
                        "enum": ["inactive", "active"]
                    },
                    "whitelistVpa": {
                        "type": "boolean",
                        "description": "flat to denote whether merchant vpa has to be whitelisted on the NPCI side",
                        "example": true
                    }
                },
                "example": {
                    "aggAccountId": "89efe162-8bca-4a18-a9bf-3ff80738e726",
                    "captureKyc": false,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantVpaHandles": ["okaxis", "okicici"],
                    "name": "Pinelabs",
                    "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "parentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentModes": ["savings", "lite", "erupi"],
                    "products": ["deeplinks", "sqr", "mqr"],
                    "status": "inactive",
                    "whitelistVpa": true
                }
            },
            "CreateCollectResponse": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "paise denominated value that needs to be collected from the user",
                        "example": 10000,
                        "minimum": 0,
                        "maximum": 100000000000000000
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "currency": {
                        "type": "string",
                        "description": "indicates the currency used during the transaction",
                        "example": "INR",
                        "enum": ["INR"]
                    },
                    "customerVpa": {
                        "type": "string",
                        "description": "remitter's VPA",
                        "example": "dekup@okhdfc"
                    },
                    "expireAfter": {
                        "type": "integer",
                        "description": "expiry duration for the collect request in minutes",
                        "default": 30,
                        "example": 2,
                        "minimum": 1,
                        "maximum": 64800
                    },
                    "id": {
                        "type": "string",
                        "description": "id of the resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "id associated with the merchant",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "reference id in the merchant's system",
                        "example": "1240689979139556557",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 50
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "VPA used to accept payments",
                        "example": "deku@okokaxis"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "field provided for the merchant to add additional key-value pairs",
                        "example": {
                            "invoicenumber": "INV-21-12-009"
                        },
                        "format": "binary"
                    },
                    "productConfigId": {
                        "type": "string",
                        "description": "id of the product config associated with the collect request",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "refId": {
                        "type": "string",
                        "description": "NPCI transaction refId",
                        "example": "1240689979139556558",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 35
                    },
                    "status": {
                        "type": "string",
                        "description": "status defining the validity of the collect request",
                        "example": "active",
                        "enum": ["active", "paid", "closed"]
                    },
                    "transactionNote": {
                        "type": "string",
                        "description": "note displayed to the customer at the payment page",
                        "example": "testcollect",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 50
                    }
                },
                "example": {
                    "amount": 10000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "customerVpa": "dekup@okhdfc",
                    "expireAfter": 2,
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "merchantVpa": "deku@okokaxis",
                    "metadata": {
                        "invoicenumber": "INV-21-12-009"
                    },
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "refId": "1240689979139556558",
                    "status": "active",
                    "transactionNote": "testcollect"
                }
            },
            "CreateDeeplinkResponse": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "paise denominated value that needs to be collected from the user",
                        "example": 10000,
                        "format": "int64"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "currency": {
                        "type": "string",
                        "description": "indicates the currency used during the transaction",
                        "example": "INR"
                    },
                    "expiryDate": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the expiry date & time",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "string",
                        "description": "id of the resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "intentLink": {
                        "type": "string",
                        "description": "upi intent link",
                        "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "id associated with the merchant",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "reference id in the merchant's system",
                        "example": "1240689979139556557",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 50
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "VPA used to accept payments",
                        "example": "deku@okokaxis"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "field provided for the merchant to add additional key-value pairs",
                        "example": {
                            "invoicenumber": "INV-21-12-009"
                        },
                        "format": "binary"
                    },
                    "minAmount": {
                        "type": "integer",
                        "description": "paise denominated minimum value that needs to be collected from the user",
                        "example": 10000,
                        "format": "int64"
                    },
                    "paymentType": {
                        "type": "string",
                        "description": "type of the payment link - single use or multi use",
                        "example": "pay_single",
                        "enum": ["pay_single", "pay_multi"]
                    },
                    "productConfigId": {
                        "type": "string",
                        "description": "id of the product config associated with the qr / payment link",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "refId": {
                        "type": "string",
                        "description": "NPCI transaction refId",
                        "example": "1240689979139556558",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 35
                    },
                    "shortCode": {
                        "type": "string",
                        "description": "short code used for payment short link",
                        "example": "Np3KnBCM8Om0"
                    },
                    "shortLink": {
                        "type": "string",
                        "description": "short link for the intent link",
                        "example": "bills.pe/Np3KnBCM8Om0"
                    },
                    "status": {
                        "type": "string",
                        "description": "status defining the validity of the payment link",
                        "example": "active",
                        "enum": ["inactive", "active", "paid", "closed"]
                    },
                    "transactionNote": {
                        "type": "string",
                        "description": "note displayed to the customer at the payment page",
                        "example": "testpay"
                    }
                },
                "example": {
                    "amount": 10000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "expiryDate": "2023-09-04 12:08:20.202644 +0530 IST",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "merchantVpa": "deku@okokaxis",
                    "metadata": {
                        "invoicenumber": "INV-21-12-009"
                    },
                    "minAmount": 10000,
                    "paymentType": "pay_single",
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "refId": "1240689979139556558",
                    "shortCode": "Np3KnBCM8Om0",
                    "shortLink": "bills.pe/Np3KnBCM8Om0",
                    "status": "active",
                    "transactionNote": "testpay"
                }
            },
            "CreateMandateResponse": {
                "type": "object",
                "properties": {
                    "allowMultipleDebit": {
                        "type": "boolean",
                        "description": "Allow multiple debits for the mandate",
                        "default": false,
                        "example": true
                    },
                    "amount": {
                        "type": "integer",
                        "description": "Amount(in paise) of the mandate",
                        "example": 1000,
                        "minimum": 100,
                        "maximum": 20000000
                    },
                    "amountRule": {
                        "type": "string",
                        "description": "Rule for verifying the debit amount is within range of specified amount_limit",
                        "example": "max",
                        "enum": ["max", "exact"]
                    },
                    "autoExecute": {
                        "type": "boolean",
                        "description": "Auto execute of the mandate",
                        "default": true,
                        "example": true
                    },
                    "autoPreNotify": {
                        "type": "boolean",
                        "description": "Auto pre notify of the mandate",
                        "default": true,
                        "example": true
                    },
                    "blockFunds": {
                        "type": "boolean",
                        "description": "Block funds for the mandate",
                        "default": false,
                        "example": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "creationMode": {
                        "type": "string",
                        "description": "Creation mode of the mandate",
                        "example": "qr",
                        "enum": ["collect", "qr", "intent"]
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency in which the mandate payment will be executed",
                        "default": "INR",
                        "example": "INR"
                    },
                    "customerRevocable": {
                        "type": "boolean",
                        "default": false,
                        "example": false
                    },
                    "customerVpa": {
                        "type": "string",
                        "description": "Customer VPA of the mandate",
                        "example": "ram@axis"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "End date of the mandate (ddmmyyyy)",
                        "example": "02012008"
                    },
                    "expireAfter": {
                        "type": "integer",
                        "description": "Number of seconds after which the mandate creation request will expire",
                        "default": 120,
                        "example": 120,
                        "minimum": 120,
                        "maximum": 7776000
                    },
                    "firstExecutionAmount": {
                        "type": "integer",
                        "description": "First execution amount(in paise) of the mandate",
                        "default": 0,
                        "example": 1000,
                        "format": "int64"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "Frequency of the mandate",
                        "example": "monthly",
                        "enum": [
                            "one time",
                            "weekly",
                            "daily",
                            "fortnightly",
                            "monthly",
                            "bi monthly",
                            "quarterly",
                            "half yearly",
                            "yearly",
                            "as presented"
                        ]
                    },
                    "id": {
                        "type": "string",
                        "description": "id of the resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "initiationMode": {
                        "type": "string",
                        "description": "Initiation mode of the mandate",
                        "example": "00",
                        "enum": ["00", "01", "04"]
                    },
                    "intentLink": {
                        "type": "string",
                        "description": "Intent link for the mandate request",
                        "example": "upi://mandate?pa=deku040920232@okokaxis&pn=merchant-1&validitystart=31121995&validityend=31121996&am=100.00&amrule=MAX&recur=one%20time&recurvalue=0&recurtype=on&tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI&cu=INR&mc=1234&mode=04&purpose=14&rev=N&share=Y&qrexpire=04092023&block=N&orgid=000000&version=2.0&txnType=create&tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI"
                    },
                    "maxAmountLimit": {
                        "type": "integer",
                        "description": "Maximum amount(in paise) for which a mandate transaction can be executed",
                        "example": 1000,
                        "minimum": 100,
                        "maximum": 20000000
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "Id of the merchant who created the mandate",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Merchant reference id of the mandate",
                        "example": "ABC1234789",
                        "minLength": 5,
                        "maxLength": 50
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "Merchant VPA of the mandate",
                        "example": "acme.corp@axis"
                    },
                    "productConfigId": {
                        "type": "string",
                        "description": "Configuration Id of the product",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "purpose": {
                        "type": "string",
                        "description": "Purpose of the mandate",
                        "default": "14",
                        "example": "14",
                        "enum": ["00", "14"]
                    },
                    "recurrenceRule": {
                        "type": "string",
                        "description": "Recurrence rule of the mandate",
                        "default": "on",
                        "example": "on",
                        "enum": ["on", "before", "after"]
                    },
                    "recurrenceValue": {
                        "type": "integer",
                        "description": "Recurrence value of the mandate",
                        "example": 1,
                        "minimum": 0,
                        "maximum": 31
                    },
                    "shareToPayee": {
                        "type": "boolean",
                        "default": true,
                        "example": false
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Start date of the mandate (ddmmyyyy)",
                        "example": "02012006"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the mandate",
                        "example": "pending",
                        "enum": [
                            "pending",
                            "live",
                            "paused",
                            "revoked",
                            "rejected",
                            "completed"
                        ]
                    },
                    "transactionNote": {
                        "type": "string",
                        "description": "Transaction note of the mandate",
                        "example": "Transaction note"
                    },
                    "txnId": {
                        "type": "string",
                        "description": "NPCI transaction id",
                        "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 35,
                        "maxLength": 35
                    }
                },
                "example": {
                    "allowMultipleDebit": true,
                    "amount": 1000,
                    "amountRule": "max",
                    "autoExecute": true,
                    "autoPreNotify": true,
                    "blockFunds": true,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "creationMode": "qr",
                    "currency": "INR",
                    "customerRevocable": false,
                    "customerVpa": "ram@axis",
                    "endDate": "02012008",
                    "expireAfter": 120,
                    "firstExecutionAmount": 1000,
                    "frequency": "monthly",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "initiationMode": "04",
                    "intentLink": "upi://mandate?pa=deku040920232@okokaxis&pn=merchant-1&validitystart=31121995&validityend=31121996&am=100.00&amrule=MAX&recur=one%20time&recurvalue=0&recurtype=on&tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI&cu=INR&mc=1234&mode=04&purpose=14&rev=N&share=Y&qrexpire=04092023&block=N&orgid=000000&version=2.0&txnType=create&tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                    "maxAmountLimit": 1000,
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "ABC1234789",
                    "merchantVpa": "acme.corp@axis",
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "purpose": "14",
                    "recurrenceRule": "on",
                    "recurrenceValue": 1,
                    "shareToPayee": false,
                    "startDate": "02012006",
                    "status": "pending",
                    "transactionNote": "Transaction note",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                }
            },
            "CreateMerchantWrapperRequestBody": {
                "type": "object",
                "properties": {
                    "acceptDeemedTxns": {
                        "type": "boolean",
                        "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
                        "default": false,
                        "example": true
                    },
                    "aggregatorAccountId": {
                        "type": "string",
                        "example": "328a928f-e277-4798-8e28-4b19a61a8a23"
                    },
                    "businessName": {
                        "type": "string",
                        "description": "Brand name or Consumer facing name",
                        "example": "deku",
                        "pattern": "^[a-zA-Z0-9 ]+$"
                    },
                    "businessType": {
                        "type": "string",
                        "description": "Incorporation type",
                        "example": "PUBLIC",
                        "enum": [
                            "PROPRIETARY",
                            "PARTNERSHIP",
                            "PRIVATE",
                            "PUBLIC",
                            "OTHERS"
                        ]
                    },
                    "franchiseName": {
                        "type": "string",
                        "description": "Franchise name",
                        "example": "deku",
                        "pattern": "^[a-zA-Z0-9 ]+$"
                    },
                    "genre": {
                        "type": "string",
                        "description": "Online / Offline",
                        "example": "ONLINE",
                        "enum": ["ONLINE", "OFFLINE"]
                    },
                    "legalName": {
                        "type": "string",
                        "description": "Legal name as per incorporation documents",
                        "example": "deku",
                        "pattern": "^[a-zA-Z0-9 ]+$"
                    },
                    "mcc": {
                        "type": "string",
                        "description": "Category of business operation",
                        "example": "5432"
                    },
                    "merchantName": {
                        "type": "string",
                        "description": "Name used by Merchant user to identify a given Merchant from others",
                        "example": "deku",
                        "minLength": 1
                    },
                    "merchantType": {
                        "type": "string",
                        "description": "merchant type",
                        "default": "small",
                        "example": "small",
                        "enum": ["small", "large"]
                    },
                    "onboardingType": {
                        "type": "string",
                        "description": "onboarding type",
                        "default": "bank",
                        "example": "bank",
                        "enum": ["bank", "aggregator"]
                    },
                    "settlement": {
                        "$ref": "#/components/schemas/SettlementConfiguration"
                    },
                    "settlementsEnabled": {
                        "type": "boolean",
                        "description": "indicates whether settlements are enabled for merchant or not",
                        "example": false
                    },
                    "standardAccountId": {
                        "type": "string",
                        "description": "id of standard account associated with merchant",
                        "example": "328a928f-e277-4798-8e28-4b19a61a8a22"
                    }
                },
                "example": {
                    "acceptDeemedTxns": true,
                    "aggregatorAccountId": "328a928f-e277-4798-8e28-4b19a61a8a23",
                    "businessName": "deku",
                    "businessType": "PUBLIC",
                    "franchiseName": "deku",
                    "genre": "ONLINE",
                    "legalName": "deku",
                    "mcc": "5432",
                    "merchantName": "deku",
                    "merchantType": "small",
                    "onboardingType": "bank",
                    "settlement": {
                        "cycles": [
                            {
                                "endTime": "2002-05-29T00:41:13Z",
                                "settlementTime": "1998-11-17T16:58:52Z",
                                "startTime": "2015-10-28T14:14:02Z"
                            },
                            {
                                "endTime": "2002-05-29T00:41:13Z",
                                "settlementTime": "1998-11-17T16:58:52Z",
                                "startTime": "2015-10-28T14:14:02Z"
                            }
                        ],
                        "frequency": "TPlusOne",
                        "splitsEnabled": true,
                        "type": "Net"
                    },
                    "settlementsEnabled": true,
                    "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22"
                },
                "required": [
                    "aggregatorAccountId",
                    "merchantName",
                    "legalName",
                    "businessName",
                    "businessType",
                    "mcc",
                    "genre"
                ]
            },
            "CreateRefundResponse": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "Amount to be refunded back to the customer",
                        "example": 10000,
                        "format": "int64"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency code to be used for the refund - defaults to INR",
                        "default": "INR",
                        "example": "INR",
                        "enum": ["INR"]
                    },
                    "id": {
                        "type": "string",
                        "description": "id of the resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Unique identifier merchant wants to pass to reconcile refunds at their end",
                        "example": "BILL12345"
                    },
                    "reason": {
                        "$ref": "#/components/schemas/MandateReason"
                    },
                    "remarks": {
                        "type": "string",
                        "description": "Remarks on why the refund is being initiated",
                        "example": "Services not rendered"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the refund request",
                        "example": "success",
                        "enum": ["pending", "initiated", "success", "failed"]
                    },
                    "txnDate": {
                        "type": "string",
                        "description": "Payment transaction date",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST"
                    },
                    "txnId": {
                        "type": "string",
                        "description": "NPCI payment transaction id on which merchant wants to raise a refund",
                        "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                    }
                },
                "example": {
                    "amount": 10000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "BILL12345",
                    "reason": {
                        "errCode": "refund-disabled",
                        "npciErrCode": "R21",
                        "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                    },
                    "remarks": "Services not rendered",
                    "status": "success",
                    "txnDate": "2023-09-04 12:08:20.202644 +0530 IST",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                }
            },
            "CreateRequestBody": {
                "type": "object",
                "properties": {
                    "aggAccountId": {
                        "type": "string",
                        "description": "Account ID got from account service",
                        "example": "89efe162-8bca-4a18-a9bf-3ff80738e726"
                    },
                    "captureKyc": {
                        "type": "boolean",
                        "description": "flag to denote whether merchant kyc should be collected by UMAP of not",
                        "example": true
                    },
                    "merchantVpaHandles": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Accusantium iure."
                        },
                        "description": "vpa handles allowed for merchants by an aggregator",
                        "example": ["okaxis", "okicici"],
                        "minItems": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "name of an aggregator",
                        "example": "Pinelabs"
                    },
                    "paId": {
                        "type": "string",
                        "description": "Payment aggregator Id",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "Id of the parent aggregator",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "paymentModes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Itaque nemo."
                        },
                        "description": "payment modes allowed for merchants by an aggregator",
                        "example": ["savings", "lite", "erupi"],
                        "minItems": 1
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Illo velit ipsam voluptas facilis ut."
                        },
                        "description": "payment modes allowed for merchants by an aggregator",
                        "example": ["deeplinks", "sqr", "mqr"],
                        "minItems": 1
                    },
                    "whitelistVpa": {
                        "type": "boolean",
                        "description": "flat to denote whether merchant vpa has to be whitelisted on the NPCI side",
                        "example": false
                    }
                },
                "example": {
                    "aggAccountId": "89efe162-8bca-4a18-a9bf-3ff80738e726",
                    "captureKyc": true,
                    "merchantVpaHandles": ["okaxis", "okicici"],
                    "name": "Pinelabs",
                    "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "parentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentModes": ["savings", "lite", "erupi"],
                    "products": ["deeplinks", "sqr", "mqr"],
                    "whitelistVpa": false
                },
                "required": ["name", "aggAccountId", "paId"]
            },
            "CreateRequestBody2": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "paise denominated value that needs to be collected from the user",
                        "example": 10000,
                        "minimum": 0,
                        "maximum": 100000000000000000
                    },
                    "currency": {
                        "type": "string",
                        "description": "indicates the currency used during the transaction",
                        "example": "INR",
                        "enum": ["INR"]
                    },
                    "customerVpa": {
                        "type": "string",
                        "description": "remitter's VPA",
                        "example": "dekup@okhdfc"
                    },
                    "expireAfter": {
                        "type": "integer",
                        "description": "expiry duration for the collect request in minutes",
                        "default": 30,
                        "example": 2,
                        "minimum": 1,
                        "maximum": 64800
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "reference id in the merchant's system",
                        "example": "1240689979139556557",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 50
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "VPA used to accept payments",
                        "example": "deku@okokaxis"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "field provided for the merchant to add additional key-value pairs",
                        "example": {
                            "invoicenumber": "INV-21-12-009"
                        },
                        "format": "binary"
                    },
                    "productConfigId": {
                        "type": "string",
                        "description": "id of the product config associated with the collect request",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "transactionNote": {
                        "type": "string",
                        "description": "note displayed to the customer at the payment page",
                        "example": "testcollect",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 50
                    }
                },
                "example": {
                    "amount": 10000,
                    "currency": "INR",
                    "customerVpa": "dekup@okhdfc",
                    "expireAfter": 2,
                    "merchantReferenceId": "1240689979139556557",
                    "merchantVpa": "deku@okokaxis",
                    "metadata": {
                        "invoicenumber": "INV-21-12-009"
                    },
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "transactionNote": "testcollect"
                },
                "required": ["customerVpa", "amount", "currency"]
            },
            "CreateRequestBody3": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "paise denominated value that needs to be collected from the user",
                        "example": 10000,
                        "format": "int64"
                    },
                    "currency": {
                        "type": "string",
                        "description": "indicates the currency used during the transaction",
                        "example": "INR"
                    },
                    "expiryDate": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the expiry date & time",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "reference id in the merchant's system",
                        "example": "1240689979139556557",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 50
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "VPA used to accept payments",
                        "example": "deku@okokaxis"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "field provided for the merchant to add additional key-value pairs",
                        "example": {
                            "invoicenumber": "INV-21-12-009"
                        },
                        "format": "binary"
                    },
                    "minAmount": {
                        "type": "integer",
                        "description": "paise denominated minimum value that needs to be collected from the user",
                        "example": 10000,
                        "format": "int64"
                    },
                    "paymentType": {
                        "type": "string",
                        "description": "type of the payment link - single use or multi use",
                        "example": "pay_single",
                        "enum": ["pay_single", "pay_multi"]
                    },
                    "productConfigId": {
                        "type": "string",
                        "description": "id of the product config associated with the qr / payment link",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "transactionNote": {
                        "type": "string",
                        "description": "note displayed to the customer at the payment page",
                        "example": "testpay"
                    }
                },
                "example": {
                    "amount": 10000,
                    "currency": "INR",
                    "expiryDate": "2023-09-04 12:08:20.202644 +0530 IST",
                    "merchantReferenceId": "1240689979139556557",
                    "merchantVpa": "deku@okokaxis",
                    "metadata": {
                        "invoicenumber": "INV-21-12-009"
                    },
                    "minAmount": 10000,
                    "paymentType": "pay_single",
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "transactionNote": "testpay"
                }
            },
            "CreateRequestBody4": {
                "type": "object",
                "properties": {
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "reference id in the merchant's system",
                        "example": "customer-ref-id"
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "VPA used to accept payments",
                        "example": "deku@okokaxis",
                        "pattern": "^[\\w.-]+@[\\w.-]+$"
                    },
                    "productInstanceType": {
                        "type": "string",
                        "description": "indicates the type of products that can be created using this config",
                        "example": "pay_single",
                        "enum": [
                            "pay_single",
                            "pay_multi",
                            "collect",
                            "autopay",
                            "pay_single_tpv"
                        ]
                    }
                },
                "example": {
                    "merchantReferenceId": "customer-ref-id",
                    "merchantVpa": "deku@okokaxis",
                    "productInstanceType": "pay_single"
                },
                "required": ["productInstanceType", "merchantVpa"]
            },
            "CreateRequestBody5": {
                "type": "object",
                "properties": {
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "reference id in the merchant's system",
                        "example": "1240689979139556557",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 50
                    },
                    "vpa": {
                        "type": "string",
                        "description": "VPA to be created",
                        "example": "deku@okokaxis",
                        "minLength": 1
                    }
                },
                "example": {
                    "merchantReferenceId": "1240689979139556557",
                    "vpa": "deku@okokaxis"
                },
                "required": ["vpa"]
            },
            "CreateRequestBody6": {
                "type": "object",
                "properties": {
                    "allowMultipleDebit": {
                        "type": "boolean",
                        "description": "Allow multiple debits for the mandate",
                        "default": false,
                        "example": true
                    },
                    "amount": {
                        "type": "integer",
                        "description": "Amount(in paise) of the mandate",
                        "example": 1000,
                        "minimum": 100,
                        "maximum": 20000000
                    },
                    "amountRule": {
                        "type": "string",
                        "description": "Rule for verifying the debit amount is within range of specified amount_limit",
                        "example": "max",
                        "enum": ["max", "exact"]
                    },
                    "autoExecute": {
                        "type": "boolean",
                        "description": "Auto execute of the mandate",
                        "default": true,
                        "example": true
                    },
                    "autoPreNotify": {
                        "type": "boolean",
                        "description": "Auto pre notify of the mandate",
                        "default": true,
                        "example": true
                    },
                    "blockFunds": {
                        "type": "boolean",
                        "description": "Block funds for the mandate",
                        "default": false,
                        "example": true
                    },
                    "creationMode": {
                        "type": "string",
                        "description": "Creation mode of the mandate",
                        "example": "qr",
                        "enum": ["collect", "qr", "intent"]
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency in which the mandate payment will be executed",
                        "default": "INR",
                        "example": "INR"
                    },
                    "customerRevocable": {
                        "type": "boolean",
                        "default": false,
                        "example": false
                    },
                    "customerVpa": {
                        "type": "string",
                        "description": "Customer VPA of the mandate",
                        "example": "ram@axis"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "End date of the mandate (ddmmyyyy)",
                        "example": "02012008"
                    },
                    "expireAfter": {
                        "type": "integer",
                        "description": "Number of seconds after which the mandate creation request will expire",
                        "default": 120,
                        "example": 120,
                        "minimum": 120,
                        "maximum": 7776000
                    },
                    "firstExecutionAmount": {
                        "type": "integer",
                        "description": "First execution amount(in paise) of the mandate",
                        "default": 0,
                        "example": 1000,
                        "format": "int64"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "Frequency of the mandate",
                        "example": "monthly",
                        "enum": [
                            "one time",
                            "weekly",
                            "daily",
                            "fortnightly",
                            "monthly",
                            "bi monthly",
                            "quarterly",
                            "half yearly",
                            "yearly",
                            "as presented"
                        ]
                    },
                    "initiationMode": {
                        "type": "string",
                        "description": "Initiation mode of the mandate",
                        "example": "01",
                        "enum": ["00", "01", "04"]
                    },
                    "maxAmountLimit": {
                        "type": "integer",
                        "description": "Maximum amount(in paise) for which a mandate transaction can be executed",
                        "example": 1000,
                        "minimum": 100,
                        "maximum": 20000000
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Merchant reference id of the mandate",
                        "example": "ABC1234789",
                        "minLength": 5,
                        "maxLength": 50
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "Merchant VPA of the mandate",
                        "example": "acme.corp@axis"
                    },
                    "productConfigId": {
                        "type": "string",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "purpose": {
                        "type": "string",
                        "description": "Purpose of the mandate",
                        "default": "14",
                        "example": "14",
                        "enum": ["00", "14"]
                    },
                    "recurrenceRule": {
                        "type": "string",
                        "description": "Recurrence rule of the mandate",
                        "default": "on",
                        "example": "on",
                        "enum": ["on", "before", "after"]
                    },
                    "recurrenceValue": {
                        "type": "integer",
                        "description": "Recurrence value of the mandate",
                        "example": 1,
                        "minimum": 0,
                        "maximum": 31
                    },
                    "shareToPayee": {
                        "type": "boolean",
                        "default": true,
                        "example": false
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Start date of the mandate (ddmmyyyy)",
                        "example": "02012006"
                    },
                    "transactionNote": {
                        "type": "string",
                        "description": "Transaction note of the mandate",
                        "example": "Transaction note"
                    }
                },
                "example": {
                    "allowMultipleDebit": true,
                    "amount": 1000,
                    "amountRule": "max",
                    "autoExecute": true,
                    "autoPreNotify": true,
                    "blockFunds": true,
                    "creationMode": "qr",
                    "currency": "INR",
                    "customerRevocable": false,
                    "customerVpa": "ram@axis",
                    "endDate": "02012008",
                    "expireAfter": 120,
                    "firstExecutionAmount": 1000,
                    "frequency": "monthly",
                    "initiationMode": "00",
                    "maxAmountLimit": 1000,
                    "merchantReferenceId": "ABC1234789",
                    "merchantVpa": "acme.corp@axis",
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "purpose": "14",
                    "recurrenceRule": "on",
                    "recurrenceValue": 1,
                    "shareToPayee": false,
                    "startDate": "02012006",
                    "transactionNote": "Transaction note"
                },
                "required": [
                    "startDate",
                    "endDate",
                    "maxAmountLimit",
                    "amount",
                    "currency",
                    "amountRule",
                    "frequency",
                    "recurrenceValue",
                    "transactionNote",
                    "purpose",
                    "initiationMode",
                    "creationMode",
                    "customerVpa"
                ]
            },
            "CreateRequestBody7": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "Amount to be refunded back to the customer",
                        "example": 10000,
                        "format": "int64"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency code to be used for the refund - defaults to INR",
                        "default": "INR",
                        "example": "INR",
                        "enum": ["INR"]
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Unique identifier merchant wants to pass to reconcile refunds at their end",
                        "example": "BILL12345"
                    },
                    "remarks": {
                        "type": "string",
                        "description": "Remarks on why the refund is being initiated",
                        "example": "Services not rendered"
                    },
                    "txnDate": {
                        "type": "string",
                        "description": "Payment transaction date",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST"
                    },
                    "txnId": {
                        "type": "string",
                        "description": "NPCI payment transaction id on which merchant wants to raise a refund",
                        "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                    }
                },
                "example": {
                    "amount": 10000,
                    "currency": "INR",
                    "merchantReferenceId": "BILL12345",
                    "remarks": "Services not rendered",
                    "txnDate": "2023-09-04 12:08:20.202644 +0530 IST",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                },
                "required": ["txnId", "txnDate", "amount"]
            },
            "CreateTPVRequestBody": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "amount for the transaction",
                        "example": 100,
                        "format": "int64"
                    },
                    "currency": {
                        "type": "string",
                        "description": "indicates the currency used during the transaction",
                        "example": "INR"
                    },
                    "expireAfter": {
                        "type": "integer",
                        "description": "expire after in minutes for the transaction",
                        "example": 10,
                        "format": "int64"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Reference id provided by the merchant",
                        "example": "1240689979139556556"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "field provided for the merchant to add additional key-value pairs (metadata) for tpv transaction",
                        "example": {
                            "invoicenumber": "INV-21-12-009"
                        },
                        "format": "binary"
                    },
                    "minAmount": {
                        "type": "integer",
                        "description": "min amount for the transaction",
                        "example": 100,
                        "format": "int64"
                    },
                    "primaryAccount": {
                        "$ref": "#/components/schemas/TPVAccountDetail"
                    },
                    "productConfigId": {
                        "type": "string",
                        "description": "id associated with the product config",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAP"
                    },
                    "secondaryAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TPVAccountDetail"
                        },
                        "description": "secondary accounts for the tpv transaction",
                        "example": [
                            {
                                "IFSC": "SBIN0000001",
                                "accountName": "deku",
                                "accountNumber": "1234567890"
                            },
                            {
                                "IFSC": "SBIN0000001",
                                "accountName": "deku",
                                "accountNumber": "1234567890"
                            }
                        ]
                    },
                    "transactionNote": {
                        "type": "string",
                        "description": "transaction note for the transaction",
                        "example": "test transaction"
                    }
                },
                "example": {
                    "amount": 100,
                    "currency": "INR",
                    "expireAfter": 10,
                    "merchantReferenceId": "1240689979139556556",
                    "metadata": {
                        "invoicenumber": "INV-21-12-009"
                    },
                    "minAmount": 100,
                    "primaryAccount": {
                        "IFSC": "SBIN0000001",
                        "accountName": "deku",
                        "accountNumber": "1234567890"
                    },
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAP",
                    "secondaryAccounts": [
                        {
                            "IFSC": "SBIN0000001",
                            "accountName": "deku",
                            "accountNumber": "1234567890"
                        },
                        {
                            "IFSC": "SBIN0000001",
                            "accountName": "deku",
                            "accountNumber": "1234567890"
                        },
                        {
                            "IFSC": "SBIN0000001",
                            "accountName": "deku",
                            "accountNumber": "1234567890"
                        },
                        {
                            "IFSC": "SBIN0000001",
                            "accountName": "deku",
                            "accountNumber": "1234567890"
                        }
                    ],
                    "transactionNote": "test transaction"
                },
                "required": ["primaryAccount"]
            },
            "CreateWithInfoRequestBody": {
                "type": "object",
                "properties": {
                    "acceptDeemedTxns": {
                        "type": "boolean",
                        "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
                        "default": false,
                        "example": true
                    },
                    "aggregatorAccountId": {
                        "type": "string",
                        "description": "id of aggregator account associated with merchant",
                        "example": "328a928f-e277-4798-8e28-4b19a61a8a23"
                    },
                    "businessName": {
                        "type": "string",
                        "description": "Brand name or Consumer facing name",
                        "example": "deku",
                        "pattern": "^[a-zA-Z0-9 ]+$"
                    },
                    "businessType": {
                        "type": "string",
                        "description": "Incorporation type",
                        "example": "PUBLIC",
                        "enum": [
                            "PROPRIETARY",
                            "PARTNERSHIP",
                            "PRIVATE",
                            "PUBLIC",
                            "OTHERS"
                        ]
                    },
                    "franchiseName": {
                        "type": "string",
                        "description": "Franchise name",
                        "example": "deku",
                        "pattern": "^[a-zA-Z0-9 ]+$"
                    },
                    "genre": {
                        "type": "string",
                        "description": "Online / Offline",
                        "example": "ONLINE",
                        "enum": ["ONLINE", "OFFLINE"]
                    },
                    "legalName": {
                        "type": "string",
                        "description": "Legal name as per incorporation documents",
                        "example": "deku",
                        "pattern": "^[a-zA-Z0-9 ]+$"
                    },
                    "mcc": {
                        "type": "string",
                        "description": "Category of business operation",
                        "example": "5432"
                    },
                    "merchantName": {
                        "type": "string",
                        "description": "Name used by Merchant user to identify a given Merchant from others",
                        "example": "deku",
                        "minLength": 1
                    },
                    "merchantType": {
                        "type": "string",
                        "description": "merchant type",
                        "default": "small",
                        "example": "small",
                        "enum": ["small", "large"]
                    },
                    "onboardingType": {
                        "type": "string",
                        "description": "onboarding type",
                        "default": "bank",
                        "example": "bank",
                        "enum": ["bank", "aggregator"]
                    },
                    "settlement": {
                        "$ref": "#/components/schemas/SettlementConfiguration"
                    },
                    "settlementsEnabled": {
                        "type": "boolean",
                        "description": "indicates whether settlements are enabled for merchant or not",
                        "example": false
                    },
                    "standardAccountId": {
                        "type": "string",
                        "description": "id of standard account associated with merchant",
                        "example": "328a928f-e277-4798-8e28-4b19a61a8a22",
                        "minLength": 1
                    }
                },
                "example": {
                    "acceptDeemedTxns": true,
                    "aggregatorAccountId": "328a928f-e277-4798-8e28-4b19a61a8a23",
                    "businessName": "deku",
                    "businessType": "PUBLIC",
                    "franchiseName": "deku",
                    "genre": "ONLINE",
                    "legalName": "deku",
                    "mcc": "5432",
                    "merchantName": "deku",
                    "merchantType": "small",
                    "onboardingType": "bank",
                    "settlement": {
                        "cycles": [
                            {
                                "endTime": "2002-05-29T00:41:13Z",
                                "settlementTime": "1998-11-17T16:58:52Z",
                                "startTime": "2015-10-28T14:14:02Z"
                            },
                            {
                                "endTime": "2002-05-29T00:41:13Z",
                                "settlementTime": "1998-11-17T16:58:52Z",
                                "startTime": "2015-10-28T14:14:02Z"
                            }
                        ],
                        "frequency": "TPlusOne",
                        "splitsEnabled": true,
                        "type": "Net"
                    },
                    "settlementsEnabled": false,
                    "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22"
                },
                "required": [
                    "standardAccountId",
                    "merchantName",
                    "legalName",
                    "businessName",
                    "businessType",
                    "mcc",
                    "genre"
                ]
            },
            "CustomerVpaResponse": {
                "type": "object",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the verification request",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "customerName": {
                        "type": "string",
                        "description": "Masked remitter's name",
                        "example": "ram"
                    },
                    "customerVpa": {
                        "type": "string",
                        "description": "remitter's VPA to be verified",
                        "example": "ram@okhdfc"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the request",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "id associated with the merchant",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "reference id in the merchant's system",
                        "example": "1240689979139556557",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 50
                    },
                    "status": {
                        "type": "string",
                        "description": "status defining the validity of the customer vpa",
                        "example": "pending",
                        "enum": ["pending", "valid", "invalid", "failed"]
                    }
                },
                "example": {
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "customerName": "ram",
                    "customerVpa": "ram@okhdfc",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "status": "pending"
                }
            },
            "DeeplinkClosureReason": {
                "type": "object",
                "properties": {
                    "npciErrCode": {
                        "type": "string",
                        "description": "err code received from NPCI in case payment link is closed due to payment failure",
                        "example": "YG"
                    },
                    "paymentLinkClosureReason": {
                        "type": "string",
                        "description": "indicates payment link closure reason",
                        "example": "unable-to-fulfill-request"
                    }
                },
                "example": {
                    "npciErrCode": "YG",
                    "paymentLinkClosureReason": "unable-to-fulfill-request"
                }
            },
            "DeeplinkResponse": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "paise denominated value that needs to be collected from the user",
                        "example": 10000,
                        "format": "int64"
                    },
                    "closedAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the closure date & time",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "currency": {
                        "type": "string",
                        "description": "indicates the currency used during the transaction",
                        "example": "INR"
                    },
                    "expiryDate": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the expiry date & time",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "string",
                        "description": "id of the resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "intentLink": {
                        "type": "string",
                        "description": "upi intent link",
                        "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "id associated with the merchant",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "reference id in the merchant's system",
                        "example": "1240689979139556557",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 50
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "VPA used to accept payments",
                        "example": "deku@okokaxis"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "field provided for the merchant to add additional key-value pairs",
                        "example": {
                            "invoicenumber": "INV-21-12-009"
                        },
                        "format": "binary"
                    },
                    "minAmount": {
                        "type": "integer",
                        "description": "paise denominated minimum value that needs to be collected from the user",
                        "example": 10000,
                        "format": "int64"
                    },
                    "paymentType": {
                        "type": "string",
                        "description": "type of the payment link - single use or multi use",
                        "example": "pay_single",
                        "enum": ["pay_single", "pay_multi"]
                    },
                    "productConfigId": {
                        "type": "string",
                        "description": "id of the product config associated with the qr / payment link",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "reason": {
                        "$ref": "#/components/schemas/DeeplinkClosureReason"
                    },
                    "refId": {
                        "type": "string",
                        "description": "NPCI transaction refId",
                        "example": "1240689979139556558",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 35
                    },
                    "shortCode": {
                        "type": "string",
                        "description": "short code used for payment short link",
                        "example": "Np3KnBCM8Om0"
                    },
                    "shortLink": {
                        "type": "string",
                        "description": "short link for the intent link",
                        "example": "bills.pe/Np3KnBCM8Om0"
                    },
                    "status": {
                        "type": "string",
                        "description": "status defining the validity of the payment link",
                        "example": "active",
                        "enum": ["inactive", "active", "paid", "closed"]
                    },
                    "transactionNote": {
                        "type": "string",
                        "description": "note displayed to the customer at the payment page",
                        "example": "testpay"
                    }
                },
                "example": {
                    "amount": 10000,
                    "closedAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "expiryDate": "2023-09-04 12:08:20.202644 +0530 IST",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "merchantVpa": "deku@okokaxis",
                    "metadata": {
                        "invoicenumber": "INV-21-12-009"
                    },
                    "minAmount": 10000,
                    "paymentType": "pay_single",
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "reason": {
                        "npciErrCode": "YG",
                        "paymentLinkClosureReason": "unable-to-fulfill-request"
                    },
                    "refId": "1240689979139556558",
                    "shortCode": "Np3KnBCM8Om0",
                    "shortLink": "bills.pe/Np3KnBCM8Om0",
                    "status": "active",
                    "transactionNote": "testpay"
                }
            },
            "ExecuteRequestBody": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "Amount of the mandate",
                        "example": 1000,
                        "minimum": 100,
                        "maximum": 20000000
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Merchant reference id of the mandate",
                        "example": "ABC1234789",
                        "minLength": 5,
                        "maxLength": 50
                    },
                    "remark": {
                        "type": "string",
                        "description": "Remark for the mandate transaction",
                        "example": "Transaction for car loan emi"
                    },
                    "sequenceNumber": {
                        "type": "integer",
                        "description": "Sequence number of the mandate",
                        "example": 1,
                        "format": "int64"
                    },
                    "umn": {
                        "type": "string",
                        "description": "Unique mandate number",
                        "example": "123456789"
                    }
                },
                "example": {
                    "amount": 1000,
                    "merchantReferenceId": "ABC1234789",
                    "remark": "Transaction for car loan emi",
                    "sequenceNumber": 1,
                    "umn": "123456789"
                },
                "required": ["umn", "amount", "sequenceNumber"]
            },
            "FetchCollectResponse": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "paise denominated value that needs to be collected from the user",
                        "example": 10000,
                        "minimum": 0,
                        "maximum": 100000000000000000
                    },
                    "closedAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the closure date & time",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "currency": {
                        "type": "string",
                        "description": "indicates the currency used during the transaction",
                        "example": "INR",
                        "enum": ["INR"]
                    },
                    "customerVpa": {
                        "type": "string",
                        "description": "remitter's VPA",
                        "example": "dekup@okhdfc"
                    },
                    "expireAfter": {
                        "type": "integer",
                        "description": "expiry duration for the collect request in minutes",
                        "default": 30,
                        "example": 2,
                        "minimum": 1,
                        "maximum": 64800
                    },
                    "id": {
                        "type": "string",
                        "description": "id of the resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "id associated with the merchant",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "reference id in the merchant's system",
                        "example": "1240689979139556557",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 50
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "VPA used to accept payments",
                        "example": "deku@okokaxis"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "field provided for the merchant to add additional key-value pairs",
                        "example": {
                            "invoicenumber": "INV-21-12-009"
                        },
                        "format": "binary"
                    },
                    "productConfigId": {
                        "type": "string",
                        "description": "id of the product config associated with the collect request",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "reason": {
                        "$ref": "#/components/schemas/CollectRequestClosureReason"
                    },
                    "refId": {
                        "type": "string",
                        "description": "NPCI transaction refId",
                        "example": "1240689979139556558",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 35
                    },
                    "status": {
                        "type": "string",
                        "description": "status defining the validity of the collect request",
                        "example": "active",
                        "enum": ["active", "paid", "closed"]
                    },
                    "transactionNote": {
                        "type": "string",
                        "description": "note displayed to the customer at the payment page",
                        "example": "testcollect",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 50
                    }
                },
                "example": {
                    "amount": 10000,
                    "closedAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "customerVpa": "dekup@okhdfc",
                    "expireAfter": 2,
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "merchantVpa": "deku@okokaxis",
                    "metadata": {
                        "invoicenumber": "INV-21-12-009"
                    },
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "reason": {
                        "collectRequestClosureReason": "unable-to-fulfill-request",
                        "npciErrCode": "YG"
                    },
                    "refId": "1240689979139556558",
                    "status": "active",
                    "transactionNote": "testcollect"
                }
            },
            "FetchMandateResponse": {
                "type": "object",
                "properties": {
                    "allowMultipleDebit": {
                        "type": "boolean",
                        "description": "Allow multiple debits for the mandate",
                        "default": false,
                        "example": true
                    },
                    "amount": {
                        "type": "integer",
                        "description": "Amount(in paise) of the mandate",
                        "example": 1000,
                        "minimum": 100,
                        "maximum": 20000000
                    },
                    "amountRule": {
                        "type": "string",
                        "description": "Rule for verifying the debit amount is within range of specified amount_limit",
                        "example": "max",
                        "enum": ["max", "exact"]
                    },
                    "autoExecute": {
                        "type": "boolean",
                        "description": "Auto execute of the mandate",
                        "default": true,
                        "example": true
                    },
                    "autoPreNotify": {
                        "type": "boolean",
                        "description": "Auto pre notify of the mandate",
                        "default": true,
                        "example": true
                    },
                    "blockFunds": {
                        "type": "boolean",
                        "description": "Block funds for the mandate",
                        "default": false,
                        "example": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "creationMode": {
                        "type": "string",
                        "description": "Creation mode of the mandate",
                        "example": "qr",
                        "enum": ["collect", "qr", "intent"]
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency in which the mandate payment will be executed",
                        "default": "INR",
                        "example": "INR"
                    },
                    "customerRevocable": {
                        "type": "boolean",
                        "default": false,
                        "example": false
                    },
                    "customerVpa": {
                        "type": "string",
                        "description": "Customer VPA of the mandate",
                        "example": "ram@axis"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "End date of the mandate (ddmmyyyy)",
                        "example": "02012008"
                    },
                    "expireAfter": {
                        "type": "integer",
                        "description": "Number of seconds after which the mandate creation request will expire",
                        "default": 120,
                        "example": 120,
                        "minimum": 120,
                        "maximum": 7776000
                    },
                    "firstExecutionAmount": {
                        "type": "integer",
                        "description": "First execution amount(in paise) of the mandate",
                        "default": 0,
                        "example": 1000,
                        "format": "int64"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "Frequency of the mandate",
                        "example": "monthly",
                        "enum": [
                            "one time",
                            "weekly",
                            "daily",
                            "fortnightly",
                            "monthly",
                            "bi monthly",
                            "quarterly",
                            "half yearly",
                            "yearly",
                            "as presented"
                        ]
                    },
                    "id": {
                        "type": "string",
                        "description": "id of the resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "initiationMode": {
                        "type": "string",
                        "description": "Initiation mode of the mandate",
                        "example": "01",
                        "enum": ["00", "01", "04"]
                    },
                    "maxAmountLimit": {
                        "type": "integer",
                        "description": "Maximum amount(in paise) for which a mandate transaction can be executed",
                        "example": 1000,
                        "minimum": 100,
                        "maximum": 20000000
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "Id of the merchant who created the mandate",
                        "example": "Tempore quas reiciendis odit aut consequatur dolores."
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Merchant reference id of the mandate",
                        "example": "ABC1234789",
                        "minLength": 5,
                        "maxLength": 50
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "Merchant VPA of the mandate",
                        "example": "acme.corp@axis"
                    },
                    "productConfigId": {
                        "type": "string",
                        "description": "Configuration Id of the product",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "purpose": {
                        "type": "string",
                        "description": "Purpose of the mandate",
                        "default": "14",
                        "example": "14",
                        "enum": ["00", "14"]
                    },
                    "reason": {
                        "$ref": "#/components/schemas/MandateReason"
                    },
                    "recurrenceRule": {
                        "type": "string",
                        "description": "Recurrence rule of the mandate",
                        "default": "on",
                        "example": "on",
                        "enum": ["on", "before", "after"]
                    },
                    "recurrenceValue": {
                        "type": "integer",
                        "description": "Recurrence value of the mandate",
                        "example": 1,
                        "minimum": 0,
                        "maximum": 31
                    },
                    "shareToPayee": {
                        "type": "boolean",
                        "default": true,
                        "example": false
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Start date of the mandate (ddmmyyyy)",
                        "example": "02012006"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the mandate",
                        "example": "pending",
                        "enum": [
                            "pending",
                            "live",
                            "paused",
                            "revoked",
                            "rejected",
                            "completed"
                        ]
                    },
                    "transactionNote": {
                        "type": "string",
                        "description": "Transaction note of the mandate",
                        "example": "Transaction note"
                    },
                    "txnId": {
                        "type": "string",
                        "description": "NPCI transaction id",
                        "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 35,
                        "maxLength": 35
                    },
                    "umn": {
                        "type": "string",
                        "description": "Unique mandate number",
                        "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                    }
                },
                "example": {
                    "allowMultipleDebit": true,
                    "amount": 1000,
                    "amountRule": "max",
                    "autoExecute": true,
                    "autoPreNotify": true,
                    "blockFunds": true,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "creationMode": "qr",
                    "currency": "INR",
                    "customerRevocable": false,
                    "customerVpa": "ram@axis",
                    "endDate": "02012008",
                    "expireAfter": 120,
                    "firstExecutionAmount": 1000,
                    "frequency": "monthly",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "initiationMode": "04",
                    "maxAmountLimit": 1000,
                    "merchantId": "Hic non voluptas culpa quis.",
                    "merchantReferenceId": "ABC1234789",
                    "merchantVpa": "acme.corp@axis",
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "purpose": "14",
                    "reason": {
                        "errCode": "mandate-has-expired",
                        "npciErrCode": "QD",
                        "npciErrDesc": "MANDATE HAS EXPIRED"
                    },
                    "recurrenceRule": "on",
                    "recurrenceValue": 1,
                    "shareToPayee": false,
                    "startDate": "02012006",
                    "status": "pending",
                    "transactionNote": "Transaction note",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
            },
            "FetchPaymentListResponse": {
                "type": "object",
                "properties": {
                    "payments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FetchPaymentResponse"
                        },
                        "example": [
                            {
                                "amount": 10000,
                                "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                "currency": "INR",
                                "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                                "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "reason": {
                                    "failureReason": "unable-to-fulfill-request",
                                    "npciErrCode": "YG"
                                },
                                "refId": "1240689979139556558",
                                "rrn": "124068997913",
                                "status": "initiated",
                                "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                                "txnNote": "testpay"
                            },
                            {
                                "amount": 10000,
                                "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                "currency": "INR",
                                "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                                "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "reason": {
                                    "failureReason": "unable-to-fulfill-request",
                                    "npciErrCode": "YG"
                                },
                                "refId": "1240689979139556558",
                                "rrn": "124068997913",
                                "status": "initiated",
                                "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                                "txnNote": "testpay"
                            },
                            {
                                "amount": 10000,
                                "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                                "currency": "INR",
                                "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                                "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                                "reason": {
                                    "failureReason": "unable-to-fulfill-request",
                                    "npciErrCode": "YG"
                                },
                                "refId": "1240689979139556558",
                                "rrn": "124068997913",
                                "status": "initiated",
                                "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                                "txnNote": "testpay"
                            }
                        ]
                    }
                },
                "example": {
                    "payments": [
                        {
                            "amount": 10000,
                            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                            "currency": "INR",
                            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                            "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                            "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                            "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                            "reason": {
                                "failureReason": "unable-to-fulfill-request",
                                "npciErrCode": "YG"
                            },
                            "refId": "1240689979139556558",
                            "rrn": "124068997913",
                            "status": "initiated",
                            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                            "txnNote": "testpay"
                        },
                        {
                            "amount": 10000,
                            "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                            "currency": "INR",
                            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                            "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                            "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                            "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                            "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                            "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                            "reason": {
                                "failureReason": "unable-to-fulfill-request",
                                "npciErrCode": "YG"
                            },
                            "refId": "1240689979139556558",
                            "rrn": "124068997913",
                            "status": "initiated",
                            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                            "txnNote": "testpay"
                        }
                    ]
                }
            },
            "FetchPaymentResponse": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "paise denominated value collected from the user",
                        "example": 10000,
                        "format": "int64"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "currency": {
                        "type": "string",
                        "description": "indicates the currency used during the transaction",
                        "example": "INR"
                    },
                    "customerVpa": {
                        "type": "string",
                        "description": "remitter's VPA",
                        "example": "test-auto-tyvmm59i9b@okokaxis"
                    },
                    "id": {
                        "type": "string",
                        "description": "id of the resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "id associated with the merchant",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "reference id in the merchant's system",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "VPA used to accept payment",
                        "example": "test-auto-beibfev2oq@okokaxis"
                    },
                    "productInstanceId": {
                        "type": "string",
                        "description": "this is the deeplink / collect request / mandate id associated with the payment",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "reason": {
                        "$ref": "#/components/schemas/PaymentFailureReason"
                    },
                    "refId": {
                        "type": "string",
                        "description": "NPCI transaction refId",
                        "example": "1240689979139556558"
                    },
                    "rrn": {
                        "type": "string",
                        "description": "NPCI transaction custRef",
                        "example": "124068997913"
                    },
                    "status": {
                        "type": "string",
                        "description": "status defining the validity of the payment",
                        "example": "initiated",
                        "enum": ["initiated", "pending", "success", "failed"]
                    },
                    "txnId": {
                        "type": "string",
                        "description": "NPCI transaction id",
                        "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                    },
                    "txnNote": {
                        "type": "string",
                        "description": "note displayed to the customer at the payment page",
                        "example": "testpay"
                    }
                },
                "example": {
                    "amount": 10000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                    "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "reason": {
                        "failureReason": "unable-to-fulfill-request",
                        "npciErrCode": "YG"
                    },
                    "refId": "1240689979139556558",
                    "rrn": "124068997913",
                    "status": "initiated",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                    "txnNote": "testpay"
                },
                "required": [
                    "merchantVpa",
                    "customerVpa",
                    "amount",
                    "productInstanceId"
                ]
            },
            "FetchTPVResponse": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "amount for the transaction",
                        "example": 100,
                        "format": "int64"
                    },
                    "closedAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the closure date & time",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "currency": {
                        "type": "string",
                        "description": "indicates the currency used during the transaction",
                        "example": "INR"
                    },
                    "expireAfter": {
                        "type": "integer",
                        "description": "expire after in minutes for the transaction",
                        "example": 10,
                        "format": "int64"
                    },
                    "id": {
                        "type": "string",
                        "description": "id associated with the tpv",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "intentLink": {
                        "type": "string",
                        "description": "upi intent link",
                        "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "id associated with the merchant",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAW"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "id provided by the merchant",
                        "example": "1240689979139556556"
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "VPA used to accept payments",
                        "example": "deku@okokaxis"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "field provided for the merchant to add additional key-value pairs (metadata) for tpv transaction",
                        "example": {
                            "invoicenumber": "INV-21-12-009"
                        },
                        "format": "binary"
                    },
                    "minAmount": {
                        "type": "integer",
                        "description": "min amount for the transaction",
                        "example": 100,
                        "format": "int64"
                    },
                    "primaryAccount": {
                        "$ref": "#/components/schemas/TPVAccountDetailResponse"
                    },
                    "productConfigId": {
                        "type": "string",
                        "description": "id associated with the product config",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAP"
                    },
                    "reason": {
                        "$ref": "#/components/schemas/TpvClosureReason"
                    },
                    "refId": {
                        "type": "string",
                        "description": "NPCI transaction refId",
                        "example": "1240689979139556558"
                    },
                    "secondaryAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TPVAccountDetailResponse"
                        },
                        "description": "secondary accounts for the tpv transaction",
                        "example": [
                            {
                                "IFSC": "SBIN0000001",
                                "accountName": "deku",
                                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                "maskedAccountNumber": "**** **** **** 7890",
                                "requestId": "cjqml1f2e5ocq2mesej0"
                            },
                            {
                                "IFSC": "SBIN0000001",
                                "accountName": "deku",
                                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                "maskedAccountNumber": "**** **** **** 7890",
                                "requestId": "cjqml1f2e5ocq2mesej0"
                            },
                            {
                                "IFSC": "SBIN0000001",
                                "accountName": "deku",
                                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                "maskedAccountNumber": "**** **** **** 7890",
                                "requestId": "cjqml1f2e5ocq2mesej0"
                            },
                            {
                                "IFSC": "SBIN0000001",
                                "accountName": "deku",
                                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                "maskedAccountNumber": "**** **** **** 7890",
                                "requestId": "cjqml1f2e5ocq2mesej0"
                            }
                        ]
                    },
                    "shortCode": {
                        "type": "string",
                        "description": "short code used for payment short link",
                        "example": "Np3KnBCM8Om0"
                    },
                    "shortLink": {
                        "type": "string",
                        "description": "short link for the intent link",
                        "example": "bills.pe/Np3KnBCM8Om0"
                    },
                    "status": {
                        "type": "string",
                        "description": "status defining the validity of the tpv transaction",
                        "example": "closed",
                        "enum": ["inactive", "active", "paid", "closed"]
                    },
                    "transactionNote": {
                        "type": "string",
                        "description": "transaction note for the transaction",
                        "example": "test transaction"
                    }
                },
                "example": {
                    "amount": 100,
                    "closedAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "expireAfter": 10,
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAW",
                    "merchantReferenceId": "1240689979139556556",
                    "merchantVpa": "deku@okokaxis",
                    "metadata": {
                        "invoicenumber": "INV-21-12-009"
                    },
                    "minAmount": 100,
                    "primaryAccount": {
                        "IFSC": "SBIN0000001",
                        "accountName": "deku",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountNumber": "**** **** **** 7890",
                        "requestId": "cjqml1f2e5ocq2mesej0"
                    },
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAP",
                    "reason": {
                        "npciErrCode": "YG",
                        "tpvClosureReason": "unable-to-fulfill-request"
                    },
                    "refId": "1240689979139556558",
                    "secondaryAccounts": [
                        {
                            "IFSC": "SBIN0000001",
                            "accountName": "deku",
                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "maskedAccountNumber": "**** **** **** 7890",
                            "requestId": "cjqml1f2e5ocq2mesej0"
                        },
                        {
                            "IFSC": "SBIN0000001",
                            "accountName": "deku",
                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "maskedAccountNumber": "**** **** **** 7890",
                            "requestId": "cjqml1f2e5ocq2mesej0"
                        },
                        {
                            "IFSC": "SBIN0000001",
                            "accountName": "deku",
                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "maskedAccountNumber": "**** **** **** 7890",
                            "requestId": "cjqml1f2e5ocq2mesej0"
                        }
                    ],
                    "shortCode": "Np3KnBCM8Om0",
                    "shortLink": "bills.pe/Np3KnBCM8Om0",
                    "status": "closed",
                    "transactionNote": "test transaction"
                }
            },
            "MandateExecutionResponse": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "Amount of the mandate",
                        "example": 1000,
                        "minimum": 100,
                        "maximum": 20000000
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "string",
                        "description": "id of the resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "mandateId": {
                        "type": "string",
                        "description": "Id of the mandate that needs to be executed",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "Id of the merchant who created the mandate",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Merchant reference id of the mandate",
                        "example": "ABC1234789",
                        "minLength": 5,
                        "maxLength": 50
                    },
                    "reason": {
                        "$ref": "#/components/schemas/MandateReason"
                    },
                    "remark": {
                        "type": "string",
                        "description": "Remark for the mandate transaction",
                        "example": "Transaction for car loan emi"
                    },
                    "sequenceNumber": {
                        "type": "integer",
                        "description": "Sequence number of the mandate",
                        "example": 1,
                        "format": "int64"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the mandate execution request",
                        "example": "live",
                        "enum": ["pending", "initiated", "success", "failed"]
                    },
                    "txnId": {
                        "type": "string",
                        "description": "NPCI transaction id",
                        "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 35,
                        "maxLength": 35
                    },
                    "umn": {
                        "type": "string",
                        "description": "Unique mandate number",
                        "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                    }
                },
                "example": {
                    "amount": 1000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "ABC1234789",
                    "reason": {
                        "errCode": "mandate-has-expired",
                        "npciErrCode": "QD",
                        "npciErrDesc": "MANDATE HAS EXPIRED"
                    },
                    "remark": "Transaction for car loan emi",
                    "sequenceNumber": 1,
                    "status": "live",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
            },
            "MandatePreDebitNotificationResponse": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "Amount of the mandate",
                        "example": 1000,
                        "minimum": 100,
                        "maximum": 20000000
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "executionDate": {
                        "type": "string",
                        "description": "Execution date of the mandate",
                        "example": "02012006"
                    },
                    "id": {
                        "type": "string",
                        "description": "id of the resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "mandateId": {
                        "type": "string",
                        "description": "Id of the mandate that needs to be notified",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "Id of the merchant who created the mandate",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Merchant reference id of the mandate",
                        "example": "ABC1234789",
                        "minLength": 5,
                        "maxLength": 50
                    },
                    "reason": {
                        "$ref": "#/components/schemas/MandateReason"
                    },
                    "sequenceNumber": {
                        "type": "integer",
                        "description": "Sequence number of the mandate",
                        "example": 1,
                        "format": "int64"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the pre debit notification request",
                        "example": "success",
                        "enum": ["pending", "initiated", "success", "failed"]
                    },
                    "txnId": {
                        "type": "string",
                        "description": "NPCI transaction id",
                        "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 35,
                        "maxLength": 35
                    },
                    "umn": {
                        "type": "string",
                        "description": "Unique mandate number",
                        "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                    }
                },
                "example": {
                    "amount": 1000,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "executionDate": "02012006",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "ABC1234789",
                    "reason": {
                        "errCode": "mandate-has-expired",
                        "npciErrCode": "QD",
                        "npciErrDesc": "MANDATE HAS EXPIRED"
                    },
                    "sequenceNumber": 1,
                    "status": "success",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
            },
            "MandateReason": {
                "type": "object",
                "properties": {
                    "errCode": {
                        "type": "string",
                        "description": "Error code returned by Setu for mandate failures",
                        "example": "mandate-has-expired"
                    },
                    "npciErrCode": {
                        "type": "string",
                        "description": "Error code received from NPCI in case mandate request fails",
                        "example": "QD"
                    },
                    "npciErrDesc": {
                        "type": "string",
                        "description": "indicates collect request closure reason",
                        "example": "MANDATE HAS EXPIRED"
                    }
                },
                "example": {
                    "errCode": "mandate-has-expired",
                    "npciErrCode": "QD",
                    "npciErrDesc": "MANDATE HAS EXPIRED"
                }
            },
            "MerchantResponse": {
                "type": "object",
                "properties": {
                    "acceptDeemedTxns": {
                        "type": "boolean",
                        "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
                        "example": true
                    },
                    "addressProviderId": {
                        "type": "string",
                        "description": "Id of the Address Provider associated with the Merchant",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "businessName": {
                        "type": "string",
                        "description": "Brand name or Consumer facing name",
                        "example": "deku"
                    },
                    "businessType": {
                        "type": "string",
                        "description": "Incorporation type",
                        "example": "PROPRIETARY",
                        "enum": [
                            "PROPRIETARY",
                            "PARTNERSHIP",
                            "PRIVATE",
                            "PUBLIC",
                            "OTHERS"
                        ]
                    },
                    "callbackURLsEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether CallbackURLs are enabled for Merchant",
                        "example": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "documentStatus": {
                        "type": "string",
                        "description": "Current Status of the Merchant Controlled by Admin / Onboarding Team",
                        "example": "APPROVED",
                        "enum": ["PENDING", "SUBMITTED", "APPROVED", "REJECTED"]
                    },
                    "franchiseName": {
                        "type": "string",
                        "description": "Franchise name",
                        "example": "deku",
                        "pattern": "^[a-zA-Z0-9 ]+$"
                    },
                    "genre": {
                        "type": "string",
                        "description": "Online / Offline",
                        "example": "ONLINE",
                        "enum": ["ONLINE", "OFFLINE"]
                    },
                    "id": {
                        "type": "string",
                        "description": "id of the resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "legalName": {
                        "type": "string",
                        "description": "Legal name as per incorporation documents",
                        "example": "deku"
                    },
                    "mcc": {
                        "type": "string",
                        "description": "Category of business operation",
                        "example": "5432"
                    },
                    "merchantName": {
                        "type": "string",
                        "description": "Name used by Merchant user to identify a given Merchant from others",
                        "example": "deku"
                    },
                    "merchantType": {
                        "type": "string",
                        "description": "merchant type",
                        "default": "small",
                        "example": "small",
                        "enum": ["small", "large"]
                    },
                    "onboardingType": {
                        "type": "string",
                        "description": "onboarding type",
                        "default": "bank",
                        "example": "bank",
                        "enum": ["bank", "aggregator"]
                    },
                    "paId": {
                        "type": "string",
                        "description": "Id of the Payment Aggregator associated with the Merchant",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "settlement": {
                        "$ref": "#/components/schemas/SettlementConfiguration"
                    },
                    "settlementsEnabled": {
                        "type": "boolean",
                        "description": "indicates whether settlements are enabled for merchant or not",
                        "example": true
                    },
                    "standardAccountId": {
                        "type": "string",
                        "description": "id of standard account associated with merchant",
                        "example": "328a928f-e277-4798-8e28-4b19a61a8a22"
                    },
                    "transactionStatus": {
                        "type": "string",
                        "description": "Current Transaction Status of the Merchant",
                        "example": "active",
                        "enum": ["active", "inactive"]
                    }
                },
                "example": {
                    "acceptDeemedTxns": true,
                    "addressProviderId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "businessName": "deku",
                    "businessType": "PROPRIETARY",
                    "callbackURLsEnabled": true,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "documentStatus": "APPROVED",
                    "franchiseName": "deku",
                    "genre": "ONLINE",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "legalName": "deku",
                    "mcc": "5432",
                    "merchantName": "deku",
                    "merchantType": "small",
                    "onboardingType": "bank",
                    "paId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "settlement": {
                        "cycles": [
                            {
                                "endTime": "1988-08-11T09:04:11Z",
                                "settlementTime": "2008-05-03T21:14:44Z",
                                "startTime": "2008-10-03T03:41:32Z"
                            },
                            {
                                "endTime": "1988-08-11T09:04:11Z",
                                "settlementTime": "2008-05-03T21:14:44Z",
                                "startTime": "2008-10-03T03:41:32Z"
                            }
                        ],
                        "frequency": "TPlusOne",
                        "splitsEnabled": true,
                        "type": "Net"
                    },
                    "settlementsEnabled": false,
                    "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
                    "transactionStatus": "active"
                }
            },
            "ModifyRequestBody": {
                "type": "object",
                "properties": {
                    "amountLimit": {
                        "type": "integer",
                        "description": "Maximum amount for which a mandate transaction can be executed",
                        "example": 1000,
                        "minimum": 10000,
                        "maximum": 2000000000
                    },
                    "endDate": {
                        "type": "string",
                        "description": "End date of the mandate",
                        "example": "02012006"
                    },
                    "expireAfter": {
                        "type": "integer",
                        "description": "Number of seconds after which the mandate creation request will expire",
                        "default": 120,
                        "example": 120,
                        "minimum": 120,
                        "maximum": 7776000
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Merchant reference id of the mandate",
                        "example": "ABC1234789",
                        "minLength": 5,
                        "maxLength": 50
                    }
                },
                "example": {
                    "amountLimit": 1000,
                    "endDate": "02012006",
                    "expireAfter": 120,
                    "merchantReferenceId": "ABC1234789"
                }
            },
            "NotifyRequestBody": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "Amount of the mandate",
                        "example": 1000,
                        "minimum": 100,
                        "maximum": 20000000
                    },
                    "executionDate": {
                        "type": "string",
                        "description": "Execution date of the mandate",
                        "example": "02012006"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Merchant reference id of the mandate",
                        "example": "ABC1234789",
                        "minLength": 5,
                        "maxLength": 50
                    },
                    "sequenceNumber": {
                        "type": "integer",
                        "description": "Sequence number of the mandate",
                        "example": 1,
                        "format": "int64"
                    },
                    "umn": {
                        "type": "string",
                        "description": "Unique mandate number",
                        "example": "setumandate1234789@ybl"
                    }
                },
                "example": {
                    "amount": 1000,
                    "executionDate": "02012006",
                    "merchantReferenceId": "ABC1234789",
                    "sequenceNumber": 1,
                    "umn": "setumandate1234789@ybl"
                },
                "required": ["umn", "executionDate", "amount", "sequenceNumber"]
            },
            "PaymentFailureReason": {
                "type": "object",
                "properties": {
                    "failureReason": {
                        "type": "string",
                        "description": "indicates payment failure reason",
                        "example": "unable-to-fulfill-request"
                    },
                    "npciErrCode": {
                        "type": "string",
                        "description": "err code received from NPCI",
                        "example": "YG"
                    }
                },
                "example": {
                    "failureReason": "unable-to-fulfill-request",
                    "npciErrCode": "YG"
                }
            },
            "ProductConfigResponse": {
                "type": "object",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "string",
                        "description": "id of the resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "id associated with the merchant",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "reference id in the merchant's system",
                        "example": "customer-ref-id"
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "VPA used to accept payments",
                        "example": "deku@okokaxis",
                        "pattern": "^[\\w.-]+@[\\w.-]+$"
                    },
                    "productInstanceType": {
                        "type": "string",
                        "description": "indicates the type of products that can be created using this config",
                        "example": "pay_single",
                        "enum": [
                            "pay_single",
                            "pay_multi",
                            "collect",
                            "autopay",
                            "pay_single_tpv"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "description": "indicates the validity of product config",
                        "example": "active"
                    }
                },
                "example": {
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "customer-ref-id",
                    "merchantVpa": "deku@okokaxis",
                    "productInstanceType": "pay_single",
                    "status": "active"
                },
                "required": ["productInstanceType", "merchantVpa", "merchantId"]
            },
            "RevokeMandateResponse": {
                "type": "object",
                "properties": {
                    "expireAfter": {
                        "type": "integer",
                        "description": "Number of seconds after which the mandate revoke request will expire",
                        "default": 120,
                        "example": 120,
                        "minimum": 120,
                        "maximum": 7776000
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the mandate request resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "intentLink": {
                        "type": "string",
                        "example": "upi://mandate?pa=deku040920232@okokaxis&validitystart=1995-12-31&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=04&purpose=14&rev=N&block=N&txnType=revoke&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETE9q1rQXW3wXHzDdaqJTDGHHTBkJ0Segc"
                    },
                    "mandateId": {
                        "type": "string",
                        "description": "Id of the mandate resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "Id of the merchant who created the mandate",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Merchant reference id of the mandate",
                        "example": "ABC1234789",
                        "minLength": 5,
                        "maxLength": 50
                    },
                    "mode": {
                        "type": "string",
                        "example": "intent",
                        "enum": ["collect", "intent"]
                    },
                    "status": {
                        "type": "string",
                        "example": "pending",
                        "enum": ["pending", "initiated", "success", "failed"]
                    },
                    "txnId": {
                        "type": "string",
                        "description": "NPCI transaction id",
                        "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 35,
                        "maxLength": 35
                    },
                    "umn": {
                        "type": "string",
                        "description": "Unique mandate number",
                        "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                    }
                },
                "example": {
                    "expireAfter": 120,
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "intentLink": "upi://mandate?pa=deku040920232@okokaxis&validitystart=1995-12-31&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=04&purpose=14&rev=N&block=N&txnType=revoke&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETE9q1rQXW3wXHzDdaqJTDGHHTBkJ0Segc",
                    "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "ABC1234789",
                    "mode": "intent",
                    "status": "pending",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
            },
            "RevokeRequestBody": {
                "type": "object",
                "properties": {
                    "expireAfter": {
                        "type": "integer",
                        "description": "Number of seconds after which the mandate revoke request will expire",
                        "default": 120,
                        "example": 120,
                        "minimum": 120,
                        "maximum": 7776000
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Merchant reference id of the mandate",
                        "example": "ABC1234789",
                        "minLength": 5,
                        "maxLength": 50
                    }
                },
                "example": {
                    "expireAfter": 120,
                    "merchantReferenceId": "ABC1234789"
                }
            },
            "SettlementConfiguration": {
                "type": "object",
                "properties": {
                    "cycles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SettlementCycle"
                        },
                        "description": "settlement_cycles",
                        "example": [
                            {
                                "endTime": "2002-05-29T00:41:13Z",
                                "settlementTime": "1998-11-17T16:58:52Z",
                                "startTime": "2015-10-28T14:14:02Z"
                            },
                            {
                                "endTime": "2002-05-29T00:41:13Z",
                                "settlementTime": "1998-11-17T16:58:52Z",
                                "startTime": "2015-10-28T14:14:02Z"
                            },
                            {
                                "endTime": "2002-05-29T00:41:13Z",
                                "settlementTime": "1998-11-17T16:58:52Z",
                                "startTime": "2015-10-28T14:14:02Z"
                            }
                        ]
                    },
                    "frequency": {
                        "type": "string",
                        "example": "TPlusOne",
                        "enum": [
                            "Instant",
                            "TZero",
                            "TPlusOne",
                            "TPlusTwo",
                            "TPlusFour"
                        ]
                    },
                    "splitsEnabled": {
                        "type": "boolean",
                        "example": true
                    },
                    "type": {
                        "type": "string",
                        "example": "Net",
                        "enum": ["Net", "Gross"]
                    }
                },
                "example": {
                    "cycles": [
                        {
                            "endTime": "2002-05-29T00:41:13Z",
                            "settlementTime": "1998-11-17T16:58:52Z",
                            "startTime": "2015-10-28T14:14:02Z"
                        },
                        {
                            "endTime": "2002-05-29T00:41:13Z",
                            "settlementTime": "1998-11-17T16:58:52Z",
                            "startTime": "2015-10-28T14:14:02Z"
                        },
                        {
                            "endTime": "2002-05-29T00:41:13Z",
                            "settlementTime": "1998-11-17T16:58:52Z",
                            "startTime": "2015-10-28T14:14:02Z"
                        }
                    ],
                    "frequency": "TPlusOne",
                    "splitsEnabled": false,
                    "type": "Net"
                },
                "required": ["frequency", "type", "cycles"]
            },
            "SettlementCycle": {
                "type": "object",
                "properties": {
                    "endTime": {
                        "type": "string",
                        "example": "2004-04-29T02:22:33Z",
                        "format": "date-time"
                    },
                    "settlementTime": {
                        "type": "string",
                        "example": "1996-07-11T12:26:29Z",
                        "format": "date-time"
                    },
                    "startTime": {
                        "type": "string",
                        "example": "2008-03-29T04:17:56Z",
                        "format": "date-time"
                    }
                },
                "example": {
                    "endTime": "2010-07-10T20:57:43Z",
                    "settlementTime": "1995-06-09T19:36:14Z",
                    "startTime": "2005-12-25T06:34:45Z"
                }
            },
            "TPVAccountDetail": {
                "type": "object",
                "properties": {
                    "IFSC": {
                        "type": "string",
                        "description": "IFSC code for the account",
                        "example": "SBIN0000001"
                    },
                    "accountName": {
                        "type": "string",
                        "description": "account holder name for the account",
                        "example": "deku"
                    },
                    "accountNumber": {
                        "type": "string",
                        "description": "account number for the account",
                        "example": "1234567890"
                    }
                },
                "example": {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                }
            },
            "TPVAccountDetailResponse": {
                "type": "object",
                "properties": {
                    "IFSC": {
                        "type": "string",
                        "description": "IFSC code for the account",
                        "example": "SBIN0000001"
                    },
                    "accountName": {
                        "type": "string",
                        "description": "account holder name for the account",
                        "example": "deku"
                    },
                    "encryptedAccountNumber": {
                        "type": "string",
                        "description": "Base64-encoded encrypted account number",
                        "example": "5e884898da28047151d0e56f8dc629277"
                    },
                    "hashedAccountNumber": {
                        "type": "string",
                        "description": "Base64-encoded hashed account number",
                        "example": "5e884898da28047151d0e56f8dc629277"
                    },
                    "maskedAccountNumber": {
                        "type": "string",
                        "description": "Masked account number",
                        "example": "**** **** **** 7890"
                    },
                    "requestId": {
                        "type": "string",
                        "example": "cjqml1f2e5ocq2mesej0"
                    }
                },
                "description": "API response for TPV creation",
                "example": {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountNumber": "**** **** **** 7890",
                    "requestId": "cjqml1f2e5ocq2mesej0"
                }
            },
            "TPVResponse": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "amount for the transaction",
                        "example": 100,
                        "format": "int64"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "currency": {
                        "type": "string",
                        "description": "indicates the currency used during the transaction",
                        "example": "INR"
                    },
                    "expireAfter": {
                        "type": "integer",
                        "description": "expire after in minutes for the transaction",
                        "example": 10,
                        "format": "int64"
                    },
                    "id": {
                        "type": "string",
                        "description": "id associated with the tpv",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "intentLink": {
                        "type": "string",
                        "description": "upi intent link",
                        "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "id associated with the merchant",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAW"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "id provided by the merchant",
                        "example": "1240689979139556556"
                    },
                    "merchantVpa": {
                        "type": "string",
                        "description": "VPA used to accept payments",
                        "example": "deku@okokaxis"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "field provided for the merchant to add additional key-value pairs (metadata) for tpv transaction",
                        "example": {
                            "invoicenumber": "INV-21-12-009"
                        },
                        "format": "binary"
                    },
                    "minAmount": {
                        "type": "integer",
                        "description": "min amount for the transaction",
                        "example": 100,
                        "format": "int64"
                    },
                    "primaryAccount": {
                        "$ref": "#/components/schemas/TPVAccountDetailResponse"
                    },
                    "productConfigId": {
                        "type": "string",
                        "description": "id associated with the product config",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAP"
                    },
                    "refId": {
                        "type": "string",
                        "description": "NPCI transaction refId",
                        "example": "1240689979139556558"
                    },
                    "secondaryAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TPVAccountDetailResponse"
                        },
                        "description": "secondary accounts for the tpv transaction",
                        "example": [
                            {
                                "IFSC": "SBIN0000001",
                                "accountName": "deku",
                                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                "maskedAccountNumber": "**** **** **** 7890",
                                "requestId": "cjqml1f2e5ocq2mesej0"
                            },
                            {
                                "IFSC": "SBIN0000001",
                                "accountName": "deku",
                                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                                "maskedAccountNumber": "**** **** **** 7890",
                                "requestId": "cjqml1f2e5ocq2mesej0"
                            }
                        ]
                    },
                    "shortCode": {
                        "type": "string",
                        "description": "short code used for payment short link",
                        "example": "Np3KnBCM8Om0"
                    },
                    "shortLink": {
                        "type": "string",
                        "description": "short link for the intent link",
                        "example": "bills.pe/Np3KnBCM8Om0"
                    },
                    "status": {
                        "type": "string",
                        "description": "status defining the validity of the tpv transaction",
                        "example": "active",
                        "enum": ["inactive", "active", "paid", "closed"]
                    },
                    "transactionNote": {
                        "type": "string",
                        "description": "transaction note for the transaction",
                        "example": "test transaction"
                    }
                },
                "example": {
                    "amount": 100,
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "currency": "INR",
                    "expireAfter": 10,
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis&pn=merchant-4&am=100.00&tr=SU1240659756905923780&tn=sample%20single%20use%20qr&cu=INR&mc=1234",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAW",
                    "merchantReferenceId": "1240689979139556556",
                    "merchantVpa": "deku@okokaxis",
                    "metadata": {
                        "invoicenumber": "INV-21-12-009"
                    },
                    "minAmount": 100,
                    "primaryAccount": {
                        "IFSC": "SBIN0000001",
                        "accountName": "deku",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountNumber": "**** **** **** 7890",
                        "requestId": "cjqml1f2e5ocq2mesej0"
                    },
                    "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAP",
                    "refId": "1240689979139556558",
                    "secondaryAccounts": [
                        {
                            "IFSC": "SBIN0000001",
                            "accountName": "deku",
                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "maskedAccountNumber": "**** **** **** 7890",
                            "requestId": "cjqml1f2e5ocq2mesej0"
                        },
                        {
                            "IFSC": "SBIN0000001",
                            "accountName": "deku",
                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "maskedAccountNumber": "**** **** **** 7890",
                            "requestId": "cjqml1f2e5ocq2mesej0"
                        },
                        {
                            "IFSC": "SBIN0000001",
                            "accountName": "deku",
                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "maskedAccountNumber": "**** **** **** 7890",
                            "requestId": "cjqml1f2e5ocq2mesej0"
                        },
                        {
                            "IFSC": "SBIN0000001",
                            "accountName": "deku",
                            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                            "maskedAccountNumber": "**** **** **** 7890",
                            "requestId": "cjqml1f2e5ocq2mesej0"
                        }
                    ],
                    "shortCode": "Np3KnBCM8Om0",
                    "shortLink": "bills.pe/Np3KnBCM8Om0",
                    "status": "active",
                    "transactionNote": "test transaction"
                }
            },
            "TpvClosureReason": {
                "type": "object",
                "properties": {
                    "npciErrCode": {
                        "type": "string",
                        "description": "err code received from NPCI in case tpv transaction is closed due to payment failure",
                        "example": "YG"
                    },
                    "tpvClosureReason": {
                        "type": "string",
                        "description": "indicates tpv transaction closure reason",
                        "example": "unable-to-fulfill-request"
                    }
                },
                "example": {
                    "npciErrCode": "YG",
                    "tpvClosureReason": "unable-to-fulfill-request"
                }
            },
            "UpdateConfigRequestBody": {
                "type": "object",
                "properties": {
                    "acceptDeemedTxns": {
                        "type": "boolean",
                        "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
                        "example": true
                    },
                    "callbackURLsEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether CallbackURLs are enabled for Merchant",
                        "example": true
                    }
                },
                "example": {
                    "acceptDeemedTxns": true,
                    "callbackURLsEnabled": true
                }
            },
            "UpdateDisputeStatusRequestBody": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string",
                        "description": "Reason for accepting or rejecting the dispute",
                        "example": "Dispute accepted by merchant"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the dispute updated by the merchant",
                        "example": "accepted",
                        "enum": ["accepted", "rejected"]
                    }
                },
                "example": {
                    "reason": "Dispute accepted by merchant",
                    "status": "rejected"
                },
                "required": ["status"]
            },
            "UpdateDisputeStatusResponse": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "Amount of the original payment for the dispute",
                        "example": 100,
                        "format": "int64"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency of the original payment for the dispute",
                        "example": "INR"
                    },
                    "id": {
                        "type": "string",
                        "description": "Dispute id of the dispute",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "id associated with the merchant",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAW"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Merchant reference id of the dispute",
                        "example": "1240689979139556557"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Reason for accepting or rejecting the dispute",
                        "example": "Dispute accepted by merchant"
                    },
                    "rrn": {
                        "type": "string",
                        "description": "RRN of the dispute",
                        "example": "123456781234"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the dispute updated by the merchant",
                        "example": "rejected",
                        "enum": ["accepted", "rejected"]
                    },
                    "txnId": {
                        "type": "string",
                        "description": "Transaction id of the original payment for the dispute",
                        "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                    }
                },
                "example": {
                    "amount": 100,
                    "currency": "INR",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAW",
                    "merchantReferenceId": "1240689979139556557",
                    "reason": "Dispute accepted by merchant",
                    "rrn": "123456781234",
                    "status": "rejected",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                }
            },
            "UpdateMandateResponse": {
                "type": "object",
                "properties": {
                    "amountLimit": {
                        "type": "integer",
                        "description": "Maximum amount for which a mandate transaction can be executed",
                        "example": 1000,
                        "minimum": 10000,
                        "maximum": 2000000000
                    },
                    "endDate": {
                        "type": "string",
                        "description": "End date of the mandate",
                        "example": "02012006"
                    },
                    "expireAfter": {
                        "type": "integer",
                        "description": "Number of seconds after which the mandate creation request will expire",
                        "default": 120,
                        "example": 120,
                        "minimum": 120,
                        "maximum": 7776000
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the mandate request resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "intentLink": {
                        "type": "string",
                        "example": "upi://mandate?pa=deku040920232@okokaxis&validitystart=31121995&validityend=30122025&am=901.00&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=01&purpose=14&rev=N&block=N&txnType=update&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou"
                    },
                    "mandateId": {
                        "type": "string",
                        "description": "Id of the mandate resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "Id of the merchant who created the mandate",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "Merchant reference id of the mandate",
                        "example": "ABC1234789",
                        "minLength": 5,
                        "maxLength": 50
                    },
                    "mode": {
                        "type": "string",
                        "example": "qr",
                        "enum": ["collect", "qr", "intent"]
                    },
                    "status": {
                        "type": "string",
                        "example": "pending",
                        "enum": ["pending", "initiated", "success", "failed"]
                    },
                    "txnId": {
                        "type": "string",
                        "description": "NPCI transaction id",
                        "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 35,
                        "maxLength": 35
                    },
                    "umn": {
                        "type": "string",
                        "description": "Unique mandate number",
                        "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                    }
                },
                "example": {
                    "amountLimit": 1000,
                    "endDate": "02012006",
                    "expireAfter": 120,
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "intentLink": "upi://mandate?pa=deku040920232@okokaxis&validitystart=31121995&validityend=30122025&am=901.00&amrule=max&recur=one%20time&recurvalue=0&recurtype=on&cu=INR&mc=1234&mode=01&purpose=14&rev=N&block=N&txnType=update&umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0&tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                    "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "ABC1234789",
                    "mode": "qr",
                    "status": "pending",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
            },
            "UpdateStatusRequestBody": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "updated status of the VPA",
                        "example": "active",
                        "enum": ["active", "inactive"]
                    }
                },
                "example": {
                    "status": "active"
                },
                "required": ["status"]
            },
            "UpdateTxnStatusRequestBody": {
                "type": "object",
                "properties": {
                    "deactivateAllProductInstances": {
                        "type": "boolean",
                        "description": "indicates whether all product instances associated to merchant are to be disabled if transaction status is updated to inactive",
                        "example": false
                    },
                    "transactionStatus": {
                        "type": "string",
                        "description": "Current Transaction Status of the Merchant",
                        "example": "active",
                        "enum": ["active", "inactive"]
                    }
                },
                "example": {
                    "deactivateAllProductInstances": true,
                    "transactionStatus": "active"
                },
                "required": ["transactionStatus"]
            },
            "VerifyRequestBody": {
                "type": "object",
                "properties": {
                    "customerVpa": {
                        "type": "string",
                        "description": "remitter's VPA to be verified",
                        "example": "dekup@okokaxis"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "reference id in the merchant's system",
                        "example": "1240689979139556557",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 50
                    }
                },
                "example": {
                    "customerVpa": "dekup@okokaxis",
                    "merchantReferenceId": "1240689979139556557"
                },
                "required": ["customerVpa"]
            },
            "VpaResponse": {
                "type": "object",
                "properties": {
                    "addressProvider": {
                        "type": "string",
                        "description": "address provider providing the vpa",
                        "example": "Axis"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "ISO 8601 timestamp to indicate the creation date & time for the resource",
                        "example": "2023-09-04 12:08:20.202644 +0530 IST",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "string",
                        "description": "id of the resource",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantId": {
                        "type": "string",
                        "description": "id associated with the merchant",
                        "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                    },
                    "merchantReferenceId": {
                        "type": "string",
                        "description": "reference id in the merchant's system",
                        "example": "1240689979139556557",
                        "pattern": "^[a-zA-Z0-9]*$",
                        "minLength": 1,
                        "maxLength": 50
                    },
                    "status": {
                        "type": "string",
                        "description": "indicates the validity of vpa",
                        "example": "active",
                        "enum": ["active", "inactive"]
                    },
                    "vpa": {
                        "type": "string",
                        "description": "VPA that is created / updated",
                        "example": "deku@okokaxis"
                    }
                },
                "example": {
                    "addressProvider": "Axis",
                    "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantReferenceId": "1240689979139556557",
                    "status": "active",
                    "vpa": "deku@okokaxis"
                }
            }
        },
        "securitySchemes": {
            "jwt_header_Authorization": {
                "type": "http",
                "description": "Secures endpoint by requiring a valid JWT token.",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "aggregator",
            "description": "Aggregator services handle aggregator config creation, updation"
        },
        {
            "name": "collect",
            "description": "The collect service handles collect request related operations"
        },
        {
            "name": "customer-vpa",
            "description": "The customer-vpa service handles customer / payer vpa verification related operations"
        },
        {
            "name": "payment-link",
            "description": "The payment-link service handles qr / payment-link related operations"
        },
        {
            "name": "product-config",
            "description": "The product-config service handles product config related operations"
        },
        {
            "name": "tpv"
        },
        {
            "name": "vpa",
            "description": "The vpa service handles vpa related operations"
        },
        {
            "name": "disputes",
            "description": "The dispute service handles disputes related operations"
        },
        {
            "name": "mandates",
            "description": "The mandates service exposes methods to maintain the life cycle of a mandate"
        },
        {
            "name": "merchant",
            "description": "The merchant service handles merchant related operations"
        },
        {
            "name": "payments",
            "description": "The payments service handles payment related operations"
        },
        {
            "name": "refund",
            "description": "The refund service handles refund related operations"
        }
    ]
}
